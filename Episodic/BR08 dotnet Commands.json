{
    "guid": "2b3fdde1-d850-4555-a181-5313e2e120f0",
    "creation_utc": "2024-03-24T14:10:09.065990+00:00",
    "code": "BR08",
    "title": "dotnet Commands",
    "notes": [
        {
            "guid": "fde1f845-7c6b-493b-ba84-b064fc79d81e",
            "creation_utc": "2024-03-24T14:13:37.089614+00:00",
            "code": "AR28",
            "content": [
                "\"dotnet publish\", when a runtime is specified by the \"--runtime\" option, internally runs \"dotnet build --runtime\",",
                "    which seems to generate platform-agonistic binaries (or something that can be turned into them)",
                "    somewhere in the obj directory and platform-specific ones in the bin directory.",
                "When I deleted the bin and obj directories of a project with no references and ran this script,",
                "    binaries were output ONLY to bin/Release/net8.0/win-x64 and NOT bin/Release or bin/Release/net8.0.",
                "",
                "When the files were messy and the code was unstable, my understanding was more like:",
                "    * \"dotnet publish --runtime\" internally calls \"dotnet build\" without a runtime specified",
                "    * Platform-agonistic binaries are generated to bin/Release/net8.0 by the runtime-unspecified \"dotnet build\"",
                "    * Platform-specific binaries are generated to bin/Release/net8.0/win-x64 by the runtime-specified \"dotnet publish --runtime\"",
                "",
                "Now I believe it's more like:",
                "    * \"dotnet publish --runtime\" internally calls \"dotnet build --runtime\" with a runtime specified",
                "    * Platform-agonistic binaries are generated somewhere in the obj directory by the runtime-specified \"dotnet build --runtime\"",
                "    * Platform-specific binaries are generated to bin/Release/net8.0/win-x64 by the runtime-specified \"dotnet build --runtime\"",
                "    * So, all the binaries are generated by the runtime-specified \"dotnet build --runtime\"",
                "    * \"dotnet publish --runtime\" just copies whatever needed, possibly updating metadata and adjusting the binaries for the runtime",
                "",
                "Currently, yyTodoMail references yyLib.",
                "When I rebuilt and archived them with this script, I got 2 archives.",
                "Let's call them yyTodoMail.zip and yyLib.zip here.",
                "",
                "What I wasnt expecting was:",
                "    * yyLib.dll in yyTodoMail.zip was different from yyLib.dll in yyLib.zip",
                "    * yyLib.dll in yyTodoMail.zip was the same as the platform-agonistic one in yyLib/bin/Release/net8.0",
                "    * yyLib.dll in yyLib.zip was the same as the platform-specific one in yyLib/bin/Release/net8.0/win-x64",
                "",
                "ChatGPT and other sources say that recent .NET binaries, especially those of class libraries, are generally platform-agonistic.",
                "People say different things most likely because .NET used to be a Windows-only thing and so much has changed since then.",
                "I believe now it's safe to say .NET has become like Java, where the binaries are platform-agonistic by default.",
                "Well, at least non-executable DLL files should be.",
                "",
                "For this reason, \"dotnet publish --runtime\" with a runtime specified selected the platform-agonistic binaries of yyLib for yyTodoMail,",
                "    NOT the platform-specific ones matching the runtime specified to the command, and archived them into yyTodoMail.zip.",
                "During this process of building yyTodoMail, it is highly likely that the \"dotnet publish\" command for building yyTodoMail",
                "    was the one that prepared the platform-agonistic binaries of yyLib in yyLib/bin/Release/net8.0.",
                "Then, this script, following its design, archived the platform-specific binaries of each project into their archives.",
                "That is how yyTodoMail.zip had the platform-agonistic yyLib.dll and yyLib.zip had the platform-specific one.",
                "",
                "Actually, there's not much point in distributing platform-specific binaries of class libraries",
                "    especially when their source code is available and they are easy to build.",
                "If yyLib was like a hundred times larger and more complicated to build,",
                "    distributing platform-specific binaries for all major platforms would be meaningful, though.",
                "",
                "Now about RE-building:",
                "\"dotnet clean\" deletes files in the bin and obj directories that have been generated by \"dotnet build\".",
                "ChatGPT said it's a platform-agnostic operation and, even when \"dotnet publish --runtime\" with a runtime specified had been run,",
                "    we didnt necessarily have to specify the runtime to \"dotnet clean\".",
                "That seemed incorrect.",
                "When I followed the advice, \"dotnet publish --runtime\" didnt update the binaries.",
                "In the archives, unless the source code had been changed, I always got old binaries with old timestamps.",
                "",
                "After some testing, I believe:",
                "    * \"dotnet clean\" too chooses what part of the project to clean based on the runtime specified",
                "    * If we want to rebuild a project for a specific platform, we need to run \"dotnet clean --runtime\" for that platform",
                "    * We may use \"dotnet clean\" without a runtime specified if we want to rebuild the platform-agonistic binaries",
                "",
                "This script runs \"dotnet build\" without a runtime specified for \"1) Build\"",
                "    and \"dotnet publish --runtime\" with a runtime specified for \"3) Rebuild and archive\".",
                "#1 is for repeated testing and, therefore, should be fast by utilizing the incremental build feature.",
                "#3 is for releasing and, therefore, should rebuild everything and set the current timestamps to the binaries.",
                "",
                "Some say we should just delete the bin and obj directories considering that's the simplest way.",
                "I like it's simplicity, but I prefer not to do this because various runtime-generated test files too will be deleted.",
                "",
                "Some others say \"dotnet build --no-incremental\" followed by \"dotnet publish --no-build\" is the right way.",
                "As .NET's build system is complex, I prefer to avoid expecting the \"--no-incremental\" option to work perfectly",
                "    especially when a script like this attempts to build more than 10 projects at once.",
                "Sometimes, some outdated/redundant files may be left in the bin and obj directories.",
                "If there's a command that's supposed to clean things without affecting test files, let's simply use it. :)",
                "",
                "The algorithm in this script seems to properly sort the projects in a way that the referenced projects are built first",
                "    as long as there's no cross-referencing issues between the projects.",
                "",
                "The best practice so far is:",
                "    * \"dotnet build\" without a runtime specified or running \"dotnet clean\" beforehand for fast incremental builds to be tested",
                "    * \"dotnet clean --runtime\" followed by \"dotnet publish --runtime\" for platform-specific binaries to be distributed"
            ],
            "notes": [
                {
                    "guid": "e349bc16-b13e-4db2-a1df-0762bbafa636",
                    "creation_utc": "2024-03-24T14:15:18.605163+00:00",
                    "code": "OF33",
                    "content": [
                        "Added: 2024-03-21",
                        "Just making sure.",
                        "",
                        "If I delete the bin and obj directories and run this script, I get:",
                        "    Platform-agonistic binaries:",
                        "        * yyLib/obj/Release/net8.0/yyLib.dll <= obj",
                        "        * yyLib/bin/Release/net8.0/yyLib.dll",
                        "        * yyTodoMail/bin/Release/net8.0/win-x64/yyLib.dll",
                        "        * yyTodoMail/bin/Publish/win-x64/yyLib.dll <= no \"net8.0\"",
                        "    Platform-specific binaries:",
                        "        * yyLib/obj/Release/net8.0/win-x64/yyLib.dll <= obj",
                        "        * yyLib/bin/Release/net8.0/win-x64/yyLib.dll",
                        "        * yyLib/bin/Publish/win-x64/yylLib.dll <= no \"net8.0\"",
                        "",
                        "The following directories are (nearly) empty:",
                        "    * yyTodoMail/obj/Release/net8.0 => because \"dotnet publish --runtime\" had the runtime specified",
                        "    * yyTodoMail/bin/Release/net8.0 => for the same reason",
                        "",
                        "And, unexpectedly:",
                        "    * yyTodoMail/obj/Release/net8.0/win-x64 did NOT contain yyLib.dll",
                        "It means the obj directories are not where binaries from other projects are gathered, which is reasonable.",
                        "",
                        "In this situation, if I run only \"dotnet clean --runtime\",",
                        "",
                        "yyLib would look like:",
                        "",
                        "bin/ => no files at all",
                        "    Publish/",
                        "    Release/",
                        "        net8.0/",
                        "            win-x64/",
                        "obj/ => no .dll files at all",
                        "    Release/",
                        "        net8.0/",
                        "            ref/",
                        "            refint/",
                        "            win-x64/",
                        "                ref/",
                        "                refint/",
                        "                .NETCoreApp,Version=v8.0.AssemblyAttributes.cs",
                        "                PublishOutputs.59eec15ad9.txt",
                        "                yyLib.GlobalUsings.g.cs",
                        "                yyLib.assets.cache",
                        "                yyLib.csproj.FileListAbsolute.txt",
                        "            .NETCoreApp,Version=v8.0.AssemblyAttributes.cs",
                        "            yyLib.GlobalUsings.g.cs",
                        "            yyLib.assets.cache",
                        "            yyLib.csproj.FileListAbsolute.txt",
                        "    project.assets.json",
                        "    project.nuget.cache",
                        "    yyLib.csproj.nuget.dgspec.json",
                        "    yyLib.csproj.nuget.g.props",
                        "    yyLib.csproj.nuget.g.targets",
                        "",
                        "And, yyTodoMail would look like:",
                        "",
                        "bin/ => no files at all",
                        "    Publish/",
                        "    Release/",
                        "        net8.0/",
                        "            win-x64/",
                        "obj/ => no .dll files at all",
                        "    Release/",
                        "        net8.0/",
                        "            win-x64/",
                        "                Avalonia/",
                        "                ref/",
                        "                refint/",
                        "                .NETCoreApp,Version=v8.0.AssemblyAttributes.cs",
                        "                PublishOutputs.42cbedc838.txt",
                        "                apphost.exe",
                        "                yyTodoMail.assets.cache",
                        "                yyTodoMail.csproj.FileListAbsolute.txt",
                        "            yyTodoMail.csproj.FileListAbsolute.txt",
                        "    project.assets.json",
                        "    project.nuget.cache",
                        "    yyTodoMail.csproj.nuget.dgspec.json",
                        "    yyTodoMail.csproj.nuget.g.props",
                        "    yyTodoMail.csproj.nuget.g.targets",
                        "",
                        "Based on this observation, I'm temporarily concluding:",
                        "    * \"dotnet clean\" may be a platform-agnostic operation, as ChatGPT says,",
                        "        and, for it to work with \"dotnet publish --runtime\", it must be called only with each runtime specified",
                        "    * For now, a situation that additionally requires \"dotnet clean\" without a runtime specified hasnt been observed",
                        "    * As the obj directories cache things,",
                        "        some of which are seemingly related to NuGet packages, some of which might be relatively costly to restore,",
                        "        as long as the binaries contained in the archives are correct,",
                        "        the merits of deleting the obj directories still dont seem to outweigh the potential demerits",
                        "    * \"dotnet clean --runtime\" followed by \"dotnet publish --runtime\" should be the best practice for releasing"
                    ]
                },
                {
                    "guid": "e19ad6c5-d0fb-4ece-84a0-4c7fab60316c",
                    "creation_utc": "2024-03-24T14:15:47.351268+00:00",
                    "code": "BB66",
                    "content": [
                        "Added again: 2024-03-21",
                        "While testing this script one more time, I encountered a situation where some projects didnt get rebuilt due to target-framework-related issues.",
                        "In particular, Nekote2018 was built for \"net8.0-windows\" and runAll and tk2Text were built for \"net8.0\".",
                        "I fixed this minor issue wondering how it was working before.",
                        "",
                        "Then, I got another error message saying that the variant of Magick.NET used in Nekote2018 and the one used in tk2Text didnt match.",
                        "That too was a minor issue.",
                        "I fixed it by changing the variant of Magick.NET used in tk2Text to the one used in Nekote2018.",
                        "After that, the \"Build\" command of this script successfully built all the projects, leaving me still wondering how it was working before.",
                        "",
                        "After some other work, when I ran the \"Rebuild and archive\" command of this script, in the archive of yyTodoMail, I found a 2 hour old yyLib.dll... :-|",
                        "",
                        "So, my observation described above was only partially correct.",
                        "",
                        "I then made 2 modifications to the implementation of this script:",
                        "    1. Now all projects are cleaned in a separate loop before any of them is built",
                        "    2. For each project, cleaning with the runtimes specified and cleaning without one are executed",
                        "",
                        "If I just did #1, old binaries would still appear in new archives.",
                        "But considering the complexity of the .NET build system, #2 might not be the sole cause of the issues I encountered.",
                        "If I'm anyway rebuilding all the projects with their source code archives missing, a separate loop for cleaning shouldnt hurt.",
                        "",
                        "#2 is almost certainly legit.",
                        "\"dotnet clean\", executed twice with different parameters, output different paths in the logs,",
                        "    indicating we clearly need to run the command for 1) Platform-agonistic binaries and 2) Platform-specific binaries for EACH platform.",
                        "",
                        "I also implemented the stupid final weapon code that would delete all the obj directories, but I dont seem to be needing it... yet.",
                        "If one old binary ever appears in a new archive, it'll be time for the stupidity. :P"
                    ]
                }
            ]
        }
    ]
}