{
    "guid": "c52a0b57-e85d-48ff-b5b7-8c8051acc732",
    "creation_utc": "2024-03-24T14:30:42.265358+00:00",
    "code": "XY44",
    "title": "File Name Validation",
    "notes": [
        {
            "guid": "2a0eea9e-8e9c-44c4-9d6e-752c5f0577d5",
            "creation_utc": "2024-03-24T14:32:05.043318+00:00",
            "code": "OI39",
            "content": [
                "Starting with Windows 10, version 1607, there's an option to remove the MAX_PATH character limit.",
                "With it enabled, file names can be up to 32,767 characters long.",
                "",
                "Although it's safe to assume that the limit is still in effect for most users,",
                "    we cant reject a file name that COULD work depending on the user's settings.",
                "We must, instead, try/except the file operation and display an error message if it fails.",
                "",
                "As a file name cant end with a period, \"..\" alone wont pass the rules.",
                "So, somehow injecting \"/../\" into a file path to access a parent directory is hard enough.",
                "But can we say a file name such as \"(Unicode chars nobody knows)..(the same)\" is guaranteed to be safe?",
                "",
                "Speaking of Unicode, there's one more thing to consider.",
                "",
                "ChatGPT:",
                "",
                "macOS uses a different form of Unicode normalization for filenames compared to most other systems.",
                "Specifically, macOS uses NFD (Normalization Form Decomposed) where characters are decomposed into",
                "their constituent parts. For example, \"é\" is stored as \"e\" + \"´\". Most other systems use NFC",
                "(Normalization Form Composed), where characters are stored in their composed form, so \"é\" remains \"é\".",
                "",
                "This difference can lead to issues when transferring files between macOS and other systems, or when",
                "writing cross-platform applications. A filename created on macOS might not match the expected filename",
                "on a Linux or Windows system because of this normalization difference.",
                "",
                "Python's os and pathlib modules may not automatically account for this, leading to potential mismatches",
                "when performing file operations based on user input or filenames derived from other systems.",
                "",
                "A common solution is to explicitly normalize file paths using the unicodedata module in Python when",
                "interoperability between macOS and other systems is needed. For instance, converting all paths to NFC",
                "before processing them can help ensure consistency across different platforms.",
                "",
                "----",
                "",
                "Because of this, file names via Subversion may mismatch on different platforms,",
                "    making the files virtually impossible to be version-controlled.",
                "https://stackoverflow.com/questions/55143357/svn-file-names-with-special-characters-%C3%A9%C3%A8%C3%A0",
                "This is a major problem for Japanese-speaking people as the language contains a lot of characters that get decomposed.",
                "",
                "Of course, we must worry about surrogate pairs as well,",
                "    especially in an environment where characters are represented as 16-bit values.",
                "",
                "So, one realistic approach would be:",
                "    * If possible, avoid containing user-input strings in file names",
                "    * If not, check for widely-known and well-documented things such as",
                "          invalid characters, rules violations and reserved names",
                "    * Then, always try/except the file operation",
                "",
                "Additionally:",
                "",
                "There are dozens of whitespace characters defined in Unicode.",
                "https://en.wikipedia.org/wiki/Whitespace_character",
                "",
                "We also, occasionally, need to deal with right-to-left marks properly.",
                "https://en.wikipedia.org/wiki/Right-to-left_mark",
                "",
                "We cant possibly cover all of these.",
                "So, we should do what we can and let the OS's API handle the rest."
            ]
        }
    ]
}