<!DOCTYPE html>
<html>
    <head>
        <title>yyLib</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style>@import url('https://fonts.googleapis.com/css2?family=M+PLUS+1&family=M+PLUS+1+Code&display=swap');body{margin:0;background-color:#111;color:#ddd;font-family:'M PLUS 1',sans-serif;font-size:1rem;line-height:1.5;overflow-wrap:break-word;word-wrap:break-word}a{color:#69c;text-decoration:underline}a:hover,a:active,a:focus{font-weight:bold}div.task,div.note,div.file,div.image{margin:10px;border:1px solid transparent}div.entries>div.note{border:1px solid #333}div.title{background-color:#538;padding:20px 30px;font-size:2rem;font-weight:bold}a.title{color:#ddd;text-decoration:none}a.title:hover,a.title:active,a.title:focus{text-decoration:underline}div.streaming{background-color:#131}div.streaming:hover{background-color:#353}div.done{background-color:#115}div.done:hover{background-color:#337}div.canceled{background-color:#511}div.canceled:hover{background-color:#733}div.task_contents{margin:10px 15px}span.task_contents{font-weight:bold}a.permalink{visibility:hidden}div.task:hover a.permalink{visibility:visible}div.note{background-color:#111}p.note_contents{margin:15px 20px}div.file{border:1px solid #333;background-color:#111;padding:15px 20px}div.image{border:1px solid #333;background-color:#111;padding:10px}img.image{box-sizing:border-box;vertical-align:top;max-width:100%}div.images{margin:10px;border:1px solid #333;background-color:#111;padding:10px;display:flex;justify-content:flex-start;gap:10px;flex-wrap:wrap}div.images>div.image{margin:0;border-style:none;padding:0}ul.files{margin:10px;border:1px solid #333;background-color:#111;padding-top:15px;padding-inline:40px 15px;padding-bottom:15px}div.note_ai_generated{margin:10px;border:1px solid transparent;background-color:#333}div.note_ai_generated>*{margin:15px 20px}div.note_ai_generated h1{font-size:2rem;font-weight:bold}div.note_ai_generated h2{font-size:1.8rem;font-weight:bold}div.note_ai_generated h3{font-size:1.6rem;font-weight:bold}div.note_ai_generated h4{font-size:1.4rem;font-weight:bold}div.note_ai_generated h5{font-size:1.2rem;font-weight:bold}div.note_ai_generated h6{font-size:1rem;font-weight:bold}pre{background-color:#555;padding:15px 20px;white-space:pre-wrap}code{font-family:'M PLUS 1 Code',monospace}</style>
    </head>
    <body>
        <div class="title">
            <a href="yyLib.htm" class="title">yyLib</a>
        </div>
        <div class="entries">
            <div id="df29e6b3-8273-4dbc-95e6-2a7c24f3d4f8" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">yyGptLib, yyMailLib から流し込んだコードを全体的に洗う</span>
                    <a href="#df29e6b3-8273-4dbc-95e6-2a7c24f3d4f8" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="da0ced64-3364-4c06-8251-a84eba56b797" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">このタスクリストのログが出力されるようにする</span>
                    <a href="#da0ced64-3364-4c06-8251-a84eba56b797" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="e635fabd-ec62-4258-adb8-31c1a5dee77c" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">モデルクラスの作り方についてベストプラクティスを調べる</span>
                    <a href="#e635fabd-ec62-4258-adb8-31c1a5dee77c" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ChatGPT にザッと聞いた。</p>
                            <p class="note_contents">教科書的には、「データベーステーブルをつくるなら NULL になりそうにないもの」を nullable にせず、それで初期値が必要なら required をつけ、set の代わりに init を使い、あるいは record を使い、配列を [] で初期化しておくべき。</p>
                            <p class="note_contents">しかし、それでモデルをつくってデータベースで Id が NULL にならないから required int にするとか、immutability のため init にするとかすれば、そのモデルで API からのレスポンスをデシリアライズするとか、CRUD をつくることになってやっぱり更新もしたくなるとかにおいて、じわじわとモデルが変わっていく。</p>
                            <p class="note_contents">現実的には、API の受け子になりうるものなら nullable を基本とし、よほど理由がない限り get/set でつくり、配列も nullable のまま初期値の null になるに任せるのが良い。</p>
                            <p class="note_contents">データベースの CRUD を高頻度で行うなどの理由があれば Id などが nullable でないモデルの方が処理の無駄を減らせるが、Id が nullable かどうかの差が気になるほどのデータ量なら、そもそもモデルにデータベースのデータをキャッシュしない。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="fdcbc6e8-5e69-4c9a-bd56-53b808eaff4e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">モデルクラスの nullable について再確認し、コードを全体的に見直す</span>
                    <a href="#fdcbc6e8-5e69-4c9a-bd56-53b808eaff4e" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">いずれも汎用性の高いモデルになっている。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="b9c06a6a-1291-4645-bc86-dc5df6737cf6" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ライブラリーの統合による依存関係の問題を解消</span>
                    <a href="#b9c06a6a-1291-4645-bc86-dc5df6737cf6" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">更新履歴のため、GitHub 側のレポジトリーを残し、ローカルのものを消す。それでもビルドに失敗してくれる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">yyGptLib と yyMailLib を使うのは yyTodoMail だけだったので、それがビルドされるようにして最新版のアーカイブをつくった。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="d0cf8ea3-e74e-4d44-b740-30ce52f2e2c9" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">SQLite へのログの出力を可能にする</span>
                    <a href="#d0cf8ea3-e74e-4d44-b740-30ce52f2e2c9" class="permalink">&infin;</a>
                </div>
            </div>
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">うろ覚えだが、NuGet 関連の右往左往についてメモを残す。</p>
                    <p class="note_contents">build_changed_projects.py にて NuGet の更新を行ったところ、yyLib の System.Data.SqlClient 4.8.1 および System.Drawing.Common 4.7.0 が古いと言われた。</p>
                    <p class="note_contents">Visual Studio の GUI でこれらのみ .csproj に入れたところ解決したが、その後、EntityFramework 6.4.4 も古くて非推奨になっていると知った。ソリューションエクスプローラーの「依存関係」のところにより、これが上記の二つのパッケージの古いバージョンを参照していると知った。</p>
                    <p class="note_contents">EntityFramework も「推移的」として入っていて、その依存関係は、「System.Data.SQLite 1.0.119 → System.Data.SQLite.EF6 1.0.119 → EntityFramework」だった。SQLite のもの二つは最新だったが、すでにコードが安定しているのか、「非推奨」なだけで脆弱性は言われていない EntityFramework の最新版への参照に切り替えるためだけにバージョンを上げることはないと判断されたようで、参照が古かった。</p>
                    <p class="note_contents">この場合の解決策は、いつ最新の EntityFramework への参照に更新してくれるか分からない SQLite を待つことなく最新の EntityFramework を参照し、後方互換性で SQLite が動くと期すること。</p>
                    <p class="note_contents">そのため、yyLib.csproj に EntityFramework を入れた。</p>
                    <p class="note_contents">それでも yyChat などが「推移的」の EntityFramework に脆弱性があると言い続けたが、これはプロジェクトのリフレッシュにより直った。build_changed_projects.py にてクリーンアップを行うのが早かった。</p>
                    <p class="note_contents">リビルドでは直らず、yyChat などにも最新の EntityFramework への参照を入れたが、クリーンアップでは直ったので、EntityFramework への参照を消した。</p>
                    <p class="note_contents">今後も、「推移的」なパッケージの脆弱性について言われれば、それを参照する一番上の層のパッケージの最新版を参照してみる。それでダメなら、その参照を消して（ここが重要）、一つ下の層のパッケージの最新版を参照する。そういうことを、脆弱性が言われなくなるまで繰り返す。</p>
                    <p class="note_contents">脆弱性までは言われなくても「非推奨」のパッケージをたまたま目にすれば更新するが、わざわざ探すことは意図的に控える。バグがあれば「脆弱性」が言われる。そうでないなら、最新版より機能が少ない程度のことで、それで困っていない参照元が慌てて最新版を参照する必要性は乏しい。</p>
                    <!-- Task: dbccd229-b619-43d4-b437-ff4f3442d808 -->
                </div>
            </div>
            <div id="9b0abac7-9257-4be5-86d7-cea455fb2b2d" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://learn.microsoft.com/en-us/dotnet/core/compatibility/9.0" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/core/compatibility/9.0</a> をチェック</span>
                    <a href="#9b0abac7-9257-4be5-86d7-cea455fb2b2d" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Breaking changes in .NET 9 | Microsoft Learn</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ザッと目を通した。yyLib に影響のある変更はなさそう。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="9ceaf264-6bc3-42ac-9994-ae69e2a693d2" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">yyConvertor と yyFormatter が紛らわしいのを改善</span>
                    <a href="#9ceaf264-6bc3-42ac-9994-ae69e2a693d2" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">前者に統合し、メソッド名を整え、全体をチェックした。拡張メソッドを廃止。インテリセンスがうるさくなる。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="bc74acdf-dff5-4c26-834c-dfb65c304a30" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">NuGet のパッケージの参照方法を改める</span>
                    <a href="#bc74acdf-dff5-4c26-834c-dfb65c304a30" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Hoge ライブラリーを Moge アプリが参照するにおいて、Moge 側で「Hoge の DLLを引っ張るな」の指定ができた。それで落ちるのは Hoge が必要な DLL のメソッドが実際に Hoge 経由で Moge により呼ばれたときで、デバッグをちゃんとやっておけば問題ない。</p>
                            <p class="note_contents">一方、Hoge 側で「DLL をアプリ側に送り出すな」的な指定もできるようで、その方が良いかもしれない。「たくさんの DLL を引きずらない」という構成をゴールにするにおいては、蛇口を全て閉めるより元栓を閉める方が自然だ。</p>
                            <p class="note_contents">その上で、それがないとデバッグ時に落ちるものをアプリ側でも NuGet で参照するとか、同時にパッケージをアップデートすることでバージョンを一致させて依存関係の問題が生じないようにするとかが正攻法と思われる。</p>
                            <p class="note_contents">バージョンの一致については、すぐにバイナリーまでアーカイブするため配置において困らないし、Git のログを見ることで同時期にアーカイブしたライブラリーとアプリが分かるため、その組み合わせならビルドが成功するとの保証もある。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">いろいろと試した結論として、ライブラリー側で「送り出すな」の指定をするのをやめておき、アプリ側で必要な場合のみ「送り出されたものを受け入れない」の指定を行う。後者の場合、SQLite でのロギングなど、特定の機能にライブラリー側で参照しているパッケージが必要なら、アプリ側で改めてそれらを参照する。</p>
                            <p class="note_contents">元栓を閉める方がアプリ側での指定を減らせてスマートに思えるが、「不要な DLL がアプリ側に流れ込む」というのと、「必要な DLL がアプリ側にないことで、ロギングなど、特定の場面においてのみ落ちる」というのとでは、ファイルサイズが大きいかシステムが落ちるかということなので、後者の方がダメージが圧倒的に大きい。そして、特定の状況でのみ落ちるというのは、デバッグをしきれないこともある。</p>
                            <p class="note_contents">現時点で yyLib は以下を参照している。</p>
                            <p class="note_contents">* MailKit 4.9.0<br />
                                * Microsoft.Extensions.Configuration 9.0.0<br />
                                * Microsoft.Extensions.Configuration.Json 9.0.0<br />
                                * MimeKit 4.9.0<br />
                                * System.Data.SQLite 1.0.119</p>
                            <p class="note_contents">メールを使わず、appsettings.json などを読まず、SQLite でのロギングを行わないアプリなら、これらは全て不要。デフォルトの JSON でのロギングにはパッケージが不要。</p>
                            <p class="note_contents">よって、yyLib を使うが、JSON でのロギングや yyLib の汎用的なクラス以外は不要というアプリなら、今後もアプリ側で「受け入れない」の指定を行うのが合理的。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">元々は、System.Data.SqlClient 4.8.1 と System.Drawing.Common 4.7.0 が古いと言われ、GUI で調べたところ EntityFramework も古いと出たので、これらの最新版を明示的に参照した。そのことについては、以前のメモに書いた。</p>
                            <p class="note_contents">また、yyLib に画像処理の機能を追加しようとしたようで、SixLabors.ImageSharp 3.1.6 を参照していた。</p>
                            <p class="note_contents">今回の更新で、EntityFramework と ImageSharp への参照を消した。そうしたことで、GUI で開けばまた EntityFramework が古いと言われるのかもしれないが、SQLite のパッケージの更新により解決されるべきことだし、推移的な依存関係において自分が関与しないライブラリーが古いというのは今後も起こりうることなので、積極的に調べたり、古いものの最新版を個別に参照したりをやめておく。リスクの小ささに比して手間が大きく、生産的でないため。自分が参照しているパッケージをマメに更新していれば、いずれは勝手に直ること。</p>
                            <p class="note_contents">ImageSharp は、会社の年商が100万ドルを超えるとライセンス料がかかる認識だ。うちは、会社としてはそれを超える。yyLib などはあくまで個人として開発しているものだが、それをベースに会社のシステムも書けば、あるいは、それをベースにオープンソースのウェブシステムなどを書いてそれを会社で「も」使えば、ライセンス違反だと言われる可能性を否定できない。</p>
                            <p class="note_contents"><a href="https://old.dotnetfoundation.org/blog/2022/10/20/imagesharpupdate" target="_blank" class="url">https://old.dotnetfoundation.org/blog/2022/10/20/imagesharpupdate</a><br />
                                <a href="https://github.com/SixLabors/ImageSharp/blob/main/LICENSE" target="_blank" class="url">https://github.com/SixLabors/ImageSharp/blob/main/LICENSE</a></p>
                            <p class="note_contents">画像処理の機能の追加をやめたのか、ImageSharp への参照をなくしてもコンパイルに失敗しなかった。</p>
                            <p class="note_contents">画像処理においては、Magick.NET も使える。こちらはライセンスに問題がない。DLL ファイルが大きいとか、C++ のバイナリーを .NET から呼ぶ構成になっているためオーバーヘッドが気になるとか、複数の種類があってややこしいとかの認識があるが（間違っている可能性もあるが）、今まで特に困ったことはないので、今後は改めて Magick.NET を優先的に使う。</p>
                            <p class="note_contents">yyLib では今後 ImageSharp を参照しない。yyLib を参照するアプリの側では、Magick.NET ではどうしてもできないことがある場合のみ、ImageSharp の使用を検討する。その場合には、あくまで個人によるプロジェクトであり、なおかつオープンソースであると明言する。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">パッケージの参照については、次のページを参考にした。</p>
                            <p class="note_contents"><a href="https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files" target="_blank" class="url">https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="8b0d00e8-9537-41a7-9486-eb2ea005c151" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">AnalysisMode を All にしてのコード分析を行う（繰り返す）</span>
                    <a href="#8b0d00e8-9537-41a7-9486-eb2ea005c151" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">しょーもないことが多い。一周見て、どうでもよいものを放置し、よく分からないことを学習する。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">「SQL にユーザーからの入力が入っていないか見ろ」で終わるものなど、有用なものも一部にある。いつも出るとうるさいし、コンパイルが遅くなるので生産性に響くが、たまにチェックするべき価値はあるため、繰り返す。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="5815d111-ac60-489a-9a4f-8c14c342503a" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">GPT、メール、ロギングの設定をファイルからロードできるようにする</span>
                    <a href="#5815d111-ac60-489a-9a4f-8c14c342503a" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="20378873-cbd1-41fa-8848-006e1b0aaf22" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">yyGptUtility のうち画像をダウンロードするメソッドを single responsibility にする</span>
                    <a href="#20378873-cbd1-41fa-8848-006e1b0aaf22" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Select 内での非同期処理がどうしても気になる。実装としては正しいはずだが、タイムアウトもあってどういうタイミングで例外が飛んでくるか分からない処理を非同期で同時に複数やっては、エラーがあったときの対応力がかなり制限される。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">yyWeb または yyHttp をつくり、非同期でファイルをダウンロードするメソッドを用意し、それと組み合わせてのダウンロードの例を GptTester に入れるか。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="8f7a1dce-d219-4b21-aa97-451ad8bc51f7" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">yyGpt* クラスで o1, audio, tools に対応 → tools を見送った</span>
                    <a href="#8f7a1dce-d219-4b21-aa97-451ad8bc51f7" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">localGpt の開発に着手しては、yyLib 側でなんとなく o1 も試したところ、system が developer になっていたなど、些細な違いにより動かなかった。直したところ、簡単に動いた。chunks でも動いた。それからドキュメントを精査したところ、ほかにも変わっているところがあった。先ほどそれらをチェックし、タスク化した。全て実装すれば、o1, audio, tools への対応が完了する。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">tools のみ今すぐに必要と感じられず手を抜いた。API のドキュメントとの整合性をチェックしたが、テストコードを書いていない。必要になってから問題が見つかれば直す。それ以外は大丈夫。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="72bde67f-ae00-4d78-b656-b2fae98e2e55" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">送った全てのメールを簡単に保存できるようにする</span>
                    <a href="#72bde67f-ae00-4d78-b656-b2fae98e2e55" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">やめておく。モデルをつくったが、スマートでない。MIME でやればよい。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="362aa946-e1bd-4f43-8e86-fa04b3cbecd2" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">メールのモデルの添付ファイルのパスに関するところを整理</span>
                    <a href="#362aa946-e1bd-4f43-8e86-fa04b3cbecd2" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">絶対パスで送り、その後どこかに移動したなら相対パスを扱う仕様だが、それはモデルクラスの仕事でない。そちらには、相対パスだけでよく、メタデータを設定するのはモデルクラスの仕事でない。</p>
                            <p class="note_contents">同様に、モデルクラスが入れ物の役割を超えることをしているところを探す。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">キーで添付ファイルやアップロードされたファイルを一意に識別できる、旧 Managed Files 的な仕組みを先につくるべきか。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">モデル自体をやめておく。全体的に見直す。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="a49cde34-b0ae-41ef-8452-4bf755ebf336" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">AI との全てのやりとりを簡単に保存できるようにする</span>
                    <a href="#a49cde34-b0ae-41ef-8452-4bf755ebf336" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">これをやりたくて SDK をつくったが、API の更新が頻繁で、もう追いきれない。そもそも、今までの労力が無駄だった。API との関わり方について、まだ間に合ううちに損を切って、考えを大きく変える。詳細をあとでメモに書いておく。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="1ca57354-c741-4ed8-b166-81190e2b655a" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">XML を JSON くらい手軽に読み書きする機能を実装</span>
                    <a href="#1ca57354-c741-4ed8-b166-81190e2b655a" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ユーザーが読み取り専用で表示するファイルなら HTML を XML 的にちゃんとつくるのが良い。JSON で保存して、その近くに HTML ファイルも出力するなどは二度手間だし、JSON をロードしてきれいに表示するツールの開発もめんどくさい。</p>
                            <p class="note_contents">XML の読み書きの機能と、そこにデータ構造の認識を与えてエントリー単位で読み書きできる機能の二つに分離？</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">diff に向いてブラウザーですぐ表示できるものとしては、XML にアクセスする標準の機能で XHTML ページをつくるのがよい。ORM 的なことがちょっと必要かもしれないが、基本的には既存のライブラリーの組み合わせで実現できそう。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">OpenAI の API に公式の SDK が出ていなかった頃に yyGpt* を自作した。</p>
                    <p class="note_contents">しばらく中国出張などで忙しく、開発に戻った頃には公式の SDK が出ていたが、モデルクラスを仕様書から自動生成したのか、どこに何があるか感覚的に分かりにくい重厚長大なもので、使いにくかったので、もうしばらく yyGpt* に頼ることにした。</p>
                    <p class="note_contents">少し前に yyGpt* を更新し、o1, Streaming の Usage, Vision, Audio などに対応して喜んでいたら、Web search などが出てきた。公式の SDK は未対応だったので、しばらく遅れるならと、yyGpt* への実装にゆるく着手した。</p>
                    <p class="note_contents">それが終わるより先に今度は Transcribe が出てきて、公式の SDK も更新が再開された。Web search などに対応したのか確認できていないが、Microsoft が OpenAI に出資し、Azure でも OpenAI を走らせているのだから、公式の SDK が放置される可能性は今後も低い。</p>
                    <p class="note_contents">それでも「どこに何があるか分かりにくい」だけで公式の SDK を否定し、yyGpt* にしがみつく合理性はない。追いかけるのがしんどくなってきた。</p>
                    <p class="note_contents">Gemini にも対応が必要だし、Web search をやりたいなら Perplexity AI の API の方が安くて高性能だそうだし、安さでは DeepSeek を捨てがたく、Google や Bing の検索エンジンも使いたく、SDK を自分でつくってメンテする暇がない。</p>
                    <p class="note_contents">書いてしまったものだし、よく動き、気に入っているので、yyGpt* を捨てがたいが、戦略的判断として捨てる。</p>
                    <!-- Task: 56c7bce4-5b2f-484e-bf9a-ee5bd1cd6ce6 -->
                </div>
            </div>
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">Gemini については、公式には次の二つがあるようだ。</p>
                    <p class="note_contents"><a href="https://github.com/googleapis/google-cloud-dotnet" target="_blank" class="url">https://github.com/googleapis/google-cloud-dotnet</a><br />
                        <a href="https://github.com/googleapis/google-api-dotnet-client" target="_blank" class="url">https://github.com/googleapis/google-api-dotnet-client</a></p>
                    <p class="note_contents">そのうち後者については、This client library is supported but in maintenance mode only と書かれている。</p>
                    <p class="note_contents">どちらのページでも Gemini で検索すると何も出てこない。</p>
                    <p class="note_contents">次のページを開いて C# のコード例を表示すると using Google.Cloud.AIPlatform.V1 とある。これにより OpenAI 的なことをできるようだ。</p>
                    <p class="note_contents"><a href="https://cloud.google.com/vertex-ai/generative-ai/docs/start/quickstarts/quickstart-multimodal" target="_blank" class="url">https://cloud.google.com/vertex-ai/generative-ai/docs/start/quickstarts/quickstart-multimodal</a></p>
                    <p class="note_contents">OpenAI でも、API 側では ChatGPT という名前は出てこない。Google もそういうことなのだろう。</p>
                    <!-- Task: 56c7bce4-5b2f-484e-bf9a-ee5bd1cd6ce6 -->
                </div>
            </div>
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">学ぶのがめんどくさくて自分で合理的なサブセットをつくりたがるが、OpenAI の SDK をつくってみたことで、学ぶ方がだいぶ楽だと実感した。今も未練タラタラなのが情けないが、自作 SDK を消し、長いものに巻かれるプログラミングに移行する。</p>
                    <!-- Task: 56c7bce4-5b2f-484e-bf9a-ee5bd1cd6ce6 -->
                </div>
            </div>
            <div id="219f7d28-88f4-4ed3-a663-cb5a71a766f6" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">記念のアーカイブをつくってから、保守しないコードを大胆に消す</span>
                    <a href="#219f7d28-88f4-4ed3-a663-cb5a71a766f6" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">やめておく。理由をあとで書く。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">yyLib の開発を打ち切ることを決めた。</p>
                    <p class="note_contents">設計にも実装にも大きな問題はなく、普通に使える。派生開発によりさまざまな機能を追加していくベースとして、まずまずのものだ。</p>
                    <p class="note_contents">しかし、心境に大きな変化があり、yyLib ではそれを乗り越えることができそうにない。丸一日、いろいろといじりながら考えたが、どうしても無理だ。</p>
                    <p class="note_contents">その変化とは、「自分が試行錯誤や自作をするより、AI が推奨してくる外部ライブラリーやコードをまずは取り入れて洗練した方が有意に開発効率が高い」という2025年の現実に対する受容だ。</p>
                    <p class="note_contents">yyLib の大掃除において Cline 系の Roo Code に既存のコメントを書き直してもらったところ、意図をそれなりに書いたこともあってか、かゆいところに手の届く英文がサクサクと出てきた。</p>
                    <p class="note_contents">コードも、「ほかに用意しておいた方がよいメソッドはない？」などと聞けば、とても賢かった。</p>
                    <p class="note_contents">自分は英語の非ネイティブなので、どうしても英文には自信がない。たぶん余裕で伝わる英文だが、ネイティブが自然と感じる最善のネーミングなどにはなっていないだろう。</p>
                    <p class="note_contents">AI にやってもらうと、とにかく英文が良い。英語力が高く、言い回しに納得する。</p>
                    <p class="note_contents">そういう AI に自分のコードを少しずつ見てもらい、まだ自分の英語のままになっているところを探し、今度はそこも見直すようにプロンプトを書くといった作業をしていて、ふと、「AI に支援してもらっての yyLib の移植」をやった方が効率的だと気づいてしまった。</p>
                    <!-- Task: b94b9fde-ae93-48b1-9440-879bda75f5fa -->
                </div>
            </div>
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">今回のつくり直しのコストは大きくない。まとまった時間を取られなかったこともあって何ヶ月もかけたライブラリーだが、そのつくり直しにはおそらく1週間もかからない。骨格は悪くないからだ。</p>
                    <p class="note_contents">ただ、構成をちょっとだけ複雑にしようと思っているので、そのあたりの設計には慎重でありたい。</p>
                    <p class="note_contents">たとえば、メインのライブラリーに MailKit と MimeKit が必ず入っているのは、構成として良くない。それだと、メールを全く使わない小さなツールの開発にライブラリーを使うのであっても MailKit と MimeKit の関連 DLL ファイルが引き継がれる。</p>
                    <p class="note_contents">画像処理もそうで、Magick.NET を入れるとすぐに数十 MB になる。これも、Q8 と Q16 があって、ちゃんと使い分けられるようになっているので、プロジェクト参照と名前空間のみ単純に置換すればどちらでも動くように二つのライブラリーをメインのものとは別につくるのが合理的だ。</p>
                    <p class="note_contents">ASP.NET Core がメインなので、メインのライブラリーにロギング機能を組み込むとするなら、Microsoft によるものが妥当だろう。Serilog も良さそうだが、どうせ Microsoft のものは ASP.NET Core のプロジェクトなら必ず入る。</p>
                    <p class="note_contents">そういったことを考えても、AI の支援があれば、おそらく1週間くらいだ。</p>
                    <!-- Task: b94b9fde-ae93-48b1-9440-879bda75f5fa -->
                </div>
            </div>
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">判断の後押しとなったものの一つは .editorconfig だ。</p>
                    <p class="note_contents">以前、VSC ではうまくいかず、諦めていた。</p>
                    <p class="note_contents">今回、Editor Config for VS Code を試したところ、やりたいことがうまくいった。</p>
                    <p class="note_contents">自分は、自分にとって見た目の良いコードを書きたがる癖がある。</p>
                    <p class="note_contents">たとえば、if (... なら多くのエディターで最初からスペースが入るのに、method(... なら入らないのは、おかしいと感じる。</p>
                    <p class="note_contents">配列は、type[] と type [] の両方に長短がある。「型」を空白で途切れない一つのまとまりとするなら前者だが、それで this [... とインデックスによるアクセスを書くのは、method (... と不整合になる。では、method(... にして、this[... にするかといえば、if(... がやりすぎになる。</p>
                    <p class="note_contents">if (... にスペースが入るのは、else{... とのバランスもあるのだろう。自分は { を次の行に置く派だが、C# でも同じ行に置く人は多い。</p>
                    <p class="note_contents">そういったところでああだこうだ生産性のないことを考えたくないからこそ、if (... にも else {... にも入るなら method (... でいいじゃないか、type [] でいいじゃないか、というように一概に決めている。</p>
                    <p class="note_contents">蛇足だが、メソッドをつなげるとき、</p>
                    <p class="note_contents">Hoge()<br />
                        .Moge()<br />
                        .Poge();</p>
                    <p class="note_contents">とする人が多いが、</p>
                    <p class="note_contents">Hoge<br />
                        + Moge<br />
                        + Poge;</p>
                    <p class="note_contents">としないのだから、自分は</p>
                    <p class="note_contents">Hoge ().<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;Moge ().<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;Poge ();</p>
                    <p class="note_contents">としている。</p>
                    <p class="note_contents">その方が、</p>
                    <p class="note_contents">Hoge +<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;Moge +<br />
                        &nbsp;&nbsp;&nbsp;&nbsp;Poge;</p>
                    <p class="note_contents">との親和性が高い。</p>
                    <p class="note_contents">主従関係（？）が明確なら十分だ。</p>
                    <p class="note_contents">長い間やっているので、人畜無害な範囲内のこだわりとして、コードのフォーマットには少しだけ好みがある。</p>
                    <p class="note_contents">AI にコードを生成してもらうと、VSC でのフォーマット機能では好みの形にならず、かといってフォーマットのためだけに激重の Visual Studio を2009年の非力なデスクトップで立ち上げるのはコストが大きく、AI にコードを生成してもらうことをためらう（つまらない）理由の一つになっていた。</p>
                    <p class="note_contents">.editorconfig によりその問題が大幅に緩和された。</p>
                    <p class="note_contents">.editorconfig で設定できないのは、メソッドをつなげるときを除いては、IList &lt;... にしたいとか、コンストラクターの継承を ) : base (... としたくない（: の直前に空白を入れてほしくない）とか、その程度だ。</p>
                    <p class="note_contents">このくらいなら手作業で直しても負担でない。</p>
                    <!-- Task: b94b9fde-ae93-48b1-9440-879bda75f5fa -->
                </div>
            </div>
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">判断の後押しとなったことは複数ある。そのうちさらに一つを挙げると、コメントを英語と日本語で書きたくなったことだ。</p>
                    <p class="note_contents">英語をそこそこ書けるので英語で書いてきたが、日本での開発案件も今後ちょくちょく出てくるかもしれない。</p>
                    <p class="note_contents">AI にコメントを書いてもらうなら、コンテキストを英語で書き、ちゃんとした英語にしてもらい、その日本語訳を添えてもらうのが手間でない。</p>
                    <p class="note_contents">コピペで使えるプロンプトをいくつか用意しておくことで、場所ごとに書き方を決めておける。</p>
                    <!-- Task: b94b9fde-ae93-48b1-9440-879bda75f5fa -->
                </div>
            </div>
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">こういったことを勘案し、判断をくだした。</p>
                    <p class="note_contents">現行の設計と実装も悪くないので、できるだけ引き継ぎ、外部ライブラリーを多用し、テストコードをコンソールでなくウェブでつくり、コメントを英語と日本語の両方で生成するだけだ。</p>
                    <!-- Task: b94b9fde-ae93-48b1-9440-879bda75f5fa -->
                </div>
            </div>
        </div>
    </body>
</html>
