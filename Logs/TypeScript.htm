<!DOCTYPE html>
<html>
    <head>
        <title>TypeScript</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style>@import url('https://fonts.googleapis.com/css2?family=M+PLUS+1&family=M+PLUS+1+Code&display=swap');body{margin:0;background-color:#111;color:#ddd;font-family:'M PLUS 1',sans-serif;font-size:1rem;line-height:1.5;overflow-wrap:break-word;word-wrap:break-word}a{color:#69c;text-decoration:underline}a:hover,a:active,a:focus{font-weight:bold}div.task,div.note,div.file,div.image{margin:10px;border:1px solid transparent}div.entries>div.note{border:1px solid #333}div.title{background-color:#538;padding:20px 30px;font-size:2rem;font-weight:bold}a.title{color:#ddd;text-decoration:none}a.title:hover,a.title:active,a.title:focus{text-decoration:underline}div.streaming{background-color:#131}div.streaming:hover{background-color:#353}div.done{background-color:#115}div.done:hover{background-color:#337}div.canceled{background-color:#511}div.canceled:hover{background-color:#733}div.task_contents{margin:10px 15px}span.task_contents{font-weight:bold}a.permalink{visibility:hidden}div.task:hover a.permalink{visibility:visible}div.note{background-color:#111}p.note_contents{margin:15px 20px}div.file{border:1px solid #333;background-color:#111;padding:15px 20px}div.image{border:1px solid #333;background-color:#111;padding:10px}img.image{box-sizing:border-box;vertical-align:top;max-width:100%}div.images{margin:10px;border:1px solid #333;background-color:#111;padding:10px;display:flex;justify-content:flex-start;gap:10px;flex-wrap:wrap}div.images>div.image{margin:0;border-style:none;padding:0}ul.files{margin:10px;border:1px solid #333;background-color:#111;padding-top:15px;padding-inline:40px 15px;padding-bottom:15px}div.note_ai_generated{margin:10px;border:1px solid transparent;background-color:#333}div.note_ai_generated>*{margin:15px 20px}div.note_ai_generated h1{font-size:2rem;font-weight:bold}div.note_ai_generated h2{font-size:1.8rem;font-weight:bold}div.note_ai_generated h3{font-size:1.6rem;font-weight:bold}div.note_ai_generated h4{font-size:1.4rem;font-weight:bold}div.note_ai_generated h5{font-size:1.2rem;font-weight:bold}div.note_ai_generated h6{font-size:1rem;font-weight:bold}pre{background-color:#555;padding:15px 20px;white-space:pre-wrap}code{font-family:'M PLUS 1 Code',monospace}</style>
    </head>
    <body>
        <div class="title">
            <a href="TypeScript.htm" class="title">TypeScript</a>
        </div>
        <div class="entries">
            <div id="168787c5-4251-43c5-acec-5c7d6405aaeb" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">このタスクリストのログが出力されるようにする</span>
                    <a href="#168787c5-4251-43c5-acec-5c7d6405aaeb" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="87551cce-22fb-47dd-bc9c-66a7b4feaa25" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">Python ベースのページにも使えるか調べる</span>
                    <a href="#87551cce-22fb-47dd-bc9c-66a7b4feaa25" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <div class="note_ai_generated">
<p>Yes, you can use TypeScript in a Python-based web system, typically by integrating TypeScript with the front-end part of the application, while the Python part handles the back-end or server-side logic. Here's a general approach on how to do this:</p>
<h3>1. Separate Front-end and Back-end</h3>
<p>A common architecture involves separating the front-end (client-side) and back-end (server-side) parts of your application. Python frameworks like Django or Flask are used to manage the server-side, whereas TypeScript can be used on the client-side to enhance the interactivity and structure of your web pages.</p>
<h3>2. Set Up TypeScript for Front-end</h3>
<p>To use TypeScript in the front-end:</p>
<ul>
<li><strong>Initialize a TypeScript project</strong>: Create a new directory for your TypeScript files within your project or use a separate front-end project.</li>
<li><strong>Install TypeScript</strong>: You can install TypeScript globally with npm (Node Package Manager) by running <code>npm install -g typescript</code>.</li>
<li><strong>Compile TypeScript to JavaScript</strong>: TypeScript compiles down to JavaScript. Set up the TypeScript compiler to watch and compile <code>.ts</code> files to <code>.js</code> files. You can configure this process with a <code>tsconfig.json</code> file in your project directory.</li>
</ul>
<h3>3. Serve Static Files</h3>
<p>In your Python web framework:</p>
<ul>
<li><strong>Configure static files</strong>: Ensure your Python framework is configured to serve static files. For example, in Django, you would configure <code>STATIC_URL</code> and <code>STATIC_ROOT</code> in your settings and use the <code>collectstatic</code> command to handle static files.</li>
<li><strong>Include the compiled JavaScript</strong>: Use the compiled JavaScript files in your HTML templates, linking them as you would with any other JavaScript file.</li>
</ul>
<h3>4. Integrate with Web Framework</h3>
<ul>
<li><strong>APIs for interaction</strong>: Build APIs using your Python framework (e.g., using Django Rest Framework or Flask's jsonify) that your TypeScript code can call to send or retrieve data. This is how your client-side TypeScript interacts with your Python back-end.</li>
<li><strong>Fetch/Axios for HTTP requests</strong>: Use libraries like Fetch API or Axios in your TypeScript code to make HTTP requests to these APIs.</li>
</ul>
<h3>5. Development and Production Setup</h3>
<ul>
<li><strong>Development environment</strong>: During development, you might run your Python server and TypeScript compiler separately. You can use tools like Webpack or Parcel to bundle your TypeScript and other assets.</li>
<li><strong>Production environment</strong>: For production, configure your build process to include TypeScript compilation and bundling of assets. Automation tools like Jenkins or GitHub Actions can help manage these tasks.</li>
</ul>
<p>By following these steps, you can effectively integrate TypeScript into a Python-based web system, leveraging TypeScript's strong typing and advanced features on the client side, while maintaining Python's powerful capabilities on the server side.</p>
                            </div>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <div class="note_ai_generated">
<p>We use npm (Node Package Manager) to install TypeScript primarily because npm is the package manager for JavaScript and TypeScript is a superset of JavaScript. While TypeScript adds static types to JavaScript, it is still fundamentally a JavaScript tool, thus it is distributed and managed through npm, which is the standard for managing JavaScript libraries and tools.</p>
<p>Here are the main reasons why npm is used for installing TypeScript:</p>
<ol>
<li><p><strong>Package Management</strong>: npm provides a convenient and efficient way to manage dependencies for JavaScript-based projects. Since TypeScript is often used in projects that also use other JavaScript libraries and tools, using npm allows developers to manage all these dependencies in a consistent manner.</p>
</li>
<li><p><strong>Ecosystem Compatibility</strong>: TypeScript is designed to integrate seamlessly with the vast ecosystem of npm packages. This integration helps developers use TypeScript alongside numerous libraries, frameworks, and tools available in the npm registry.</p>
</li>
<li><p><strong>Tooling and Scripts</strong>: npm allows developers to define scripts in the <code>package.json</code> file, which can automate common tasks like compiling TypeScript code, running tests, and more. This simplifies development workflows, especially in projects where TypeScript and other npm tools need to be run sequentially or in coordination.</p>
</li>
</ol>
<h3>Compilation Process</h3>
<p>Regarding your question about whether TypeScript is compiled by Node.js:</p>
<ul>
<li><p><strong>TypeScript Compiler</strong>: TypeScript code is compiled by the TypeScript compiler (<code>tsc</code>), which is a Node.js application. The TypeScript compiler itself is written in TypeScript and needs to be executed in a Node.js environment.</p>
</li>
<li><p><strong>Role of Node.js</strong>: While Node.js does not directly compile TypeScript, it provides the runtime environment necessary for the TypeScript compiler to run. This means that when you install TypeScript using npm and run the TypeScript compiler, you are using Node.js to execute the compiler.</p>
</li>
<li><p><strong>Output</strong>: The output of the TypeScript compiler is plain JavaScript code, which can then be run in any JavaScript environment, including browsers and Node.js servers.</p>
</li>
</ul>
<p>In summary, npm is used to install TypeScript because it efficiently manages JavaScript-based tools and libraries, and while Node.js doesn't compile TypeScript directly, it is essential for running the TypeScript compiler.</p>
                            </div>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <div class="note_ai_generated">
<p>Yes, you've correctly identified how modern JavaScript development workflows have evolved, and they indeed resemble more traditional software development practices seen in languages like C#. Decades ago, JavaScript was primarily used for small scripts directly embedded in HTML. However, as web applications have grown in complexity and functionality, the development practices have also matured significantly.</p>
<p>Here’s how modern JavaScript development typically works and parallels with systems like NuGet in the C# ecosystem:</p>
<h3>1. <strong>Package Management</strong></h3>
<p>Just as you use NuGet to manage libraries and dependencies in C#, npm (Node Package Manager) is used in the JavaScript world to handle similar tasks. npm allows developers to easily install, update, and manage packages that their projects depend on.</p>
<h3>2. <strong>Development Environment</strong></h3>
<ul>
<li><strong>Node.js</strong>: Introduced as a runtime environment for executing JavaScript on the server side, Node.js is also pivotal in modern JavaScript development even for client-side code. It allows developers to use JavaScript (or languages that compile to JavaScript, like TypeScript) for scripting on both the server and client sides.</li>
<li><strong>Build Tools</strong>: Modern JavaScript often relies on build tools and bundlers like Webpack, Rollup, or Parcel. These tools help in bundling various assets (JavaScript, CSS, images, etc.) into a format suitable for efficient delivery to web browsers. They also allow for the use of modern JavaScript features that are not yet supported in all browsers, and integrate with transpilers like Babel.</li>
</ul>
<h3>3. <strong>Local Development</strong></h3>
<p>Unlike the old days where you might write JavaScript directly in the HTML and see immediate results in the browser, modern workflows often involve writing code in separate files/modules and using a build system to compile these into a few bundled files optimized for the web. This setup supports:</p>
<ul>
<li><strong>Modular development</strong>: JavaScript modules help in organizing code into reusable and manageable parts.</li>
<li><strong>Hot Reloading/Module Replacement</strong>: Development servers can instantly reload or replace modules in the browser as you edit and save files, providing quick feedback on changes.</li>
</ul>
<h3>4. <strong>Use of Frameworks and Libraries</strong></h3>
<p>Frameworks like React, Angular, and Vue.js and libraries like jQuery or Lodash are commonly managed through npm and integrated into projects using module bundlers. This allows developers to write more structured, maintainable, and scalable applications.</p>
<h3>5. <strong>Deployment and Production</strong></h3>
<p>In production, additional steps such as minification (compressing the code), uglification (renaming variables to shorter names), and optimization strategies to speed up load times are typically implemented using the aforementioned tools.</p>
<h3>6. <strong>Cross-Platform Compatibility</strong></h3>
<p>The use of tools like Babel ensures that even if you use the latest JavaScript features, the compiled output will be compatible with older browsers. This transpilation step is crucial for maintaining cross-browser compatibility.</p>
<h3>Conclusion</h3>
<p>The shift towards these more sophisticated development practices has made JavaScript development more robust and scalable, much like software development in languages such as C#. It allows JavaScript developers to manage large codebases more effectively and to use modern software engineering practices, including version control, continuous integration, and automated testing, much like in the C# development environment with NuGet and .NET tools.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="74188425-8cba-416f-87d8-b4b540a56a6a" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">基本的なところを学べるチュートリアルを探す</span>
                    <a href="#74188425-8cba-416f-87d8-b4b540a56a6a" class="permalink">&infin;</a>
                </div>
            </div>
        </div>
    </body>
</html>
