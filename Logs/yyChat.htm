<!DOCTYPE html>
<html>
    <head>
        <title>yyChat</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style>@import url('https://fonts.googleapis.com/css2?family=M+PLUS+1&family=M+PLUS+1+Code&display=swap');body{margin:0;background-color:#111;color:#ddd;font-family:'M PLUS 1',sans-serif;font-size:1rem;line-height:1.5;overflow-wrap:break-word;word-wrap:break-word}a{color:#69c;text-decoration:underline}a:hover,a:active,a:focus{font-weight:bold}div.task,div.note,div.file,div.image{margin:10px;border:1px solid transparent}div.entries>div.note{border:1px solid #333}div.title{background-color:#538;padding:20px 30px;font-size:2rem;font-weight:bold}a.title{color:#ddd;text-decoration:none}a.title:hover,a.title:active,a.title:focus{text-decoration:underline}div.streaming{background-color:#131}div.streaming:hover{background-color:#353}div.done{background-color:#115}div.done:hover{background-color:#337}div.canceled{background-color:#511}div.canceled:hover{background-color:#733}div.task_contents{margin:10px 15px}span.task_contents{font-weight:bold}a.permalink{visibility:hidden}div.task:hover a.permalink{visibility:visible}div.note{background-color:#111}p.note_contents{margin:15px 20px}div.file{border:1px solid #333;background-color:#111;padding:15px 20px}div.image{border:1px solid #333;background-color:#111;padding:10px}img.image{box-sizing:border-box;vertical-align:top;max-width:100%}div.images{margin:10px;border:1px solid #333;background-color:#111;padding:10px;display:flex;justify-content:flex-start;gap:10px;flex-wrap:wrap}div.images>div.image{margin:0;border-style:none;padding:0}ul.files{margin:10px;border:1px solid #333;background-color:#111;padding-top:15px;padding-inline:40px 15px;padding-bottom:15px}div.note_ai_generated{margin:10px;border:1px solid transparent;background-color:#333}div.note_ai_generated>*{margin:15px 20px}div.note_ai_generated h1{font-size:2rem;font-weight:bold}div.note_ai_generated h2{font-size:1.8rem;font-weight:bold}div.note_ai_generated h3{font-size:1.6rem;font-weight:bold}div.note_ai_generated h4{font-size:1.4rem;font-weight:bold}div.note_ai_generated h5{font-size:1.2rem;font-weight:bold}div.note_ai_generated h6{font-size:1rem;font-weight:bold}pre{background-color:#555;padding:15px 20px;white-space:pre-wrap}code{font-family:'M PLUS 1 Code',monospace}</style>
    </head>
    <body>
        <div class="title">
            <a href="yyChat.htm" class="title">yyChat</a>
        </div>
        <div class="entries">
            <div id="42598832-a27a-41d7-91a7-ca83b4ee2795" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">このタスクリストのログが出力されるようにする</span>
                    <a href="#42598832-a27a-41d7-91a7-ca83b4ee2795" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="fbbe842f-9f6a-4a2d-acc7-c882f9c7f5a8" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">大まかな仕様を考える</span>
                    <a href="#fbbe842f-9f6a-4a2d-acc7-c882f9c7f5a8" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">自社の一番の問題は、コミュニケーションコストが大きすぎることだ。</p>
                            <p class="note_contents">今は、自分が中国のいくつものメーカーと話す。英語を話せない中国人が多いので、自分が英語で書いた文章を中国語に機械翻訳し、原文と訳文をローカルに保存し、中国語を WeChat に貼りつけている。相手は、中国語で返信してきたり、親切な人は英語に翻訳して返信してきたりだ。後者は、気持ちはありがたいが、翻訳精度が低い場合も多く、余計に分かりにくいことがある。原文があれば、日本人ならその方がまだギリギリ読めることもある。</p>
                            <p class="note_contents">そうやって非効率なコミュニケーションによって得た情報をまずは Telegram で奥さんに英語で伝える。この時点で、10の取引先とのやりとりが単一のチャンネルに統合される。それを奥さんが10に脳内で再分割するが、情報の欠損や誤解もたびたびある。</p>
                            <p class="note_contents">それら10あるいは8～9くらいを今度は奥さんがその両親に電話で伝える。電話という単一のチャンネルなので、またしても統合が起こる。しかも義父母は年齢もあってか再分割がうまくいかず、ここで半分以上の情報が吹っ飛ぶ。だから奥さんとの電話が日によっては5回も10回も繰り返される。これは完全に無駄だ。</p>
                            <p class="note_contents">そこから義父母がスペインの工場に伝えたり、ロシア人とやりとりしたりだ。</p>
                            <p class="note_contents">そのフィードバックも統合されて電話で奥さんに戻り、再分割され、理解され、またまた統合されて Telegram で自分に返ってくる。</p>
                            <p class="note_contents">実務の多くをやっているのが自分なので、自分が10の取り組みを10のままログしていけば足りることだ。</p>
                            <p class="note_contents">yyChat は、基本的にはそこに主眼を置く、翻訳機能つきの、プロジェクト単位の、時系列的メッセージングプラットフォームとなる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">早く欲しいツールだが、自分以外の書き込みはたぶんほとんどない。チャットシステムとして構成するが、実質、自分一人でまわすチケットシステムを、英語が苦手なロシア人やスペイン人が母語で眺めるだけになる。そちらで良い仕事ができて数年が経てば、もう J. Vila は自分のものになってくる。そこを目指して自分が主導権を握るためのツールであり、書き込んでくれないとスネないことを初めに覚悟しておく。また、その前提により、チャットシステムとしての過度の作り込みを避ける。たぶん、リアルタイムのページ更新さえ初期的にはなくてよい。たまに見に来て F5 を押してもらうので足りる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">yyMail とできるだけ仕様を近づける。そちらのログの前半に大まかな仕様がある。</p>
                            <p class="note_contents">以下、重複になることもサラッと書いておく。</p>
                            <p class="note_contents">ユーザーの CRUD においては、メアドの重複を許す。</p>
                            <p class="note_contents">「自社の○○が書いた」の通知を受け取りたい上司を想定し、重複を考慮せず通知を受け取るメアドや SMS も登録できるのを検討。</p>
                            <p class="note_contents">特権ユーザーしかユーザーの CRUD はできない。yyMail もそうする。おそらく、設定ファイルの変更でしかパスワードなどを変更できない管理者が一人いるのが最善。大きなシステムでは避けられるべき仕様だが、yyChat / yyMail 程度ではちょうど良く、むしろ使いやすい。</p>
                            <p class="note_contents">ユーザーごとのダッシュボードについても検討。たぶん、すぐには不要。ユーザーごとにタスクを割り当てたかったが、それをやるとただの「チャット」でなくなり、導入コストが上がる。IT 系でない人には難しくなる。実装する場合、@ で「メンション」してタスクを割り当てたり、共同タスクをつくれたり、タスクを移せたり、進捗を設定できたりも。やはり難しくなりそうなので消極的。</p>
                            <p class="note_contents">社内で使うにおいては、全ての書き込みを見てほしい人、こちらが指定したものだけ見てほしい人（しかし、それら以外を見えなくすることはない）を区別したい。通知設定のところで「全て」「メンションされた場合のみ」「なし」の三択か。それならメンションが必要。@ で名前が出てくるのは自分の JavaScript 能力では今のところ満点のコーディングが難しいので、まずは「メンションされた場合のみ」になっているユーザーのリストをチェックボックスでつくるか。</p>
                            <p class="note_contents">差別的な仕様にならないよう注意が必要。全てを見るユーザーとメンションされた場合のみのユーザーの区別は、あとから変更したときにリストに名前が入ったり消えたりする。@ からインテリセンスっぽくした方が目立たない。「なし」をなくし、「全て」でも「メンションされた場合のみ」でもリストに入れて、「全て」でもメンションされうる理由としてダッシュボードをつくるのも一つの案。特に重要なものを見てほしいという意味合いになる。「大きな問題や最終の結果のみ上司にメンション」といった内規をつくりやすい。</p>
                            <p class="note_contents">翻訳やファイル管理の流れは yyMail そのままでよい。数が増えたときの分け方も同じ。古いログやファイルの参照回数が多く、そのたびに数万のエントリーからそれらを SELECT するコストが気になるようになってくれば、パラメーターの組み合わせごとにキャッシュをつくる。データベース側にそういう機能があるだろう。</p>
                            <p class="note_contents">コストの評価のため、データベースを直接操作しないレイヤーをライブラリー内につくり、そのレイヤーによりできないことがあれば、まずそのレイヤーを強化する。その徹底により、全てのデータベース操作の所要時間を内部的にログできる。そういった情報をサマリーとして定期的に管理者が受け取る仕組みもつくる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">以前にも書いたが、割り切ってリアルタイムの表示更新をやめておく。あとからでも追加できるはず。名前が「チャット」だが、リアルタイムで話すツールでない。翻訳が挟まれるので、会話として快適なスピードでは動作しない。メールや SMS で通知をもらうたびに開いたりリロードしたりが当たり前のツールでよい。</p>
                            <p class="note_contents">そこで手を抜き、すぐにウェブ API を用意せず、フォーム認証に近いものでログインし、読み書きし、コリジョンに注意しながら別スレッドで翻訳する程度なら、ASP.NET Web Forms 並みの陳腐な設計をもとに Razor Pages でつくるという実装には、おそらく100時間もかからない。</p>
                            <p class="note_contents">今は自社の仕事に加えて娘の受験もあって死ぬほど忙しく、ここ2週間くらいは睡眠時間が5時間で、昨晩は4時間8分だった。今日は出願の手続きが必要で、娘の懇談があり、それからまた図書館だ。愚痴りたいのでなく、そのくらい開発「以外」に追われていて、設計に力を込めても実装の時間がないという現実がある。</p>
                            <p class="note_contents">使えるものを最短でつくるには、やはり仕様を思いきり削らないといけない。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="2346ecf7-9727-4e67-8f1d-3064c4e271db" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">dotnet dev-certs https --trust を実行</span>
                    <a href="#2346ecf7-9727-4e67-8f1d-3064c4e271db" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="fa087223-d4cb-4b73-bcd2-40b2fb0c11cb" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">メモ通りにプロジェクト立ち上げ時のタスクを処理</span>
                    <a href="#fa087223-d4cb-4b73-bcd2-40b2fb0c11cb" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="70234497-c555-43a9-9396-d0f65789efa1" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">@popperjs について調べる</span>
                    <a href="#70234497-c555-43a9-9396-d0f65789efa1" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <div class="note_ai_generated">
<p><code>@popperjs</code> is a JavaScript library that provides powerful and customizable tools for positioning elements on the web. It is particularly useful for managing popups, tooltips, dropdowns, and other UI elements that require dynamic positioning.</p>
<p>Here’s what <code>@popperjs</code> does:</p>
<ol>
<li><p><strong>Positioning Elements:</strong> The main purpose of <code>@popperjs</code> is to position one element relative to another. For example, it can position a tooltip relative to a button or a dropdown relative to a menu toggle.</p>
</li>
<li><p><strong>Dynamic Adjustment:</strong> It dynamically adjusts the position of elements to keep them visible within the viewport. If there isn’t enough space in the intended direction, it can automatically flip, reposition, or resize the element to fit.</p>
</li>
<li><p><strong>Collision Handling:</strong> It prevents elements from overflowing the boundaries of the viewport. For instance, if a tooltip would go off-screen, <code>@popperjs</code> will adjust its position to ensure it's fully visible.</p>
</li>
<li><p><strong>Modifiers:</strong> <code>@popperjs</code> is highly configurable through a system of &quot;modifiers,&quot; which allow you to customize how the positioning is calculated, add offsets, enable event listeners for repositioning on scroll or resize, and more.</p>
</li>
<li><p><strong>Lightweight and Efficient:</strong> The library is designed to be lightweight and efficient, making it a popular choice for developers who need precise control over UI element positioning without adding a lot of overhead.</p>
</li>
</ol>
<p>Overall, <code>@popperjs</code> is a crucial tool for creating responsive and accessible web applications where elements need to be accurately positioned in relation to other elements or the viewport.</p>
                            </div>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <div class="note_ai_generated">
<p>You're correct that both Bootstrap and jQuery can depend on <code>@popperjs</code>, but the dependency is specific to certain features within those libraries. Here’s a breakdown:</p>
<h3>Bootstrap</h3>
<ul>
<li><p><strong>Bootstrap 4 and 5</strong>: These versions of Bootstrap use <code>@popperjs</code> (or the earlier version, <code>popper.js</code>) primarily for positioning elements like tooltips, popovers, and dropdowns. These features require dynamic positioning and collision handling, which is where <code>@popperjs</code> comes in.</p>
<ul>
<li><strong>Without <code>@popperjs</code></strong>: Bootstrap would still function, but features like tooltips, popovers, and dropdowns would either not work at all or would not position correctly. Other components like modals, buttons, grid system, forms, etc., would still work fine, as they do not rely on <code>@popperjs</code>.</li>
</ul>
</li>
</ul>
<h3>jQuery</h3>
<ul>
<li><p><strong>jQuery UI or plugins</strong>: jQuery itself does not directly depend on <code>@popperjs</code>. However, some jQuery plugins or UI components that require advanced positioning (such as certain dropdowns or tooltips) might rely on <code>@popperjs</code> for positioning.</p>
<ul>
<li><strong>Without <code>@popperjs</code></strong>: jQuery would still work perfectly fine since its core functionality doesn’t depend on <code>@popperjs</code>. However, any plugins or components that rely on it for positioning would not work as intended.</li>
</ul>
</li>
</ul>
<h3>Summary</h3>
<ul>
<li><strong>Bootstrap</strong>: Most of Bootstrap will work without <code>@popperjs</code>, but certain components like tooltips, popovers, and dropdowns would break or not function properly.</li>
<li><strong>jQuery</strong>: jQuery core will work without <code>@popperjs</code>, but specific plugins or components that use it for positioning may fail or have positioning issues.</li>
</ul>
<p>In general, if your project uses Bootstrap and you want full functionality, you should include <code>@popperjs</code>. If you're not using components that require it, you might be able to skip it, but it's recommended to include it to avoid any potential issues.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="1e996e8d-ca14-40dc-b324-97380f62a69f" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">.js.map に &quot;../../node_modules/@popperjs/core/lib/dom-utils/getWindow.js&quot; などのリテラルが入っていることについて調べる</span>
                    <a href="#1e996e8d-ca14-40dc-b324-97380f62a69f" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">最小化された JavaScript ファイルを元のものに戻し、コード補完などをやるためのものか。アプリのリリース時には不要とのこと。</p>
                            <div class="note_ai_generated">
<p><code>.js.map</code> files are <strong>source map files</strong> that are used in web development to map the minified or transpiled JavaScript code back to the original source code. Here’s a more detailed explanation:</p>
<h3>Purpose of <code>.js.map</code> Files:</h3>
<ol>
<li><p><strong>Debugging:</strong> Source map files are crucial for debugging in development. When JavaScript code is minified or transpiled (e.g., from TypeScript to JavaScript, or ES6+ to ES5), the resulting code is often difficult to read because variable names are shortened, and formatting is removed to reduce file size. Source maps link this minified code back to the original source code, allowing developers to debug using the original, human-readable code in their browser's developer tools.</p>
</li>
<li><p><strong>Development Tools:</strong> Modern browsers and development tools use source maps to provide a better debugging experience. For example, when you set a breakpoint in your browser's developer tools, the tool will reference the original source code if a source map is available. This way, you see and interact with your original code rather than the minified or transpiled version.</p>
</li>
</ol>
<h3>How <code>.js.map</code> Files Work:</h3>
<ul>
<li><p><strong>Mapping Process:</strong> The <code>.js.map</code> file contains a JSON object that describes how each line and column in the minified/transpiled file corresponds to lines and columns in the original source file. This mapping allows development tools to &quot;translate&quot; the minified code back to the original code for debugging purposes.</p>
</li>
<li><p><strong>Integration:</strong> The <code>.js.map</code> file is usually linked at the end of the minified JavaScript file with a comment like this:</p>
<pre><code class="language-javascript">//# sourceMappingURL=example.js.map
</code></pre>
<p>This tells the browser that a source map is available and where to find it.</p>
</li>
</ul>
<h3>Do You Need <code>.js.map</code> Files in Production?</h3>
<ul>
<li><strong>Optional in Production:</strong> While source maps are incredibly useful during development, they are typically not necessary in production environments. Including them in production can expose your original source code to anyone who has access to the source maps, which might not be desirable from a security perspective. However, they can be useful in production for debugging if your code is running in an environment where debugging is still necessary.</li>
</ul>
<h3>Summary</h3>
<p><code>.js.map</code> files are essential for linking minified or transpiled JavaScript code back to its original source, making debugging easier and more efficient. They are mainly used in development and can be omitted from production if you're concerned about exposing your original source code.</p>
                            </div>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">node_modules で全文検索したときに .js.map にしか入らず、ファイル数も確か2。リンク切れのままでもライブラリーの動作に影響はなさそう。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="c76aa792-edd5-4b01-bee4-d06cc7fa9b4e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">jQuery Slim について調べる</span>
                    <a href="#c76aa792-edd5-4b01-bee4-d06cc7fa9b4e" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <div class="note_ai_generated">
<p><strong>jQuery Slim</strong> is a lightweight version of the jQuery library that includes the core features of jQuery but omits some of the less commonly used components. The idea behind jQuery Slim is to provide a smaller and more efficient version of the library, which can be useful for projects where you want to reduce the overall file size and only need the essential features of jQuery.</p>
<h3>Key Differences Between jQuery Slim and Full jQuery:</h3>
<ol>
<li><p><strong>Omitted Features:</strong></p>
<ul>
<li><strong>AJAX Functions:</strong> jQuery Slim does not include the <code>$.ajax</code> function and related AJAX utilities like <code>$.get</code>, <code>$.post</code>, <code>$.getJSON</code>, etc.</li>
<li><strong>Effects and Animations:</strong> jQuery Slim excludes effects and animation methods like <code>$.fadeIn</code>, <code>$.fadeOut</code>, <code>$.slideUp</code>, <code>$.slideDown</code>, and the <code>$.animate</code> method.</li>
<li><strong>Deferred/Promises:</strong> The <code>$.Deferred</code> object, which is used for managing asynchronous operations in a more flexible way, is also not included in the Slim version.</li>
</ul>
</li>
<li><p><strong>File Size:</strong></p>
<ul>
<li>The Slim version of jQuery is smaller in file size compared to the full version. This reduction in size can lead to faster load times, which is especially beneficial for performance-sensitive applications or situations where you want to minimize bandwidth usage.</li>
</ul>
</li>
</ol>
<h3>Use Cases for jQuery Slim:</h3>
<ul>
<li><strong>Simple Web Applications:</strong> If your web application only needs basic DOM manipulation, event handling, and simple utilities, jQuery Slim is a good choice.</li>
<li><strong>Performance Optimization:</strong> In cases where minimizing the size of JavaScript files is a priority, jQuery Slim can be used to reduce the overall footprint of your web assets.</li>
<li><strong>No Need for AJAX or Animations:</strong> If you don't need the features related to AJAX or animations, the Slim version is ideal as it excludes these parts of the library.</li>
</ul>
<h3>When Not to Use jQuery Slim:</h3>
<ul>
<li><strong>Advanced Functionality:</strong> If your project relies on jQuery's AJAX methods, animation effects, or the Deferred object, you should use the full version of jQuery instead of the Slim version.</li>
</ul>
<h3>Summary</h3>
<p>jQuery Slim is a smaller version of the jQuery library that excludes AJAX, effects, and Deferred features, making it suitable for projects where these features are not needed and where reducing file size is important. If your project requires these additional features, you'll need to use the full version of jQuery.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="b11393ab-05a1-4179-8a52-6052e3e6e45e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">jQuery などのファイルの更新を自動化</span>
                    <a href="#b11393ab-05a1-4179-8a52-6052e3e6e45e" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">npm にバッチファイルを組み合わせることでうまくいきそう。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">npm_update.bat をつくり、コメントを VZ40 Comments on npm_update.bat.json にまとめた。</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
