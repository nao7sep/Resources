<!DOCTYPE html>
<html>
    <head>
        <title>yyChat</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style>@import url('https://fonts.googleapis.com/css2?family=M+PLUS+1&family=M+PLUS+1+Code&display=swap');body{margin:0;background-color:#111;color:#ddd;font-family:'M PLUS 1',sans-serif;font-size:1rem;line-height:1.5;overflow-wrap:break-word;word-wrap:break-word}a{color:#69c;text-decoration:underline}a:hover,a:active,a:focus{font-weight:bold}div.task,div.note,div.file,div.image{margin:10px;border:1px solid transparent}div.entries>div.note{border:1px solid #333}div.title{background-color:#538;padding:20px 30px;font-size:2rem;font-weight:bold}a.title{color:#ddd;text-decoration:none}a.title:hover,a.title:active,a.title:focus{text-decoration:underline}div.streaming{background-color:#131}div.streaming:hover{background-color:#353}div.done{background-color:#115}div.done:hover{background-color:#337}div.canceled{background-color:#511}div.canceled:hover{background-color:#733}div.task_contents{margin:10px 15px}span.task_contents{font-weight:bold}a.permalink{visibility:hidden}div.task:hover a.permalink{visibility:visible}div.note{background-color:#111}p.note_contents{margin:15px 20px}div.file{border:1px solid #333;background-color:#111;padding:15px 20px}div.image{border:1px solid #333;background-color:#111;padding:10px}img.image{box-sizing:border-box;vertical-align:top;max-width:100%}div.images{margin:10px;border:1px solid #333;background-color:#111;padding:10px;display:flex;justify-content:flex-start;gap:10px;flex-wrap:wrap}div.images>div.image{margin:0;border-style:none;padding:0}ul.files{margin:10px;border:1px solid #333;background-color:#111;padding-top:15px;padding-inline:40px 15px;padding-bottom:15px}div.note_ai_generated{margin:10px;border:1px solid transparent;background-color:#333}div.note_ai_generated>*{margin:15px 20px}div.note_ai_generated h1{font-size:2rem;font-weight:bold}div.note_ai_generated h2{font-size:1.8rem;font-weight:bold}div.note_ai_generated h3{font-size:1.6rem;font-weight:bold}div.note_ai_generated h4{font-size:1.4rem;font-weight:bold}div.note_ai_generated h5{font-size:1.2rem;font-weight:bold}div.note_ai_generated h6{font-size:1rem;font-weight:bold}pre{background-color:#555;padding:15px 20px;white-space:pre-wrap}code{font-family:'M PLUS 1 Code',monospace}</style>
    </head>
    <body>
        <div class="title">
            <a href="yyChat.htm" class="title">yyChat</a>
        </div>
        <div class="entries">
            <div id="42598832-a27a-41d7-91a7-ca83b4ee2795" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">このタスクリストのログが出力されるようにする</span>
                    <a href="#42598832-a27a-41d7-91a7-ca83b4ee2795" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="fbbe842f-9f6a-4a2d-acc7-c882f9c7f5a8" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">大まかな仕様を考える</span>
                    <a href="#fbbe842f-9f6a-4a2d-acc7-c882f9c7f5a8" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">自社の一番の問題は、コミュニケーションコストが大きすぎることだ。</p>
                            <p class="note_contents">今は、自分が中国のいくつものメーカーと話す。英語を話せない中国人が多いので、自分が英語で書いた文章を中国語に機械翻訳し、原文と訳文をローカルに保存し、中国語を WeChat に貼りつけている。相手は、中国語で返信してきたり、親切な人は英語に翻訳して返信してきたりだ。後者は、気持ちはありがたいが、翻訳精度が低い場合も多く、余計に分かりにくいことがある。原文があれば、日本人ならその方がまだギリギリ読めることもある。</p>
                            <p class="note_contents">そうやって非効率なコミュニケーションによって得た情報をまずは Telegram で奥さんに英語で伝える。この時点で、10の取引先とのやりとりが単一のチャンネルに統合される。それを奥さんが10に脳内で再分割するが、情報の欠損や誤解もたびたびある。</p>
                            <p class="note_contents">それら10あるいは8～9くらいを今度は奥さんがその両親に電話で伝える。電話という単一のチャンネルなので、またしても統合が起こる。しかも義父母は年齢もあってか再分割がうまくいかず、ここで半分以上の情報が吹っ飛ぶ。だから奥さんとの電話が日によっては5回も10回も繰り返される。これは完全に無駄だ。</p>
                            <p class="note_contents">そこから義父母がスペインの工場に伝えたり、ロシア人とやりとりしたりだ。</p>
                            <p class="note_contents">そのフィードバックも統合されて電話で奥さんに戻り、再分割され、理解され、またまた統合されて Telegram で自分に返ってくる。</p>
                            <p class="note_contents">実務の多くをやっているのが自分なので、自分が10の取り組みを10のままログしていけば足りることだ。</p>
                            <p class="note_contents">yyChat は、基本的にはそこに主眼を置く、翻訳機能つきの、プロジェクト単位の、時系列的メッセージングプラットフォームとなる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">早く欲しいツールだが、自分以外の書き込みはたぶんほとんどない。チャットシステムとして構成するが、実質、自分一人でまわすチケットシステムを、英語が苦手なロシア人やスペイン人が母語で眺めるだけになる。そちらで良い仕事ができて数年が経てば、もう J. Vila は自分のものになってくる。そこを目指して自分が主導権を握るためのツールであり、書き込んでくれないとスネないことを初めに覚悟しておく。また、その前提により、チャットシステムとしての過度の作り込みを避ける。たぶん、リアルタイムのページ更新さえ初期的にはなくてよい。たまに見に来て F5 を押してもらうので足りる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">yyMail とできるだけ仕様を近づける。そちらのログの前半に大まかな仕様がある。</p>
                            <p class="note_contents">以下、重複になることもサラッと書いておく。</p>
                            <p class="note_contents">ユーザーの CRUD においては、メアドの重複を許す。</p>
                            <p class="note_contents">「自社の○○が書いた」の通知を受け取りたい上司を想定し、重複を考慮せず通知を受け取るメアドや SMS も登録できるのを検討。</p>
                            <p class="note_contents">特権ユーザーしかユーザーの CRUD はできない。yyMail もそうする。おそらく、設定ファイルの変更でしかパスワードなどを変更できない管理者が一人いるのが最善。大きなシステムでは避けられるべき仕様だが、yyChat / yyMail 程度ではちょうど良く、むしろ使いやすい。</p>
                            <p class="note_contents">ユーザーごとのダッシュボードについても検討。たぶん、すぐには不要。ユーザーごとにタスクを割り当てたかったが、それをやるとただの「チャット」でなくなり、導入コストが上がる。IT 系でない人には難しくなる。実装する場合、@ で「メンション」してタスクを割り当てたり、共同タスクをつくれたり、タスクを移せたり、進捗を設定できたりも。やはり難しくなりそうなので消極的。</p>
                            <p class="note_contents">社内で使うにおいては、全ての書き込みを見てほしい人、こちらが指定したものだけ見てほしい人（しかし、それら以外を見えなくすることはない）を区別したい。通知設定のところで「全て」「メンションされた場合のみ」「なし」の三択か。それならメンションが必要。@ で名前が出てくるのは自分の JavaScript 能力では今のところ満点のコーディングが難しいので、まずは「メンションされた場合のみ」になっているユーザーのリストをチェックボックスでつくるか。</p>
                            <p class="note_contents">差別的な仕様にならないよう注意が必要。全てを見るユーザーとメンションされた場合のみのユーザーの区別は、あとから変更したときにリストに名前が入ったり消えたりする。@ からインテリセンスっぽくした方が目立たない。「なし」をなくし、「全て」でも「メンションされた場合のみ」でもリストに入れて、「全て」でもメンションされうる理由としてダッシュボードをつくるのも一つの案。特に重要なものを見てほしいという意味合いになる。「大きな問題や最終の結果のみ上司にメンション」といった内規をつくりやすい。</p>
                            <p class="note_contents">翻訳やファイル管理の流れは yyMail そのままでよい。数が増えたときの分け方も同じ。古いログやファイルの参照回数が多く、そのたびに数万のエントリーからそれらを SELECT するコストが気になるようになってくれば、パラメーターの組み合わせごとにキャッシュをつくる。データベース側にそういう機能があるだろう。</p>
                            <p class="note_contents">コストの評価のため、データベースを直接操作しないレイヤーをライブラリー内につくり、そのレイヤーによりできないことがあれば、まずそのレイヤーを強化する。その徹底により、全てのデータベース操作の所要時間を内部的にログできる。そういった情報をサマリーとして定期的に管理者が受け取る仕組みもつくる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">以前にも書いたが、割り切ってリアルタイムの表示更新をやめておく。あとからでも追加できるはず。名前が「チャット」だが、リアルタイムで話すツールでない。翻訳が挟まれるので、会話として快適なスピードでは動作しない。メールや SMS で通知をもらうたびに開いたりリロードしたりが当たり前のツールでよい。</p>
                            <p class="note_contents">そこで手を抜き、すぐにウェブ API を用意せず、フォーム認証に近いものでログインし、読み書きし、コリジョンに注意しながら別スレッドで翻訳する程度なら、ASP.NET Web Forms 並みの陳腐な設計をもとに Razor Pages でつくるという実装には、おそらく100時間もかからない。</p>
                            <p class="note_contents">今は自社の仕事に加えて娘の受験もあって死ぬほど忙しく、ここ2週間くらいは睡眠時間が5時間で、昨晩は4時間8分だった。今日は出願の手続きが必要で、娘の懇談があり、それからまた図書館だ。愚痴りたいのでなく、そのくらい開発「以外」に追われていて、設計に力を込めても実装の時間がないという現実がある。</p>
                            <p class="note_contents">使えるものを最短でつくるには、やはり仕様を思いきり削らないといけない。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="2346ecf7-9727-4e67-8f1d-3064c4e271db" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">dotnet dev-certs https --trust を実行</span>
                    <a href="#2346ecf7-9727-4e67-8f1d-3064c4e271db" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="fa087223-d4cb-4b73-bcd2-40b2fb0c11cb" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">メモ通りにプロジェクト立ち上げ時のタスクを処理</span>
                    <a href="#fa087223-d4cb-4b73-bcd2-40b2fb0c11cb" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="70234497-c555-43a9-9396-d0f65789efa1" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">@popperjs について調べる</span>
                    <a href="#70234497-c555-43a9-9396-d0f65789efa1" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <div class="note_ai_generated">
<p><code>@popperjs</code> is a JavaScript library that provides powerful and customizable tools for positioning elements on the web. It is particularly useful for managing popups, tooltips, dropdowns, and other UI elements that require dynamic positioning.</p>
<p>Here’s what <code>@popperjs</code> does:</p>
<ol>
<li><p><strong>Positioning Elements:</strong> The main purpose of <code>@popperjs</code> is to position one element relative to another. For example, it can position a tooltip relative to a button or a dropdown relative to a menu toggle.</p>
</li>
<li><p><strong>Dynamic Adjustment:</strong> It dynamically adjusts the position of elements to keep them visible within the viewport. If there isn’t enough space in the intended direction, it can automatically flip, reposition, or resize the element to fit.</p>
</li>
<li><p><strong>Collision Handling:</strong> It prevents elements from overflowing the boundaries of the viewport. For instance, if a tooltip would go off-screen, <code>@popperjs</code> will adjust its position to ensure it's fully visible.</p>
</li>
<li><p><strong>Modifiers:</strong> <code>@popperjs</code> is highly configurable through a system of &quot;modifiers,&quot; which allow you to customize how the positioning is calculated, add offsets, enable event listeners for repositioning on scroll or resize, and more.</p>
</li>
<li><p><strong>Lightweight and Efficient:</strong> The library is designed to be lightweight and efficient, making it a popular choice for developers who need precise control over UI element positioning without adding a lot of overhead.</p>
</li>
</ol>
<p>Overall, <code>@popperjs</code> is a crucial tool for creating responsive and accessible web applications where elements need to be accurately positioned in relation to other elements or the viewport.</p>
                            </div>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <div class="note_ai_generated">
<p>You're correct that both Bootstrap and jQuery can depend on <code>@popperjs</code>, but the dependency is specific to certain features within those libraries. Here’s a breakdown:</p>
<h3>Bootstrap</h3>
<ul>
<li><p><strong>Bootstrap 4 and 5</strong>: These versions of Bootstrap use <code>@popperjs</code> (or the earlier version, <code>popper.js</code>) primarily for positioning elements like tooltips, popovers, and dropdowns. These features require dynamic positioning and collision handling, which is where <code>@popperjs</code> comes in.</p>
<ul>
<li><strong>Without <code>@popperjs</code></strong>: Bootstrap would still function, but features like tooltips, popovers, and dropdowns would either not work at all or would not position correctly. Other components like modals, buttons, grid system, forms, etc., would still work fine, as they do not rely on <code>@popperjs</code>.</li>
</ul>
</li>
</ul>
<h3>jQuery</h3>
<ul>
<li><p><strong>jQuery UI or plugins</strong>: jQuery itself does not directly depend on <code>@popperjs</code>. However, some jQuery plugins or UI components that require advanced positioning (such as certain dropdowns or tooltips) might rely on <code>@popperjs</code> for positioning.</p>
<ul>
<li><strong>Without <code>@popperjs</code></strong>: jQuery would still work perfectly fine since its core functionality doesn’t depend on <code>@popperjs</code>. However, any plugins or components that rely on it for positioning would not work as intended.</li>
</ul>
</li>
</ul>
<h3>Summary</h3>
<ul>
<li><strong>Bootstrap</strong>: Most of Bootstrap will work without <code>@popperjs</code>, but certain components like tooltips, popovers, and dropdowns would break or not function properly.</li>
<li><strong>jQuery</strong>: jQuery core will work without <code>@popperjs</code>, but specific plugins or components that use it for positioning may fail or have positioning issues.</li>
</ul>
<p>In general, if your project uses Bootstrap and you want full functionality, you should include <code>@popperjs</code>. If you're not using components that require it, you might be able to skip it, but it's recommended to include it to avoid any potential issues.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="1e996e8d-ca14-40dc-b324-97380f62a69f" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">.js.map に &quot;../../node_modules/@popperjs/core/lib/dom-utils/getWindow.js&quot; などのリテラルが入っていることについて調べる</span>
                    <a href="#1e996e8d-ca14-40dc-b324-97380f62a69f" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">最小化された JavaScript ファイルを元のものに戻し、コード補完などをやるためのものか。アプリのリリース時には不要とのこと。</p>
                            <div class="note_ai_generated">
<p><code>.js.map</code> files are <strong>source map files</strong> that are used in web development to map the minified or transpiled JavaScript code back to the original source code. Here’s a more detailed explanation:</p>
<h3>Purpose of <code>.js.map</code> Files:</h3>
<ol>
<li><p><strong>Debugging:</strong> Source map files are crucial for debugging in development. When JavaScript code is minified or transpiled (e.g., from TypeScript to JavaScript, or ES6+ to ES5), the resulting code is often difficult to read because variable names are shortened, and formatting is removed to reduce file size. Source maps link this minified code back to the original source code, allowing developers to debug using the original, human-readable code in their browser's developer tools.</p>
</li>
<li><p><strong>Development Tools:</strong> Modern browsers and development tools use source maps to provide a better debugging experience. For example, when you set a breakpoint in your browser's developer tools, the tool will reference the original source code if a source map is available. This way, you see and interact with your original code rather than the minified or transpiled version.</p>
</li>
</ol>
<h3>How <code>.js.map</code> Files Work:</h3>
<ul>
<li><p><strong>Mapping Process:</strong> The <code>.js.map</code> file contains a JSON object that describes how each line and column in the minified/transpiled file corresponds to lines and columns in the original source file. This mapping allows development tools to &quot;translate&quot; the minified code back to the original code for debugging purposes.</p>
</li>
<li><p><strong>Integration:</strong> The <code>.js.map</code> file is usually linked at the end of the minified JavaScript file with a comment like this:</p>
<pre><code class="language-javascript">//# sourceMappingURL=example.js.map
</code></pre>
<p>This tells the browser that a source map is available and where to find it.</p>
</li>
</ul>
<h3>Do You Need <code>.js.map</code> Files in Production?</h3>
<ul>
<li><strong>Optional in Production:</strong> While source maps are incredibly useful during development, they are typically not necessary in production environments. Including them in production can expose your original source code to anyone who has access to the source maps, which might not be desirable from a security perspective. However, they can be useful in production for debugging if your code is running in an environment where debugging is still necessary.</li>
</ul>
<h3>Summary</h3>
<p><code>.js.map</code> files are essential for linking minified or transpiled JavaScript code back to its original source, making debugging easier and more efficient. They are mainly used in development and can be omitted from production if you're concerned about exposing your original source code.</p>
                            </div>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">node_modules で全文検索したときに .js.map にしか入らず、ファイル数も確か2。リンク切れのままでもライブラリーの動作に影響はなさそう。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="c76aa792-edd5-4b01-bee4-d06cc7fa9b4e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">jQuery Slim について調べる</span>
                    <a href="#c76aa792-edd5-4b01-bee4-d06cc7fa9b4e" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <div class="note_ai_generated">
<p><strong>jQuery Slim</strong> is a lightweight version of the jQuery library that includes the core features of jQuery but omits some of the less commonly used components. The idea behind jQuery Slim is to provide a smaller and more efficient version of the library, which can be useful for projects where you want to reduce the overall file size and only need the essential features of jQuery.</p>
<h3>Key Differences Between jQuery Slim and Full jQuery:</h3>
<ol>
<li><p><strong>Omitted Features:</strong></p>
<ul>
<li><strong>AJAX Functions:</strong> jQuery Slim does not include the <code>$.ajax</code> function and related AJAX utilities like <code>$.get</code>, <code>$.post</code>, <code>$.getJSON</code>, etc.</li>
<li><strong>Effects and Animations:</strong> jQuery Slim excludes effects and animation methods like <code>$.fadeIn</code>, <code>$.fadeOut</code>, <code>$.slideUp</code>, <code>$.slideDown</code>, and the <code>$.animate</code> method.</li>
<li><strong>Deferred/Promises:</strong> The <code>$.Deferred</code> object, which is used for managing asynchronous operations in a more flexible way, is also not included in the Slim version.</li>
</ul>
</li>
<li><p><strong>File Size:</strong></p>
<ul>
<li>The Slim version of jQuery is smaller in file size compared to the full version. This reduction in size can lead to faster load times, which is especially beneficial for performance-sensitive applications or situations where you want to minimize bandwidth usage.</li>
</ul>
</li>
</ol>
<h3>Use Cases for jQuery Slim:</h3>
<ul>
<li><strong>Simple Web Applications:</strong> If your web application only needs basic DOM manipulation, event handling, and simple utilities, jQuery Slim is a good choice.</li>
<li><strong>Performance Optimization:</strong> In cases where minimizing the size of JavaScript files is a priority, jQuery Slim can be used to reduce the overall footprint of your web assets.</li>
<li><strong>No Need for AJAX or Animations:</strong> If you don't need the features related to AJAX or animations, the Slim version is ideal as it excludes these parts of the library.</li>
</ul>
<h3>When Not to Use jQuery Slim:</h3>
<ul>
<li><strong>Advanced Functionality:</strong> If your project relies on jQuery's AJAX methods, animation effects, or the Deferred object, you should use the full version of jQuery instead of the Slim version.</li>
</ul>
<h3>Summary</h3>
<p>jQuery Slim is a smaller version of the jQuery library that excludes AJAX, effects, and Deferred features, making it suitable for projects where these features are not needed and where reducing file size is important. If your project requires these additional features, you'll need to use the full version of jQuery.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="b11393ab-05a1-4179-8a52-6052e3e6e45e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">jQuery などのファイルの更新を自動化</span>
                    <a href="#b11393ab-05a1-4179-8a52-6052e3e6e45e" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">npm にバッチファイルを組み合わせることでうまくいきそう。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">npm_update.bat をつくり、コメントを VZ40 Comments on npm_update.bat.json にまとめた。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="5bc52352-8eaf-4a2b-ad53-ffda5674baa2" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">添付ファイルの保存方法についてメモ</span>
                    <a href="#5bc52352-8eaf-4a2b-ad53-ffda5674baa2" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">yyChat へのつなぎのツールの開発において良い仕様を思いついたので、ここにメモを残す。yyMail でもこれにならう。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">WordPress は、月ごとにファイルを分ける。uploads/2024/08/... のようなパスをよく見る。日ごとは分けすぎで、年ごとはまとめすぎだ。おそらく設定で変更できるだろうが、デフォルトが「月」なのは妥当だ。時系列的にエントリーを管理するツールなのだから、「月」で分けておけば、ゆるく関連しているファイルがそれぞれのサブディレクトリーにまとまる。</p>
                            <p class="note_contents">yyChat/yyMail においても、これにならう。</p>
                            <p class="note_contents">さらに、同じ名前のファイルが存在すれば、1からの連番をパスに含める。内部的には、0がルートで、1以降がサブディレクトリーだ。同じ名前のファイルだけを List にでも入れるにおいてインデックスと連番を一致させられるのも都合が良い。</p>
                            <p class="note_contents">データベースには、載せた人の ID、タイムスタンプ、それらから抽出した年月日、そのうちどこまでがパスに使われているか、コリジョン対策の連番、それらによる最終的な相対パス、各サイズの縮小版の相対パス（画像の場合）などを入れる。</p>
                            <p class="note_contents">「どこまでが」を扱えば、パスの生成方法を途中で変更できる。最初は月ごとだったものを年ごとに変更してからコリジョンが多ければ「月」としてつくられたサブディレクトリーと連番が衝突するなどが考えられるが、おそらく問題はない。そのパスが使用可能かどうかだけの判別であり、ファイルシステム側でたとえばその場所に含まれるほかのファイルとの関連性だったり全体の数だったりが問われることはないため。</p>
                            <p class="note_contents">おそらく「年」でさえ分けない設定も問題ない。コリジョンが数千回になれば「年」で昔に作ったサブディレクトリーと衝突するが、それも実害はない。</p>
                            <p class="note_contents">yyChat においてはプロジェクトごとに分けようと思っていたが、そうする理由があまりない。URL にプロジェクトの ID が入ることのメリットは、なんとなくそう思うほどには多くない。RDP でサーバーに直接つなぐのでない限り、ファイルシステムにおいてプロジェクトごとにファイルを閲覧できるメリットもない。そこでの誤操作でデータが壊れるのだから、そもそもそういうことをしてはならない。プロジェクトごとに添付ファイルを表示する機能は必ず実装される。</p>
                            <p class="note_contents">yyChat へのつなぎのツールにおいては、プロジェクトごとに分けることで、関連するファイルをエクスプローラーで一覧表示できる。ただ、つなぎで使う段階においてはそれほど多くのファイルを保存しないし、ファイルが二つ三つしか発生しないプロジェクトも多いため、おそらくサブディレクトリーのつくりすぎになって閲覧性はむしろ下がる。終わるとプロジェクトをアーカイブしていくツールなので、サブディレクトリーがすぐに100、200と増えていく可能性もある。つなぎのツールにおいても上記の方式が適する。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="8f85ce2d-ee63-4bd4-856d-43acc187d9bc" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">添付ファイルの縮小版のつくり方についてメモ</span>
                    <a href="#8f85ce2d-ee63-4bd4-856d-43acc187d9bc" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ついでに縮小版についても考えておく。</p>
                            <p class="note_contents">これは、thumbs または resized といったサブディレクトリーを、原版のあるディレクトリーからぶら下げるのが最善だろう。年月日による区別および連番により全ての原版のパスが一意に決まる。そこにさらに thumbs/resized といった単語が含まれることでは一意性が崩れない。</p>
                            <p class="note_contents">ここで想定すべき問題は二つだ。一つは、たとえば hoge.jpg と hoge.png を載せて、それぞれの縮小版が JPEG だと resized/hoge.jpg がぶつかること。もう一つは、hoge.jpg から resized/hoge.jpg と resized/hoge-large.jpg がつくられたとして、さらに同じところに原版として hoge-large.jpg を載せたなら、resized 内でファイル名が衝突すること。</p>
                            <p class="note_contents">前者は、縮小版を原版と同じ拡張子でつくることにより回避できる。中身が TIFF なのにユーザーの知識不足で拡張子が JPEG になっているとか、.jpg と .jpeg が混在しているとか、拡張子関連でもいろいろあるが、そこをあえてさわらないことで、問題を回避できる。JPEG なのに拡張子が .bmp なら、これら二つの比較においては縮小版を BMP にすることの理由がないことから、縮小版も JPEG を .bmp とするなどのスマートなやり方がある。ブラウザーがうまく対処するので、システムは拡張子を直さない方が良い。</p>
                            <p class="note_contents">後者は、全ての縮小版に文字列を追加することで回避できる。そちらが普通の仕様だろうが、こういうのは気を抜くとやらかす設計ミスなので念のため書いておく。</p>
                            <p class="note_contents">上記二つを守れば、「原版 → 縮小版を特定」と「少なくとも一つの縮小版 → 原版を特定」の両方が可能。原版が hoge-small.jpeg のようなものでも、hoge-small-large.jpeg から small/large を一度取れば原版の名前に戻る。</p>
                            <p class="note_contents">名前の双方向変換ができることで、原版がなくなっているのに残っている縮小版や、原版があるのにそのサイズだけ存在しない縮小版の検出をやりやすい。</p>
                            <p class="note_contents">もっとも、自分がやってきた限り、ウェブサーバーは、ファイルがロード中であっても書き込みをロックせず、削除要求がきたなら応じる認識がある。そうでないと、サーバー側がごみファイルだらけになるからか。</p>
                            <p class="note_contents">WordPress は、原版の隣に縮小版をつくる。</p>
                            <div class="note_ai_generated">
<p>When you upload a very large image like <code>hoge.jpg</code> to WordPress, WordPress automatically generates several resized versions of that image in different dimensions to optimize performance and serve the appropriate size based on the context (e.g., thumbnails, medium-sized images, etc.).</p>
<h3>Where Resized Images Are Saved:</h3>
<ol>
<li><p><strong>Upload Directory:</strong> All resized images are saved in the same directory as the original image. The default location is within the <code>wp-content/uploads/</code> directory of your WordPress installation.</p>
</li>
<li><p><strong>Year and Month Folders:</strong> By default, WordPress organizes uploaded images into year and month folders. For example, if you upload <code>hoge.jpg</code> in August 2024, the image and its resized versions will typically be saved in a folder like:</p>
<pre><code>wp-content/uploads/2024/08/
</code></pre>
</li>
<li><p><strong>Resized Image Filenames:</strong> WordPress appends the dimensions to the filename of each resized version. For instance, if <code>hoge.jpg</code> is the original file, the resized images might be named:</p>
<pre><code>hoge-150x150.jpg (thumbnail size)
hoge-300x200.jpg (medium size)
hoge-1024x768.jpg (large size)
</code></pre>
</li>
<li><p><strong>Custom Image Sizes:</strong> If your WordPress theme or plugins define custom image sizes, additional versions of <code>hoge.jpg</code> will be created with those dimensions and saved in the same directory.</p>
</li>
</ol>
<h3>Summary:</h3>
<p>When you upload a large image like <code>hoge.jpg</code> to WordPress, its resized versions will be saved in the same directory as the original image, typically under <code>wp-content/uploads/yyyy/mm/</code> based on the upload date, with filenames that include the dimensions of each resized image.</p>
                            </div>
                            <p class="note_contents">狙ってそういうファイル名にしない限りコリジョンが起こらないが、狙うと簡単にやれてしまうというのは、自分がファイル管理を行うにおいては避けたい。</p>
                            <p class="note_contents">計算コストもファイルシステム上での負荷もほとんど全く増大しないため、原版と縮小版を、さらに一つの単語を挟むことで区別する。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">縮小版の扱いにおいて一番ややこしいのは、たぶん拡張子だ。</p>
                            <p class="note_contents">PNG のアニメは今も目にしないので実装されたかどうか分からないが、GIF だと今でもよく使われる。GIF だと、フレーム数を見て、アニメらしきものなら原版を拡大または縮小しての表示になる。そうでないとユーザーの利便性が下がる。</p>
                            <p class="note_contents">最近はツールの普及により減ったが、昔はスクショを「ペイント」に貼りつけて BMP で保存して載せてくる人が一定数いた。そういったファイルを縮小化して BMP で保存してサムネイル表示するのでは、そのファイルだけサイズが大きくなりがちだ。</p>
                            <p class="note_contents">WebP の普及も無視できない。今でもウェブ側で完結するツールの印象があり、ダウンロードしてからが不便で、LINE の Windows 版でも画像でなく添付ファイルのように送信されるなど、未対応のツールが多い。しかし、ウェブ系の人は、手元にツールを揃えた上で WebP ばかり載せてくることもありうる。</p>
                            <p class="note_contents">結局、「一意性を保つ」ということを優先するしかない。BMP で載ってきたなら、中身だけ JPEG にしてファイル名を .bmp にするのも適さないため、縮小版も BMP にするしかない。ファイルの形式を拡張子でなく中身から判断し、その形式で縮小版をつくり、元の拡張子で保存する。</p>
                            <p class="note_contents">そうするにおいて、アニメーションなら縮小版をそもそもつくらない。</p>
                            <p class="note_contents">TIFF も複数フレームが入った記憶がある。しかし、これはアニメでなく、レイヤーだ。全フレームの縮小版をつくっても仕方ないため、1枚目のみ抜き出して TIFF で保存するのは一つの方法。</p>
                            <p class="note_contents">3.68 MB の JPEG 画像を FastStone のデフォルト設定で TIFF として保存したところ 17.2 MB になった。BMP だと 57.6 MB なので、TIFF も悪くない。JPEG として画質を絞れば 1.5 MB くらいになるので、その10倍と考えると大きいが、縦横 1024px くらいなら大ダメージでもない。</p>
                            <p class="note_contents">たくさんの中国メーカーと大量のファイルのやりとりをしてきたが、TIFF は今のところ1枚も受け取っていない。大多数が JPEG で、そこにスクショとして PNG が混じるくらいだ。写真を PNG で保存すると非効率的だが、スクショは小さくなる。TIFF はカメラマンやデザイナーしか使わないと割り切り、原版が TIFF なら縮小版も TIFF で保存する。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">アニメーション対応の APNG というのがすでにあるが、広く使われているわけでないとのこと。一応、対応は必要。</p>
                            <div class="note_ai_generated">
<p>Yes, Animated PNG (APNG) is implemented and supported by many modern web browsers and some software applications.</p>
<h3>What is APNG?</h3>
<p>APNG (Animated Portable Network Graphics) is an extension of the PNG format that supports animation, similar to how GIF files work. It was initially proposed by Mozilla and provides a way to create animations while retaining the lossless compression and quality of the PNG format.</p>
<h3>Support and Implementation:</h3>
<ul>
<li><p><strong>Web Browsers</strong>:</p>
<ul>
<li><strong>Mozilla Firefox</strong>: APNG support was implemented early on, and Firefox has supported it since version 3.0.</li>
<li><strong>Google Chrome</strong>: Chrome added support for APNG starting from version 59.</li>
<li><strong>Apple Safari</strong>: Safari supports APNG from version 8.</li>
<li><strong>Microsoft Edge</strong>: Edge, based on Chromium, supports APNG as well.</li>
<li><strong>Opera</strong>: Opera also supports APNG due to its use of the Chromium engine.</li>
</ul>
</li>
<li><p><strong>Software</strong>:</p>
<ul>
<li><strong>Image Editors</strong>: Some image editing software like GIMP (with plugins) and certain online tools support creating and editing APNG files.</li>
<li><strong>Viewers</strong>: Most modern image viewers and editing tools that support PNG can handle APNG files, although animation support may vary.</li>
</ul>
</li>
</ul>
<h3>Use Cases:</h3>
<p>APNG is often used when a high-quality animated image is needed, particularly where transparency and color depth are important, and where the limitations of GIF (such as lower color fidelity) are a concern.</p>
<h3>Limitations:</h3>
<p>Despite its advantages, APNG is not as widely used as GIF, primarily because GIF remains the more universally supported format across all platforms and applications. APNG files also tend to be larger than GIFs, which can be a consideration for web usage where file size is critical.</p>
<h3>Summary:</h3>
<p>APNG is fully implemented and supported by most modern web browsers and some software tools, offering an alternative to GIFs for high-quality animations with lossless compression. However, its use is less widespread compared to GIFs, partly due to compatibility and file size considerations.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
