<!DOCTYPE html>
<html>
    <head>
        <title>yyLib</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style>@import url('https://fonts.googleapis.com/css2?family=M+PLUS+1&family=M+PLUS+1+Code&display=swap');body{margin:0;background-color:#111;color:#ddd;font-family:'M PLUS 1',sans-serif;font-size:1rem;line-height:1.5;overflow-wrap:break-word;word-wrap:break-word}a{color:#69c;text-decoration:underline}a:hover,a:active,a:focus{font-weight:bold}div.task,div.note,div.file,div.image{margin:10px;border:1px solid transparent}div.entries>div.note{border:1px solid #333}div.title{background-color:#538;padding:20px 30px;font-size:2rem;font-weight:bold}a.title{color:#ddd;text-decoration:none}a.title:hover,a.title:active,a.title:focus{text-decoration:underline}div.streaming{background-color:#131}div.streaming:hover{background-color:#353}div.done{background-color:#115}div.done:hover{background-color:#337}div.canceled{background-color:#511}div.canceled:hover{background-color:#733}div.task_contents{margin:10px 15px}span.task_contents{font-weight:bold}a.permalink{visibility:hidden}div.task:hover a.permalink{visibility:visible}div.note{background-color:#111}p.note_contents{margin:15px 20px}div.file{border:1px solid #333;background-color:#111;padding:15px 20px}div.image{border:1px solid #333;background-color:#111;padding:10px}img.image{box-sizing:border-box;vertical-align:top;max-width:100%}div.images{margin:10px;border:1px solid #333;background-color:#111;padding:10px;display:flex;justify-content:flex-start;gap:10px;flex-wrap:wrap}div.images>div.image{margin:0;border-style:none;padding:0}ul.files{margin:10px;border:1px solid #333;background-color:#111;padding-top:15px;padding-inline:40px 15px;padding-bottom:15px}div.note_ai_generated{margin:10px;border:1px solid transparent;background-color:#333}div.note_ai_generated>*{margin:15px 20px}div.note_ai_generated h1{font-size:2rem;font-weight:bold}div.note_ai_generated h2{font-size:1.8rem;font-weight:bold}div.note_ai_generated h3{font-size:1.6rem;font-weight:bold}div.note_ai_generated h4{font-size:1.4rem;font-weight:bold}div.note_ai_generated h5{font-size:1.2rem;font-weight:bold}div.note_ai_generated h6{font-size:1rem;font-weight:bold}pre{background-color:#555;padding:15px 20px;white-space:pre-wrap}code{font-family:'M PLUS 1 Code',monospace}</style>
    </head>
    <body>
        <div class="title">
            <a href="yyLib.htm" class="title">yyLib</a>
        </div>
        <div class="entries">
            <div id="df29e6b3-8273-4dbc-95e6-2a7c24f3d4f8" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">yyGptLib, yyMailLib から流し込んだコードを全体的に洗う</span>
                    <a href="#df29e6b3-8273-4dbc-95e6-2a7c24f3d4f8" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="da0ced64-3364-4c06-8251-a84eba56b797" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">このタスクリストのログが出力されるようにする</span>
                    <a href="#da0ced64-3364-4c06-8251-a84eba56b797" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="e635fabd-ec62-4258-adb8-31c1a5dee77c" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">モデルクラスの作り方についてベストプラクティスを調べる</span>
                    <a href="#e635fabd-ec62-4258-adb8-31c1a5dee77c" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ChatGPT にザッと聞いた。</p>
                            <p class="note_contents">教科書的には、「データベーステーブルをつくるなら NULL になりそうにないもの」を nullable にせず、それで初期値が必要なら required をつけ、set の代わりに init を使い、あるいは record を使い、配列を [] で初期化しておくべき。</p>
                            <p class="note_contents">しかし、それでモデルをつくってデータベースで Id が NULL にならないから required int にするとか、immutability のため init にするとかすれば、そのモデルで API からのレスポンスをデシリアライズするとか、CRUD をつくることになってやっぱり更新もしたくなるとかにおいて、じわじわとモデルが変わっていく。</p>
                            <p class="note_contents">現実的には、API の受け子になりうるものなら nullable を基本とし、よほど理由がない限り get/set でつくり、配列も nullable のまま初期値の null になるに任せるのが良い。</p>
                            <p class="note_contents">データベースの CRUD を高頻度で行うなどの理由があれば Id などが nullable でないモデルの方が処理の無駄を減らせるが、Id が nullable かどうかの差が気になるほどのデータ量なら、そもそもモデルにデータベースのデータをキャッシュしない。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="fdcbc6e8-5e69-4c9a-bd56-53b808eaff4e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">モデルクラスの nullable について再確認し、コードを全体的に見直す</span>
                    <a href="#fdcbc6e8-5e69-4c9a-bd56-53b808eaff4e" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">いずれも汎用性の高いモデルになっている。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="b9c06a6a-1291-4645-bc86-dc5df6737cf6" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ライブラリーの統合による依存関係の問題を解消</span>
                    <a href="#b9c06a6a-1291-4645-bc86-dc5df6737cf6" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">更新履歴のため、GitHub 側のレポジトリーを残し、ローカルのものを消す。それでもビルドに失敗してくれる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">yyGptLib と yyMailLib を使うのは yyTodoMail だけだったので、それがビルドされるようにして最新版のアーカイブをつくった。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="d0cf8ea3-e74e-4d44-b740-30ce52f2e2c9" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">SQLite へのログの出力を可能にする</span>
                    <a href="#d0cf8ea3-e74e-4d44-b740-30ce52f2e2c9" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="eca1cdfd-ecf9-46e3-b2c3-45a2fad057c5" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">yyGpt* クラスの使い方が分かるサンプルコードを追加</span>
                    <a href="#eca1cdfd-ecf9-46e3-b2c3-45a2fad057c5" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">古いレポジトリーをサーバー側に残すので、そこのコードへのリンクを張った。Mail の方とセットで見た。どちらも良好に書けていて、ライブラリー側の仕様も理にかなっている。ほかで使いやすそうで、十分な拡張性も期待できる。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="89a028bf-d4ef-4879-a402-7e7972bace09" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ImageSharp で JPEG 保存をするときの画質について調べる</span>
                    <a href="#89a028bf-d4ef-4879-a402-7e7972bace09" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">デフォルトで75になるとドキュメントで見たが、実際にやってみるともっと大きい。明示的に75を指定すると小さくなる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">コードをダウンロードして検索したが、不詳のまま。試すと、間違いなく75より高画質になる。</p>
                            <p class="note_contents">次のページに、以下のコードがある。</p>
                            <p class="note_contents"><a href="https://github.com/SixLabors/Samples/blob/main/ImageSharp/ChangeDefaultEncoderOptions/Program.cs" target="_blank" class="url">https://github.com/SixLabors/Samples/blob/main/ImageSharp/ChangeDefaultEncoderOptions/Program.cs</a></p>
                            <p class="note_contents">Configuration.Default.ImageFormatsManager.SetEncoder(JpegFormat.Instance, new JpegEncoder()<br />
                                {<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;Quality = 90<br />
                                });</p>
                            <p class="note_contents">デフォルト値が75だというのはコードのコメントなどに明記されているため、ウェブシステムなど、ファイルサイズを抑えなければならないところでは明示的に75に設定するべきか。</p>
                            <p class="note_contents"><a href="https://github.com/SixLabors/ImageSharp/blob/main/src/ImageSharp/Formats/Jpeg/JpegEncoder.cs" target="_blank" class="url">https://github.com/SixLabors/ImageSharp/blob/main/src/ImageSharp/Formats/Jpeg/JpegEncoder.cs</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">うろ覚えだが、NuGet 関連の右往左往についてメモを残す。</p>
                    <p class="note_contents">build_changed_projects.py にて NuGet の更新を行ったところ、yyLib の System.Data.SqlClient 4.8.1 および System.Drawing.Common 4.7.0 が古いと言われた。</p>
                    <p class="note_contents">Visual Studio の GUI でこれらのみ .csproj に入れたところ解決したが、その後、EntityFramework 6.4.4 も古くて非推奨になっていると知った。ソリューションエクスプローラーの「依存関係」のところにより、これが上記の二つのパッケージの古いバージョンを参照していると知った。</p>
                    <p class="note_contents">EntityFramework も「推移的」として入っていて、その依存関係は、「System.Data.SQLite 1.0.119 → System.Data.SQLite.EF6 1.0.119 → EntityFramework」だった。SQLite のもの二つは最新だったが、すでにコードが安定しているのか、「非推奨」なだけで脆弱性は言われていない EntityFramework の最新版への参照に切り替えるためだけにバージョンを上げることはないと判断されたようで、参照が古かった。</p>
                    <p class="note_contents">この場合の解決策は、いつ最新の EntityFramework への参照に更新してくれるか分からない SQLite を待つことなく最新の EntityFramework を参照し、後方互換性で SQLite が動くと期すること。</p>
                    <p class="note_contents">そのため、yyLib.csproj に EntityFramework を入れた。</p>
                    <p class="note_contents">それでも yyChat などが「推移的」の EntityFramework に脆弱性があると言い続けたが、これはプロジェクトのリフレッシュにより直った。build_changed_projects.py にてクリーンアップを行うのが早かった。</p>
                    <p class="note_contents">リビルドでは直らず、yyChat などにも最新の EntityFramework への参照を入れたが、クリーンアップでは直ったので、EntityFramework への参照を消した。</p>
                    <p class="note_contents">今後も、「推移的」なパッケージの脆弱性について言われれば、それを参照する一番上の層のパッケージの最新版を参照してみる。それでダメなら、その参照を消して（ここが重要）、一つ下の層のパッケージの最新版を参照する。そういうことを、脆弱性が言われなくなるまで繰り返す。</p>
                    <p class="note_contents">脆弱性までは言われなくても「非推奨」のパッケージをたまたま目にすれば更新するが、わざわざ探すことは意図的に控える。バグがあれば「脆弱性」が言われる。そうでないなら、最新版より機能が少ない程度のことで、それで困っていない参照元が慌てて最新版を参照する必要性は乏しい。</p>
                    <!-- Task: dbccd229-b619-43d4-b437-ff4f3442d808 -->
                </div>
            </div>
            <div id="9b0abac7-9257-4be5-86d7-cea455fb2b2d" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://learn.microsoft.com/en-us/dotnet/core/compatibility/9.0" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/core/compatibility/9.0</a> をチェック</span>
                    <a href="#9b0abac7-9257-4be5-86d7-cea455fb2b2d" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Breaking changes in .NET 9 | Microsoft Learn</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ザッと目を通した。yyLib に影響のある変更はなさそう。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="0ebc7724-e838-4268-9af3-3fd200627e2a" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ライブラリーの仕様としてどうなのかを全体的にちゃんと見る</span>
                    <a href="#0ebc7724-e838-4268-9af3-3fd200627e2a" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">自分はやはり2000年くらいで設計手法の発展が止まっているようで、世の中は API にあふれているのに知識が乏しいし、API 的なステートレスな実装が内部的にも好まれるのに、複数のクラスが相互依存するステートフルな実装に流れやすい。</p>
                            <p class="note_contents">API を学び、AI とも設計についていろいろと話してきたことで、少しだけだが、設計手法が新しくなってきた。他者のコードを最近よく見るのも影響しているか。Python をやったことも関係していると思う。</p>
                            <p class="note_contents">いずれにせよ、今の見方では古くさい設計が各部にあるだろうから、思いきって直す。残して困らないコードなら後方互換性のために残してフラグをつける。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">各部が何に依存してどういうことをするか、ちゃんと見た。設計の甘いところがいくつかあったが、いずれも致命的でなかった。yyChat などの開発に本格的に着手してよいクオリティー。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="97d1370f-a9ed-4ea7-961c-0c0efc453610" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">コメント内のインデントをなくす</span>
                    <a href="#97d1370f-a9ed-4ea7-961c-0c0efc453610" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">昔やっていたが、今後も続けるのはめんどくさいし、大した効果がない。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="9ceaf264-6bc3-42ac-9994-ae69e2a693d2" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">yyConvertor と yyFormatter が紛らわしいのを改善</span>
                    <a href="#9ceaf264-6bc3-42ac-9994-ae69e2a693d2" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">前者に統合し、メソッド名を整え、全体をチェックした。拡張メソッドを廃止。インテリセンスがうるさくなる。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="5135e59e-774b-4fb2-ac1e-2009cd34ba77" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">&lt;summary&gt; 内で一行に複数の文章を入れているところに改行を入れる</span>
                    <a href="#5135e59e-774b-4fb2-ac1e-2009cd34ba77" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ほかのプロジェクトでも見る。些細なことだが、改行を入れているところとそうでないところがあって、入れているところの方がコードを読みやすい。パッと直せる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">これからつくり込む yyLib と yyChat のみ見た。yyChat には &lt;summary&gt; がまだ一つもなかった。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="098840d2-d602-4e74-9617-f7f775188a64" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ToRoundtripString などを拡張メソッドでないようにする</span>
                    <a href="#098840d2-d602-4e74-9617-f7f775188a64" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="5285a6f8-8c6c-4771-9118-379c95749e0e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://learn.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/9.0/ziparchiveentry-encoding" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/9.0/ziparchiveentry-encoding</a> の影響を調べる</span>
                    <a href="#5285a6f8-8c6c-4771-9118-379c95749e0e" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ほかのプログラムも対象に。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">C:\Repositories のルートで VSC により検索した。七つくらいのプログラムで使われていたが、いずれも古かった。.NET 9 に移行する予定がないため放置。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="604c5ba8-45c6-48b0-a9c4-050a4eeb124e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">yyMail* の翻訳機能の仕様をチェック</span>
                    <a href="#604c5ba8-45c6-48b0-a9c4-050a4eeb124e" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ただの入れ物。メールに属性情報をつける程度のこと。yyMailContact には PreferredLanguages があるが、その値に基づき翻訳が要求されるとか、それが可能なメソッドをかましておけば件名や本文がその言語になるとかの仕様にもなっていない。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">MimeKit の MimeMessage より確実にシリアライゼーションを行える、より生データ的なクラスが欲しくて yyMailMessage をつくっては、todoMail の開発時には、ファイルの添付が必要でなく、MimeMessage をそのまま使ったか。</p>
                            <p class="note_contents">yyMailMessage から MimeMessage への変換には yyLib が今後も責任を負えるため、yyMailMessage &lt;=&gt; JSON という変換で生データ的なものを残し、そこから MimeMessage に変換したものを送るのが、二つの点において優れる。一つは、繰り返しになるが、JSON とのラウンドトリップが確実で、元のデータを確実に復元できること。もう一つは、*.eml の中身になる MIME メッセージと異なり、添付ファイルを外部ファイルへのパスとして扱えることでストレージを効率的に使えること。</p>
                            <p class="note_contents">yyMailMessageAttachment の OriginalFilePath などが全て get; set; なので、パスに規則性を与えておけば、システムの配置場所が変わろうと添付ファイルのロード直前にパスを調整することで問題を回避できる。</p>
                            <p class="note_contents">ただメールを送りたいだけなら MimeMessage をそのまま使っても困らないが、多言語システムにおいて内部的に生成されたメッセージに訳文が添えられ、データベース内でうまく分割されて保存されるにおいて念のため「より生のデータ」を JSON でも残しておきたいなら完璧な仕様になっている。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="dd231e0c-b3fd-41c4-8211-57ecb227cd17" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">enum 関連のところで EnumConverter を使うべきか考える</span>
                    <a href="#dd231e0c-b3fd-41c4-8211-57ecb227cd17" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">現行のコードで問題なし。Enum クラスと EnumConverter クラスの両方のソースコードをザッと見た。厳密にどちらが良いとまでは調べていないが、すぐに EnumConverter に移行するほどの理由は認められなかった。</p>
                            <p class="note_contents"><a href="https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Enum.cs" target="_blank" class="url">https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Enum.cs</a><br />
                                <a href="https://source.dot.net/#System.ComponentModel.TypeConverter/System/ComponentModel/EnumConverter.cs" target="_blank" class="url">https://source.dot.net/#System.ComponentModel.TypeConverter/System/ComponentModel/EnumConverter.cs</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="9784b28f-995a-49f2-a5dc-410c48575c0b" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">yyMail* で translations を件名や本文に反映できるようにする</span>
                    <a href="#9784b28f-995a-49f2-a5dc-410c48575c0b" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">yyMailMessageHelper の Load メソッドが拡張メソッドになっていて、yyMailMessage のデータを MimeMessage に流し込む。重複する項目は上書きされる。ここに Func をかませば、宛先に応じた言語でのメール送信などが可能になる。</p>
                            <p class="note_contents">しかし、Load 自体がシンプルで、Subject, HtmlBody, TextBody それぞれがあれば流し込むだけだ。言語によって件名や本文が切り替わる実装なら、元の言語のデータも近くに転がっていて、必要なら元に戻せるだろうから、Load 直前に Subject などを直接いじればよい。</p>
                            <p class="note_contents">Func をかませるより、「宛先の言語が translations 内にあれば使い、なければ翻訳あるいは元の言語にフォールバックする」というローカルメソッドをつくった方が、より自然なコーディングになりそう。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="dcd291c2-bc9b-445f-9fbc-379408edf186" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">yyMail* のシリアライゼーションを再テスト</span>
                    <a href="#dcd291c2-bc9b-445f-9fbc-379408edf186" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">代わりに yyMailMessage などのコードを全体的に見た。うまくいかない理由がないのでテストを省略。全項目に値を設定するのはめんどくさいし、以前にやった記憶がある。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="df831c1f-54e1-42b0-bf99-2e9646e9f951" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://github.com/openai/openai-dotnet" target="_blank" class="url">https://github.com/openai/openai-dotnet</a> をチェック</span>
                    <a href="#df831c1f-54e1-42b0-bf99-2e9646e9f951" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">2024年の6月に OpenAI が出していた。それ以前には C# の公式のライブラリーがなくて、だから自分で書いた。自分のものも安定しているが、公式には大きく劣るだろう。公式のコードを見て自分のものを改善し、そのうえで今後は公式のものを使うのか、簡単な処理なら糖衣構文をつくりやすい自分のもので済ませるのかを考える。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">まず自分のコードをザッと見たが、仕様書通りの実装が多く、特段ダメなところがない。愛着もあるし、コードが枯れていれば誰にも迷惑をかけないので、OpenAI のコードを参考に、自分のものをより良くする。そこに学びが発生するし、自分のコードを練り上げていくことで、ほかのウェブ関連のコードの質も高まる。</p>
                            <p class="note_contents">ウェブ関連のコードは、その処理時間の99％がネットの速度に依存する。手元でやる処理なんて微々たるものだ。デッドロックが発生しないとか、非同期でも例外をちゃんと拾いきれているとか、ごく稀なイレギュラーな応答に対応しているとかが大丈夫なら、公式のコードがパフォーマンスにおいて圧倒的に秀でるわけでない。画像処理のアルゴリズムを自作するようなのとは大きく異なる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">OpenAI のコードをダウンロードし、めぼしいところを見た。それから自分のコードも再度見直した。</p>
                            <p class="note_contents">OpenAI のものは、全機能をカバーしているし、自分たちが API をつくっていての SDK なのだから、細かい問題への対応力も自分のものより圧倒的に優れる。自分以外がどちらを使うべきかなら、2億％ OpenAI の方だ。他者が自分のものを使う理由は微塵もない。</p>
                            <p class="note_contents">ただ、自分にとっては、「ほとんどが仕様通りのモデルクラスで、それらを投げたり受け取ったりの非同期の処理のみ自分が実装したコードというのは、ものすごくデバッグしやすい。かゆいところに手が届くため、使えば使うほどコードが枯れていく。こちらでは、どんな問題が起こっても、極めてシンプルにその原因を特定できる。そうやって育てていくスタート地点には十分に立っているコードだと改めて思った。</p>
                            <p class="note_contents">結論としては、自分のコードを今後も育てていき、バグが見つかれば OpenAI のコードを参考に直し、yyGpt* をコンパクトで小回りの利くクラスとして枯れさせる。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="bc74acdf-dff5-4c26-834c-dfb65c304a30" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">NuGet のパッケージの参照方法を改める</span>
                    <a href="#bc74acdf-dff5-4c26-834c-dfb65c304a30" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Hoge ライブラリーを Moge アプリが参照するにおいて、Moge 側で「Hoge の DLLを引っ張るな」の指定ができた。それで落ちるのは Hoge が必要な DLL のメソッドが実際に Hoge 経由で Moge により呼ばれたときで、デバッグをちゃんとやっておけば問題ない。</p>
                            <p class="note_contents">一方、Hoge 側で「DLL をアプリ側に送り出すな」的な指定もできるようで、その方が良いかもしれない。「たくさんの DLL を引きずらない」という構成をゴールにするにおいては、蛇口を全て閉めるより元栓を閉める方が自然だ。</p>
                            <p class="note_contents">その上で、それがないとデバッグ時に落ちるものをアプリ側でも NuGet で参照するとか、同時にパッケージをアップデートすることでバージョンを一致させて依存関係の問題が生じないようにするとかが正攻法と思われる。</p>
                            <p class="note_contents">バージョンの一致については、すぐにバイナリーまでアーカイブするため配置において困らないし、Git のログを見ることで同時期にアーカイブしたライブラリーとアプリが分かるため、その組み合わせならビルドが成功するとの保証もある。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">いろいろと試した結論として、ライブラリー側で「送り出すな」の指定をするのをやめておき、アプリ側で必要な場合のみ「送り出されたものを受け入れない」の指定を行う。後者の場合、SQLite でのロギングなど、特定の機能にライブラリー側で参照しているパッケージが必要なら、アプリ側で改めてそれらを参照する。</p>
                            <p class="note_contents">元栓を閉める方がアプリ側での指定を減らせてスマートに思えるが、「不要な DLL がアプリ側に流れ込む」というのと、「必要な DLL がアプリ側にないことで、ロギングなど、特定の場面においてのみ落ちる」というのとでは、ファイルサイズが大きいかシステムが落ちるかということなので、後者の方がダメージが圧倒的に大きい。そして、特定の状況でのみ落ちるというのは、デバッグをしきれないこともある。</p>
                            <p class="note_contents">現時点で yyLib は以下を参照している。</p>
                            <p class="note_contents">* MailKit 4.9.0<br />
                                * Microsoft.Extensions.Configuration 9.0.0<br />
                                * Microsoft.Extensions.Configuration.Json 9.0.0<br />
                                * MimeKit 4.9.0<br />
                                * System.Data.SQLite 1.0.119</p>
                            <p class="note_contents">メールを使わず、appsettings.json などを読まず、SQLite でのロギングを行わないアプリなら、これらは全て不要。デフォルトの JSON でのロギングにはパッケージが不要。</p>
                            <p class="note_contents">よって、yyLib を使うが、JSON でのロギングや yyLib の汎用的なクラス以外は不要というアプリなら、今後もアプリ側で「受け入れない」の指定を行うのが合理的。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">元々は、System.Data.SqlClient 4.8.1 と System.Drawing.Common 4.7.0 が古いと言われ、GUI で調べたところ EntityFramework も古いと出たので、これらの最新版を明示的に参照した。そのことについては、以前のメモに書いた。</p>
                            <p class="note_contents">また、yyLib に画像処理の機能を追加しようとしたようで、SixLabors.ImageSharp 3.1.6 を参照していた。</p>
                            <p class="note_contents">今回の更新で、EntityFramework と ImageSharp への参照を消した。そうしたことで、GUI で開けばまた EntityFramework が古いと言われるのかもしれないが、SQLite のパッケージの更新により解決されるべきことだし、推移的な依存関係において自分が関与しないライブラリーが古いというのは今後も起こりうることなので、積極的に調べたり、古いものの最新版を個別に参照したりをやめておく。リスクの小ささに比して手間が大きく、生産的でないため。自分が参照しているパッケージをマメに更新していれば、いずれは勝手に直ること。</p>
                            <p class="note_contents">ImageSharp は、会社の年商が100万ドルを超えるとライセンス料がかかる認識だ。うちは、会社としてはそれを超える。yyLib などはあくまで個人として開発しているものだが、それをベースに会社のシステムも書けば、あるいは、それをベースにオープンソースのウェブシステムなどを書いてそれを会社で「も」使えば、ライセンス違反だと言われる可能性を否定できない。</p>
                            <p class="note_contents"><a href="https://old.dotnetfoundation.org/blog/2022/10/20/imagesharpupdate" target="_blank" class="url">https://old.dotnetfoundation.org/blog/2022/10/20/imagesharpupdate</a><br />
                                <a href="https://github.com/SixLabors/ImageSharp/blob/main/LICENSE" target="_blank" class="url">https://github.com/SixLabors/ImageSharp/blob/main/LICENSE</a></p>
                            <p class="note_contents">画像処理の機能の追加をやめたのか、ImageSharp への参照をなくしてもコンパイルに失敗しなかった。</p>
                            <p class="note_contents">画像処理においては、Magick.NET も使える。こちらはライセンスに問題がない。DLL ファイルが大きいとか、C++ のバイナリーを .NET から呼ぶ構成になっているためオーバーヘッドが気になるとか、複数の種類があってややこしいとかの認識があるが（間違っている可能性もあるが）、今まで特に困ったことはないので、今後は改めて Magick.NET を優先的に使う。</p>
                            <p class="note_contents">yyLib では今後 ImageSharp を参照しない。yyLib を参照するアプリの側では、Magick.NET ではどうしてもできないことがある場合のみ、ImageSharp の使用を検討する。その場合には、あくまで個人によるプロジェクトであり、なおかつオープンソースであると明言する。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">パッケージの参照については、次のページを参考にした。</p>
                            <p class="note_contents"><a href="https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files" target="_blank" class="url">https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="ab8200c5-5757-47b5-ac45-adc4ecf40ad4" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">System ディレクトリーについて再考</span>
                    <a href="#ab8200c5-5757-47b5-ac45-adc4ecf40ad4" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">.NET の名前空間にならったが、使い方としては「特定の技術や体系に当てはまらないもの」、つまり Misc 的なものになっている。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">環境や「プログラムが動くということ」に関する基本的なクラスの集まりとしては、この名前で悪くない。yyJson だけは気になるが、Json ディレクトリーをすぐにつくる理由はない。これも広い意味で「プログラムが動く」の一部と見なせる。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="bb55d631-474e-478d-9580-0b97a2fda12d" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">デフォルト値を持つコンストラクターをなくす</span>
                    <a href="#bb55d631-474e-478d-9580-0b97a2fda12d" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="8b0d00e8-9537-41a7-9486-eb2ea005c151" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">AnalysisMode を All にしてのコード分析を行う（繰り返す）</span>
                    <a href="#8b0d00e8-9537-41a7-9486-eb2ea005c151" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">しょーもないことが多い。一周見て、どうでもよいものを放置し、よく分からないことを学習する。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">「SQL にユーザーからの入力が入っていないか見ろ」で終わるものなど、有用なものも一部にある。いつも出るとうるさいし、コンパイルが遅くなるので生産性に響くが、たまにチェックするべき価値はあるため、繰り返す。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="aca3def1-2999-45a2-bcf8-a83aed999deb" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">初期化後の元データの変更に対応できない Lazy を探す</span>
                    <a href="#aca3def1-2999-45a2-bcf8-a83aed999deb" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="690f502d-53bb-41ac-886c-73b26cae2ab4" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">特定部分のコードに AI 生成の仕様メモを入れているところを .md ファイルに抜き出す</span>
                    <a href="#690f502d-53bb-41ac-886c-73b26cae2ab4" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="f182a106-97ec-48cb-aa72-f0729acc0e1f" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">パスを扱うところに絶対パスか相対パスかのチェックを入れる</span>
                    <a href="#f182a106-97ec-48cb-aa72-f0729acc0e1f" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="398fe59b-c49e-4bd7-8689-f3267872aa42" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">パスをつなげるところでノーマライズの是非を考える</span>
                    <a href="#398fe59b-c49e-4bd7-8689-f3267872aa42" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="7c865335-68c8-4c25-9ca2-1236009a7dea" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">bool などに三人称の単語を使うのをやめる</span>
                    <a href="#7c865335-68c8-4c25-9ca2-1236009a7dea" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">最近ほとんど見ない。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="5815d111-ac60-489a-9a4f-8c14c342503a" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">GPT、メール、ロギングの設定をファイルからロードできるようにする</span>
                    <a href="#5815d111-ac60-489a-9a4f-8c14c342503a" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="2cdcb2c4-c167-4828-a63e-5c8ee78b448c" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">全てのモデルクラスの nullable について再考</span>
                    <a href="#2cdcb2c4-c167-4828-a63e-5c8ee78b448c" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">コンパイラーはシンプルに「全てのコレクションプロパティーの set を消せ」と言ってくるが、たとえば Hoge がオブジェクトでそれが null になりえるなら、それがリストだというだけで [] での初期化が行われて JSON 側にも空のリストとして入るのは、データ構造についての誤解を生じさせる。かたや、Messages など、API 側で必須とされているものもある。そういったものは確かに set がないのが望ましい。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="0b804b4a-eaea-4c23-b8c6-4b8e166cfd51" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">HTTP の Timeout が関わるところを全て探す</span>
                    <a href="#0b804b4a-eaea-4c23-b8c6-4b8e166cfd51" class="permalink">&infin;</a>
                </div>
            </div>
        </div>
    </body>
</html>
