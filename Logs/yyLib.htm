<!DOCTYPE html>
<html>
    <head>
        <title>yyLib</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style>@import url('https://fonts.googleapis.com/css2?family=M+PLUS+1&family=M+PLUS+1+Code&display=swap');body{margin:0;background-color:#111;color:#ddd;font-family:'M PLUS 1',sans-serif;font-size:1rem;line-height:1.5;overflow-wrap:break-word;word-wrap:break-word}a{color:#69c;text-decoration:underline}a:hover,a:active,a:focus{font-weight:bold}div.task,div.note,div.file,div.image{margin:10px;border:1px solid transparent}div.entries>div.note{border:1px solid #333}div.title{background-color:#538;padding:20px 30px;font-size:2rem;font-weight:bold}a.title{color:#ddd;text-decoration:none}a.title:hover,a.title:active,a.title:focus{text-decoration:underline}div.streaming{background-color:#131}div.streaming:hover{background-color:#353}div.done{background-color:#115}div.done:hover{background-color:#337}div.canceled{background-color:#511}div.canceled:hover{background-color:#733}div.task_contents{margin:10px 15px}span.task_contents{font-weight:bold}a.permalink{visibility:hidden}div.task:hover a.permalink{visibility:visible}div.note{background-color:#111}p.note_contents{margin:15px 20px}div.file{border:1px solid #333;background-color:#111;padding:15px 20px}div.image{border:1px solid #333;background-color:#111;padding:10px}img.image{box-sizing:border-box;vertical-align:top;max-width:100%}div.images{margin:10px;border:1px solid #333;background-color:#111;padding:10px;display:flex;justify-content:flex-start;gap:10px;flex-wrap:wrap}div.images>div.image{margin:0;border-style:none;padding:0}ul.files{margin:10px;border:1px solid #333;background-color:#111;padding-top:15px;padding-inline:40px 15px;padding-bottom:15px}div.note_ai_generated{margin:10px;border:1px solid transparent;background-color:#333}div.note_ai_generated>*{margin:15px 20px}div.note_ai_generated h1{font-size:2rem;font-weight:bold}div.note_ai_generated h2{font-size:1.8rem;font-weight:bold}div.note_ai_generated h3{font-size:1.6rem;font-weight:bold}div.note_ai_generated h4{font-size:1.4rem;font-weight:bold}div.note_ai_generated h5{font-size:1.2rem;font-weight:bold}div.note_ai_generated h6{font-size:1rem;font-weight:bold}pre{background-color:#555;padding:15px 20px;white-space:pre-wrap}code{font-family:'M PLUS 1 Code',monospace}</style>
    </head>
    <body>
        <div class="title">
            <a href="yyLib.htm" class="title">yyLib</a>
        </div>
        <div class="entries">
            <div id="df29e6b3-8273-4dbc-95e6-2a7c24f3d4f8" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">yyGptLib, yyMailLib から流し込んだコードを全体的に洗う</span>
                    <a href="#df29e6b3-8273-4dbc-95e6-2a7c24f3d4f8" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="da0ced64-3364-4c06-8251-a84eba56b797" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">このタスクリストのログが出力されるようにする</span>
                    <a href="#da0ced64-3364-4c06-8251-a84eba56b797" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="e635fabd-ec62-4258-adb8-31c1a5dee77c" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">モデルクラスの作り方についてベストプラクティスを調べる</span>
                    <a href="#e635fabd-ec62-4258-adb8-31c1a5dee77c" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ChatGPT にザッと聞いた。</p>
                            <p class="note_contents">教科書的には、「データベーステーブルをつくるなら NULL になりそうにないもの」を nullable にせず、それで初期値が必要なら required をつけ、set の代わりに init を使い、あるいは record を使い、配列を [] で初期化しておくべき。</p>
                            <p class="note_contents">しかし、それでモデルをつくってデータベースで Id が NULL にならないから required int にするとか、immutability のため init にするとかすれば、そのモデルで API からのレスポンスをデシリアライズするとか、CRUD をつくることになってやっぱり更新もしたくなるとかにおいて、じわじわとモデルが変わっていく。</p>
                            <p class="note_contents">現実的には、API の受け子になりうるものなら nullable を基本とし、よほど理由がない限り get/set でつくり、配列も nullable のまま初期値の null になるに任せるのが良い。</p>
                            <p class="note_contents">データベースの CRUD を高頻度で行うなどの理由があれば Id などが nullable でないモデルの方が処理の無駄を減らせるが、Id が nullable かどうかの差が気になるほどのデータ量なら、そもそもモデルにデータベースのデータをキャッシュしない。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="fdcbc6e8-5e69-4c9a-bd56-53b808eaff4e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">モデルクラスの nullable について再確認し、コードを全体的に見直す</span>
                    <a href="#fdcbc6e8-5e69-4c9a-bd56-53b808eaff4e" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">いずれも汎用性の高いモデルになっている。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="b9c06a6a-1291-4645-bc86-dc5df6737cf6" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ライブラリーの統合による依存関係の問題を解消</span>
                    <a href="#b9c06a6a-1291-4645-bc86-dc5df6737cf6" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">更新履歴のため、GitHub 側のレポジトリーを残し、ローカルのものを消す。それでもビルドに失敗してくれる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">yyGptLib と yyMailLib を使うのは yyTodoMail だけだったので、それがビルドされるようにして最新版のアーカイブをつくった。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="d0cf8ea3-e74e-4d44-b740-30ce52f2e2c9" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">SQLite へのログの出力を可能にする</span>
                    <a href="#d0cf8ea3-e74e-4d44-b740-30ce52f2e2c9" class="permalink">&infin;</a>
                </div>
            </div>
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">うろ覚えだが、NuGet 関連の右往左往についてメモを残す。</p>
                    <p class="note_contents">build_changed_projects.py にて NuGet の更新を行ったところ、yyLib の System.Data.SqlClient 4.8.1 および System.Drawing.Common 4.7.0 が古いと言われた。</p>
                    <p class="note_contents">Visual Studio の GUI でこれらのみ .csproj に入れたところ解決したが、その後、EntityFramework 6.4.4 も古くて非推奨になっていると知った。ソリューションエクスプローラーの「依存関係」のところにより、これが上記の二つのパッケージの古いバージョンを参照していると知った。</p>
                    <p class="note_contents">EntityFramework も「推移的」として入っていて、その依存関係は、「System.Data.SQLite 1.0.119 → System.Data.SQLite.EF6 1.0.119 → EntityFramework」だった。SQLite のもの二つは最新だったが、すでにコードが安定しているのか、「非推奨」なだけで脆弱性は言われていない EntityFramework の最新版への参照に切り替えるためだけにバージョンを上げることはないと判断されたようで、参照が古かった。</p>
                    <p class="note_contents">この場合の解決策は、いつ最新の EntityFramework への参照に更新してくれるか分からない SQLite を待つことなく最新の EntityFramework を参照し、後方互換性で SQLite が動くと期すること。</p>
                    <p class="note_contents">そのため、yyLib.csproj に EntityFramework を入れた。</p>
                    <p class="note_contents">それでも yyChat などが「推移的」の EntityFramework に脆弱性があると言い続けたが、これはプロジェクトのリフレッシュにより直った。build_changed_projects.py にてクリーンアップを行うのが早かった。</p>
                    <p class="note_contents">リビルドでは直らず、yyChat などにも最新の EntityFramework への参照を入れたが、クリーンアップでは直ったので、EntityFramework への参照を消した。</p>
                    <p class="note_contents">今後も、「推移的」なパッケージの脆弱性について言われれば、それを参照する一番上の層のパッケージの最新版を参照してみる。それでダメなら、その参照を消して（ここが重要）、一つ下の層のパッケージの最新版を参照する。そういうことを、脆弱性が言われなくなるまで繰り返す。</p>
                    <p class="note_contents">脆弱性までは言われなくても「非推奨」のパッケージをたまたま目にすれば更新するが、わざわざ探すことは意図的に控える。バグがあれば「脆弱性」が言われる。そうでないなら、最新版より機能が少ない程度のことで、それで困っていない参照元が慌てて最新版を参照する必要性は乏しい。</p>
                    <!-- Task: dbccd229-b619-43d4-b437-ff4f3442d808 -->
                </div>
            </div>
            <div id="9b0abac7-9257-4be5-86d7-cea455fb2b2d" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://learn.microsoft.com/en-us/dotnet/core/compatibility/9.0" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/core/compatibility/9.0</a> をチェック</span>
                    <a href="#9b0abac7-9257-4be5-86d7-cea455fb2b2d" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Breaking changes in .NET 9 | Microsoft Learn</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ザッと目を通した。yyLib に影響のある変更はなさそう。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="9ceaf264-6bc3-42ac-9994-ae69e2a693d2" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">yyConvertor と yyFormatter が紛らわしいのを改善</span>
                    <a href="#9ceaf264-6bc3-42ac-9994-ae69e2a693d2" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">前者に統合し、メソッド名を整え、全体をチェックした。拡張メソッドを廃止。インテリセンスがうるさくなる。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="bc74acdf-dff5-4c26-834c-dfb65c304a30" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">NuGet のパッケージの参照方法を改める</span>
                    <a href="#bc74acdf-dff5-4c26-834c-dfb65c304a30" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Hoge ライブラリーを Moge アプリが参照するにおいて、Moge 側で「Hoge の DLLを引っ張るな」の指定ができた。それで落ちるのは Hoge が必要な DLL のメソッドが実際に Hoge 経由で Moge により呼ばれたときで、デバッグをちゃんとやっておけば問題ない。</p>
                            <p class="note_contents">一方、Hoge 側で「DLL をアプリ側に送り出すな」的な指定もできるようで、その方が良いかもしれない。「たくさんの DLL を引きずらない」という構成をゴールにするにおいては、蛇口を全て閉めるより元栓を閉める方が自然だ。</p>
                            <p class="note_contents">その上で、それがないとデバッグ時に落ちるものをアプリ側でも NuGet で参照するとか、同時にパッケージをアップデートすることでバージョンを一致させて依存関係の問題が生じないようにするとかが正攻法と思われる。</p>
                            <p class="note_contents">バージョンの一致については、すぐにバイナリーまでアーカイブするため配置において困らないし、Git のログを見ることで同時期にアーカイブしたライブラリーとアプリが分かるため、その組み合わせならビルドが成功するとの保証もある。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">いろいろと試した結論として、ライブラリー側で「送り出すな」の指定をするのをやめておき、アプリ側で必要な場合のみ「送り出されたものを受け入れない」の指定を行う。後者の場合、SQLite でのロギングなど、特定の機能にライブラリー側で参照しているパッケージが必要なら、アプリ側で改めてそれらを参照する。</p>
                            <p class="note_contents">元栓を閉める方がアプリ側での指定を減らせてスマートに思えるが、「不要な DLL がアプリ側に流れ込む」というのと、「必要な DLL がアプリ側にないことで、ロギングなど、特定の場面においてのみ落ちる」というのとでは、ファイルサイズが大きいかシステムが落ちるかということなので、後者の方がダメージが圧倒的に大きい。そして、特定の状況でのみ落ちるというのは、デバッグをしきれないこともある。</p>
                            <p class="note_contents">現時点で yyLib は以下を参照している。</p>
                            <p class="note_contents">* MailKit 4.9.0<br />
                                * Microsoft.Extensions.Configuration 9.0.0<br />
                                * Microsoft.Extensions.Configuration.Json 9.0.0<br />
                                * MimeKit 4.9.0<br />
                                * System.Data.SQLite 1.0.119</p>
                            <p class="note_contents">メールを使わず、appsettings.json などを読まず、SQLite でのロギングを行わないアプリなら、これらは全て不要。デフォルトの JSON でのロギングにはパッケージが不要。</p>
                            <p class="note_contents">よって、yyLib を使うが、JSON でのロギングや yyLib の汎用的なクラス以外は不要というアプリなら、今後もアプリ側で「受け入れない」の指定を行うのが合理的。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">元々は、System.Data.SqlClient 4.8.1 と System.Drawing.Common 4.7.0 が古いと言われ、GUI で調べたところ EntityFramework も古いと出たので、これらの最新版を明示的に参照した。そのことについては、以前のメモに書いた。</p>
                            <p class="note_contents">また、yyLib に画像処理の機能を追加しようとしたようで、SixLabors.ImageSharp 3.1.6 を参照していた。</p>
                            <p class="note_contents">今回の更新で、EntityFramework と ImageSharp への参照を消した。そうしたことで、GUI で開けばまた EntityFramework が古いと言われるのかもしれないが、SQLite のパッケージの更新により解決されるべきことだし、推移的な依存関係において自分が関与しないライブラリーが古いというのは今後も起こりうることなので、積極的に調べたり、古いものの最新版を個別に参照したりをやめておく。リスクの小ささに比して手間が大きく、生産的でないため。自分が参照しているパッケージをマメに更新していれば、いずれは勝手に直ること。</p>
                            <p class="note_contents">ImageSharp は、会社の年商が100万ドルを超えるとライセンス料がかかる認識だ。うちは、会社としてはそれを超える。yyLib などはあくまで個人として開発しているものだが、それをベースに会社のシステムも書けば、あるいは、それをベースにオープンソースのウェブシステムなどを書いてそれを会社で「も」使えば、ライセンス違反だと言われる可能性を否定できない。</p>
                            <p class="note_contents"><a href="https://old.dotnetfoundation.org/blog/2022/10/20/imagesharpupdate" target="_blank" class="url">https://old.dotnetfoundation.org/blog/2022/10/20/imagesharpupdate</a><br />
                                <a href="https://github.com/SixLabors/ImageSharp/blob/main/LICENSE" target="_blank" class="url">https://github.com/SixLabors/ImageSharp/blob/main/LICENSE</a></p>
                            <p class="note_contents">画像処理の機能の追加をやめたのか、ImageSharp への参照をなくしてもコンパイルに失敗しなかった。</p>
                            <p class="note_contents">画像処理においては、Magick.NET も使える。こちらはライセンスに問題がない。DLL ファイルが大きいとか、C++ のバイナリーを .NET から呼ぶ構成になっているためオーバーヘッドが気になるとか、複数の種類があってややこしいとかの認識があるが（間違っている可能性もあるが）、今まで特に困ったことはないので、今後は改めて Magick.NET を優先的に使う。</p>
                            <p class="note_contents">yyLib では今後 ImageSharp を参照しない。yyLib を参照するアプリの側では、Magick.NET ではどうしてもできないことがある場合のみ、ImageSharp の使用を検討する。その場合には、あくまで個人によるプロジェクトであり、なおかつオープンソースであると明言する。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">パッケージの参照については、次のページを参考にした。</p>
                            <p class="note_contents"><a href="https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files" target="_blank" class="url">https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="8b0d00e8-9537-41a7-9486-eb2ea005c151" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">AnalysisMode を All にしてのコード分析を行う（繰り返す）</span>
                    <a href="#8b0d00e8-9537-41a7-9486-eb2ea005c151" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">しょーもないことが多い。一周見て、どうでもよいものを放置し、よく分からないことを学習する。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">「SQL にユーザーからの入力が入っていないか見ろ」で終わるものなど、有用なものも一部にある。いつも出るとうるさいし、コンパイルが遅くなるので生産性に響くが、たまにチェックするべき価値はあるため、繰り返す。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="5815d111-ac60-489a-9a4f-8c14c342503a" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">GPT、メール、ロギングの設定をファイルからロードできるようにする</span>
                    <a href="#5815d111-ac60-489a-9a4f-8c14c342503a" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="20378873-cbd1-41fa-8848-006e1b0aaf22" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">yyGptUtility のうち画像をダウンロードするメソッドを single responsibility にする</span>
                    <a href="#20378873-cbd1-41fa-8848-006e1b0aaf22" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Select 内での非同期処理がどうしても気になる。実装としては正しいはずだが、タイムアウトもあってどういうタイミングで例外が飛んでくるか分からない処理を非同期で同時に複数やっては、エラーがあったときの対応力がかなり制限される。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">yyWeb または yyHttp をつくり、非同期でファイルをダウンロードするメソッドを用意し、それと組み合わせてのダウンロードの例を GptTester に入れるか。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="8f7a1dce-d219-4b21-aa97-451ad8bc51f7" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">yyGpt* クラスで o1, audio, tools に対応 → tools を見送った</span>
                    <a href="#8f7a1dce-d219-4b21-aa97-451ad8bc51f7" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">localGpt の開発に着手しては、yyLib 側でなんとなく o1 も試したところ、system が developer になっていたなど、些細な違いにより動かなかった。直したところ、簡単に動いた。chunks でも動いた。それからドキュメントを精査したところ、ほかにも変わっているところがあった。先ほどそれらをチェックし、タスク化した。全て実装すれば、o1, audio, tools への対応が完了する。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">tools のみ今すぐに必要と感じられず手を抜いた。API のドキュメントとの整合性をチェックしたが、テストコードを書いていない。必要になってから問題が見つかれば直す。それ以外は大丈夫。</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
