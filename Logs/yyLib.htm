<!DOCTYPE html>
<html>
    <head>
        <title>yyLib</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style>@import url('https://fonts.googleapis.com/css2?family=M+PLUS+1&family=M+PLUS+1+Code&display=swap');body{margin:0;background-color:#111;color:#ddd;font-family:'M PLUS 1',sans-serif;font-size:1rem;line-height:1.5;overflow-wrap:break-word;word-wrap:break-word}a{color:#69c;text-decoration:underline}a:hover,a:active,a:focus{font-weight:bold}div.task,div.note,div.file,div.image{margin:10px;border:1px solid transparent}div.entries>div.note{border:1px solid #333}div.title{background-color:#538;padding:20px 30px;font-size:2rem;font-weight:bold}a.title{color:#ddd;text-decoration:none}a.title:hover,a.title:active,a.title:focus{text-decoration:underline}div.streaming{background-color:#131}div.streaming:hover{background-color:#353}div.done{background-color:#115}div.done:hover{background-color:#337}div.canceled{background-color:#511}div.canceled:hover{background-color:#733}div.task_contents{margin:10px 15px}span.task_contents{font-weight:bold}a.permalink{visibility:hidden}div.task:hover a.permalink{visibility:visible}div.note{background-color:#111}p.note_contents{margin:15px 20px}div.file{border:1px solid #333;background-color:#111;padding:15px 20px}div.image{border:1px solid #333;background-color:#111;padding:10px}img.image{box-sizing:border-box;vertical-align:top;max-width:100%}div.images{margin:10px;border:1px solid #333;background-color:#111;padding:10px;display:flex;justify-content:flex-start;gap:10px;flex-wrap:wrap}div.images>div.image{margin:0;border-style:none;padding:0}ul.files{margin:10px;border:1px solid #333;background-color:#111;padding-top:15px;padding-inline:40px 15px;padding-bottom:15px}div.note_ai_generated{margin:10px;border:1px solid transparent;background-color:#333}div.note_ai_generated>*{margin:15px 20px}div.note_ai_generated h1{font-size:2rem;font-weight:bold}div.note_ai_generated h2{font-size:1.8rem;font-weight:bold}div.note_ai_generated h3{font-size:1.6rem;font-weight:bold}div.note_ai_generated h4{font-size:1.4rem;font-weight:bold}div.note_ai_generated h5{font-size:1.2rem;font-weight:bold}div.note_ai_generated h6{font-size:1rem;font-weight:bold}pre{background-color:#555;padding:15px 20px;white-space:pre-wrap}code{font-family:'M PLUS 1 Code',monospace}</style>
    </head>
    <body>
        <div class="title">
            <a href="yyLib.htm" class="title">yyLib</a>
        </div>
        <div class="entries">
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">Nekote というものを1年くらいダラダラと開発したが、ASP.NET Core をいじり、EF Core と Identity を学んで JWT ベースの API を作ってみて、また、ChatGPT や GitHub Copilot をそれなりに使えるようになり、おまけに「やっぱり一人で何でも作るのは限界があるから、ゆくゆくは会社を作ろう」「少なくとも、それが可能な開発を今から心掛けよう」と思っては、「いろいろと不適合の Nekote を無理やり改修するより書き直してしまった方が早い」の状況に陥り、サクッと書き直しを決めた。</p>
                    <!-- Task: 981121c1-67e3-46e3-9d0b-d706775f9018 -->
                </div>
            </div>
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">これまではコンソールアプリがほとんどで、それも Windows だけを想定したもので、たまに WPF アプリも書く程度だった。これからは、ASP.NET Core のウェブアプリや API を中心に、GUI が必要なら .NET MAUI を使う。コンソールアプリの開発においても、よほどの理由がない限り、Mac でも動くようにする。その点においても、Nekote の古い設計では、もうやっていけない。</p>
                    <!-- Task: 981121c1-67e3-46e3-9d0b-d706775f9018 -->
                </div>
            </div>
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">一気に全てを作り直すことはできないので、もう13年くらいになる taskKiller を初期的な開発に使うのは今後も続ける。しかし、そちらはあくまで TODO リストとし、コードを理解するにおける重要なコメントやメモがそちらに埋没するのを今よりは減らす。ゼロにはできないし、そこにこだわる利益もないが、今までのように「基本何でも taskKiller のメモに」はすぐにやめる。</p>
                    <!-- Task: 981121c1-67e3-46e3-9d0b-d706775f9018 -->
                </div>
            </div>
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">一つどうしてもやりたいのは、一つ前のメモに書いた「コメントやメモ」の全てを英語と日本語の両方で残すこと。その徹底に加えて Twitter などで英語で発信すれば、同じくらいのレベルの開発者とつながれる可能性が高い。</p>
                    <p class="note_contents">それに加えては、少子化のエグい日本で英語力も海外経験も豊富な開発者を探すと目玉どころか脳みそまで飛び出るようなお金が必要になるため、億単位の数の若者がいるアジアから開発者を探せるようにしておきたいというのも大きい。</p>
                    <!-- Task: 981121c1-67e3-46e3-9d0b-d706775f9018 -->
                </div>
            </div>
            <div class="note">
                <div class="note_contents">
                    <p class="note_contents">モジュールの疎結合も徹底したい。SOLID のうち single-responsibility principle を特に重視する。そうすることで各部の仕様が分かりやすくなり、自分以外の派生開発が容易になる。端的には、「ここを直しといて」と言いやすい単位に分割する。</p>
                    <p class="note_contents">SOLID についてこの機会にちょっと復習してもよさそうだ。</p>
                    <!-- Task: 981121c1-67e3-46e3-9d0b-d706775f9018 -->
                </div>
            </div>
            <div id="211517c9-db16-4290-924f-f936da6aa5c3" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">クラスやその内容の名前だけで「仕様としてどうか」を AI に問えるか調べる</span>
                    <a href="#211517c9-db16-4290-924f-f936da6aa5c3" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">これが可能なら、まずハリボテのクラスを多数用意し、どれがどれを使うかも全体的に考えた上、Copilot で一気に実装することも可能かもしれない。</p>
                            <p class="note_contents">自分は、目の前の課題に必要な機能のみライブラリーに実装し、確定コードに持ち込み、その後、ほかでも必要になっては互換性を保ちながら派生開発を行い……といった作業による後戻りのコストが大きくなりがち。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Copilot のチャットでだいたい可能。ただ、一つひとつ開くのがめんどくさい。全てのソースファイルを ChatGPT に放り込むツールをいずれ書いてもよい。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="5360ce97-cec3-4471-b7d1-8e67c2d746c6" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">クラスライブラリーの開発への AI の活用についていろいろと調べる</span>
                    <a href="#5360ce97-cec3-4471-b7d1-8e67c2d746c6" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">もっと広く情報を集める必要がある。大勢がすでにやっていることだろうから、ノウハウはどこにでもあるだろう。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="f4f0caae-781e-4b4a-8875-7ae7c85eeb58" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">SOLID 準拠の設計に AI がどのくらい役立つか調べる</span>
                    <a href="#f4f0caae-781e-4b4a-8875-7ae7c85eeb58" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Copilot に聞けば、SOLID かどうか教えてくれる。自分でもだいたい分かってきた。100％を目指すことは難しいが、だいたいならできている。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="ca81a12a-c93f-4660-a62e-333953d2a7dc" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">SOLID について復習</span>
                    <a href="#ca81a12a-c93f-4660-a62e-333953d2a7dc" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">The SOLID Principles of Object-Oriented Programming Explained in Plain English<br />
                                <a href="https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english/" target="_blank" class="url">https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english/</a></p>
                            <p class="note_contents">A Solid Guide to SOLID Principles | Baeldung<br />
                                <a href="https://www.baeldung.com/solid-principles" target="_blank" class="url">https://www.baeldung.com/solid-principles</a></p>
                            <p class="note_contents">SOLID Design Principles in Software Development<br />
                                <a href="https://www.freecodecamp.org/news/solid-design-principles-in-software-development/" target="_blank" class="url">https://www.freecodecamp.org/news/solid-design-principles-in-software-development/</a></p>
                            <p class="note_contents">The S.O.L.I.D Principles in Pictures | by Ugonna Thelma | Backticks &amp; Tildes | Medium<br />
                                <a href="https://medium.com/backticks-tildes/the-s-o-l-i-d-principles-in-pictures-b34ce2f1e898" target="_blank" class="url">https://medium.com/backticks-tildes/the-s-o-l-i-d-principles-in-pictures-b34ce2f1e898</a></p>
                            <p class="note_contents">Why SOLID principles are still the foundation for modern software architecture - Stack Overflow<br />
                                <a href="https://stackoverflow.blog/2021/11/01/why-solid-principles-are-still-the-foundation-for-modern-software-architecture/" target="_blank" class="url">https://stackoverflow.blog/2021/11/01/why-solid-principles-are-still-the-foundation-for-modern-software-architecture/</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="d3de44d9-4805-4726-b51e-abc8cdc3e54f" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">各部が SOLID にだいたい準拠しているか調べる（たまに繰り返す）</span>
                    <a href="#d3de44d9-4805-4726-b51e-abc8cdc3e54f" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">教科書を書くのでないので100％を目指さない。だいたいでよいと思う。しかし、それなりにしっかりと。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="2e5ae176-e390-4337-a05d-b723d586faef" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">yySimpleLogger で種類を扱えるようにする</span>
                    <a href="#2e5ae176-e390-4337-a05d-b723d586faef" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">既存のコードへの影響を調べる。指定なしなら Info へのフォールバック？ LINQ で絞り込めると便利。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">やめておく。simple でなくなる。</p>
                            <p class="note_contents">すでに Message や Exception といった文字列をキーにすることで最低限の分類をできている。そこに yyTodoMail では Translation RawContent というのも入る。そのアプリ内でユニークな文字列がキーになっているなら、解析上の不都合がない。</p>
                            <p class="note_contents">いくつかのシステムのログをサーバー上で一カ所に集めるとか、分散しているものをクライアントが集めてきてまとめて処理するとかなら level のようなもので絞り込めた方が便利だ。</p>
                            <p class="note_contents">一方、SimpleLogger は、あくまで「とても小さなアプリのための、とてもシンプルなロギング」という位置づけである。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="3a7c2b94-c686-4d01-8208-648ff2663ff7" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">AppData ディレクトリー内の Local, LocalLow, Roaming の使い分けを考える</span>
                    <a href="#3a7c2b94-c686-4d01-8208-648ff2663ff7" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <div class="note_ai_generated">
<p>The <code>AppData</code> directory in Windows is a hidden folder that stores application-specific data. It's divided into three main subfolders: <code>Local</code>, <code>LocalLow</code>, and <code>Roaming</code>. Here's how they are generally used:</p>
<ol>
<li><p><strong>AppData\Roaming</strong>: This directory is used for data that can be moved with a user's profile between different machines, like when you're part of a domain network. Settings and configuration files that should be consistent across multiple machines for a user are typically stored here. For example, Microsoft Office stores its configuration files here.</p>
</li>
<li><p><strong>AppData\Local</strong>: This directory is intended for data that is specific to a single computer and should not move with the user's profile. It's used for data that is too large or not useful on other machines. For instance, a browser might store its cache here.</p>
</li>
<li><p><strong>AppData\LocalLow</strong>: This is similar to <code>Local</code> but is specifically for programs that run with lower security settings, like Internet Explorer in Protected Mode. It's less commonly used than the other two folders.</p>
</li>
</ol>
<h3>Best Practices:</h3>
<ul>
<li>Use <code>Roaming</code> for user-specific data that is relevant across multiple machines.</li>
<li>Use <code>Local</code> for machine-specific or large data that doesn't need to be transferred.</li>
<li>Generally, avoid directly manipulating these folders unless necessary for application functionality, as improper use can lead to issues with software behavior or user profiles.</li>
<li>For developers, it's important to respect the user's directory structure and privacy, only storing necessary data and following security best practices.</li>
</ul>
                            </div>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">というのを知らなかった。忘れる前にライブラリーに組み込む。ユーザーごとのディレクトリーにローカルの設定情報などを保存しなければならないケースは今後も多々ある。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="eb4d51a4-bdf8-43f9-89ca-7facbccf152e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">コーディングのガイドラインに準拠しているか調べる</span>
                    <a href="#eb4d51a4-bdf8-43f9-89ca-7facbccf152e" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="326f0c8f-19af-42c1-8299-84ca3b61d9f1" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">srcZip の設定ファイルを追加</span>
                    <a href="#326f0c8f-19af-42c1-8299-84ca3b61d9f1" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="8d049801-6dbf-472e-9865-1ccf4c65f626" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">yyMessage クラスをなくす</span>
                    <a href="#8d049801-6dbf-472e-9865-1ccf4c65f626" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">yyLib の例外クラスに message を指定するにおいて不可欠のクラスにしているが、ログ出力では不要だし、コンソールや MessageBpx でも不要。不完全な運用になっている。それぞれに糖衣構文的なものを用意することも可能だが、うっかりすると、そうでないものを使ってしまう。徹底しないと効果が半減する。徹底するとチェックの時間コストがかさむ。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="107f4c09-8f74-481a-b403-98cc12b70c78" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">v0.1 としてアーカイブ</span>
                    <a href="#107f4c09-8f74-481a-b403-98cc12b70c78" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="341f7efb-e006-4f73-9760-515ce2c0e3d0" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">文字列を段落に分けるメソッドを追加</span>
                    <a href="#341f7efb-e006-4f73-9760-515ce2c0e3d0" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="16864810-2374-4445-b95a-7e44ede3f18e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">文字列の最適化のメソッドを追加</span>
                    <a href="#16864810-2374-4445-b95a-7e44ede3f18e" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="91e71911-0341-40fe-9241-fb9ff43490af" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">スクリプトでコンパイルとアーカイブをできるようにする</span>
                    <a href="#91e71911-0341-40fe-9241-fb9ff43490af" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="82625a02-bb3b-416a-bdb3-e795822cc4b6" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">プロダクトとしての完全性を高める</span>
                    <a href="#82625a02-bb3b-416a-bdb3-e795822cc4b6" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ちょっと Python をさわった。ビルドしなくても走るのが衝撃だった。橋が落ちていても、そこに到達するまでは全速力で走るかのようで、やっぱり予想通りのところで落ちる。走る前に型の照合などにより、ある程度のチェックを行いたい自分としては、スペルミスがあっても起動できる Python には違和感があった。</p>
                            <p class="note_contents">ただ、習得も開発も早かった。試行錯誤のイテレーションが爆速だ。ビルドというめんどくさい作業が必ず入る前提で毎回ある程度のクオリティーのコードを書こうとしてしまわないことのメリットが際立っていた。</p>
                            <p class="note_contents">.NET では、A が B に依存し、B が C に依存していれば、まず C をつくり、ビルドし、次に B をビルドし、最後に A をビルドし、それでようやく A を起動できる。思いのほか C の更新が大きくなったなどですぐにはビルドできない状態なら、B と A の開発が止まる。もちろん仮のコードを書いておく程度のことはできるが、動かしてみての仮確定ができないので、どうしても、まず C をビルドしたいという気持ちが生じる。</p>
                            <p class="note_contents">といった非効率性を build_changed_projects.py により劇的に軽減できた。まだアーカイブが作成されていないプロジェクト、つまりは更新中のものを特定し、それぞれの依存関係を分析し、必要なものだけを最適な順序でビルドしてくれる。</p>
                            <p class="note_contents">これからは、ある程度のクオリティーのコードを考えるというより、試行錯誤のイテレーションを爆速で回し、見つかっている問題を即座に修正するという、まさしくアジャイルな開発が可能だ。</p>
                            <p class="note_contents">そのため、このタスクを廃止する。多少なりとも全体的なチェックを意識させるタスクは、これからの開発のワークフローと整合しない。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="f1482e7e-09f0-44b4-8c3a-95ab63e38177" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">[2/2] コーディングのガイドラインに準拠しているか調べる</span>
                    <a href="#f1482e7e-09f0-44b4-8c3a-95ab63e38177" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ある程度は意識しているが、気づいたときに直すのもアリだ。ここにこだわって全体をチェックするたびに開発が止まる。</p>
                            <p class="note_contents">VSC だと検索が高速だし、検索結果をその場で消していけるので、タスクリスト的な使い方もできる。</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
