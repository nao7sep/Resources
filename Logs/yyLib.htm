<!DOCTYPE html>
<html>
    <head>
        <title>yyLib</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style>@import url('https://fonts.googleapis.com/css2?family=M+PLUS+1&family=M+PLUS+1+Code&display=swap');body{margin:0;background-color:#111;color:#ddd;font-family:'M PLUS 1',sans-serif;font-size:1rem;line-height:1.5;overflow-wrap:break-word;word-wrap:break-word}a{color:#69c;text-decoration:underline}a:hover,a:active,a:focus{font-weight:bold}div.task,div.note,div.file,div.image{margin:10px;border:1px solid transparent}div.entries>div.note{border:1px solid #333}div.title{background-color:#538;padding:20px 30px;font-size:2rem;font-weight:bold}a.title{color:#ddd;text-decoration:none}a.title:hover,a.title:active,a.title:focus{text-decoration:underline}div.streaming{background-color:#131}div.streaming:hover{background-color:#353}div.done{background-color:#115}div.done:hover{background-color:#337}div.canceled{background-color:#511}div.canceled:hover{background-color:#733}div.task_contents{margin:10px 15px}span.task_contents{font-weight:bold}a.permalink{visibility:hidden}div.task:hover a.permalink{visibility:visible}div.note{background-color:#111}p.note_contents{margin:15px 20px}div.file{border:1px solid #333;background-color:#111;padding:15px 20px}div.image{border:1px solid #333;background-color:#111;padding:10px}img.image{box-sizing:border-box;vertical-align:top;max-width:100%}div.images{margin:10px;border:1px solid #333;background-color:#111;padding:10px;display:flex;justify-content:flex-start;gap:10px;flex-wrap:wrap}div.images>div.image{margin:0;border-style:none;padding:0}ul.files{margin:10px;border:1px solid #333;background-color:#111;padding-top:15px;padding-inline:40px 15px;padding-bottom:15px}div.note_ai_generated{margin:10px;border:1px solid transparent;background-color:#333}div.note_ai_generated>*{margin:15px 20px}div.note_ai_generated h1{font-size:2rem;font-weight:bold}div.note_ai_generated h2{font-size:1.8rem;font-weight:bold}div.note_ai_generated h3{font-size:1.6rem;font-weight:bold}div.note_ai_generated h4{font-size:1.4rem;font-weight:bold}div.note_ai_generated h5{font-size:1.2rem;font-weight:bold}div.note_ai_generated h6{font-size:1rem;font-weight:bold}pre{background-color:#555;padding:15px 20px;white-space:pre-wrap}code{font-family:'M PLUS 1 Code',monospace}</style>
    </head>
    <body>
        <div class="title">
            <a href="yyLib.htm" class="title">yyLib</a>
        </div>
        <div class="entries">
            <div id="df29e6b3-8273-4dbc-95e6-2a7c24f3d4f8" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">yyGptLib, yyMailLib から流し込んだコードを全体的に洗う</span>
                    <a href="#df29e6b3-8273-4dbc-95e6-2a7c24f3d4f8" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="da0ced64-3364-4c06-8251-a84eba56b797" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">このタスクリストのログが出力されるようにする</span>
                    <a href="#da0ced64-3364-4c06-8251-a84eba56b797" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="e635fabd-ec62-4258-adb8-31c1a5dee77c" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">モデルクラスの作り方についてベストプラクティスを調べる</span>
                    <a href="#e635fabd-ec62-4258-adb8-31c1a5dee77c" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ChatGPT にザッと聞いた。</p>
                            <p class="note_contents">教科書的には、「データベーステーブルをつくるなら NULL になりそうにないもの」を nullable にせず、それで初期値が必要なら required をつけ、set の代わりに init を使い、あるいは record を使い、配列を [] で初期化しておくべき。</p>
                            <p class="note_contents">しかし、それでモデルをつくってデータベースで Id が NULL にならないから required int にするとか、immutability のため init にするとかすれば、そのモデルで API からのレスポンスをデシリアライズするとか、CRUD をつくることになってやっぱり更新もしたくなるとかにおいて、じわじわとモデルが変わっていく。</p>
                            <p class="note_contents">現実的には、API の受け子になりうるものなら nullable を基本とし、よほど理由がない限り get/set でつくり、配列も nullable のまま初期値の null になるに任せるのが良い。</p>
                            <p class="note_contents">データベースの CRUD を高頻度で行うなどの理由があれば Id などが nullable でないモデルの方が処理の無駄を減らせるが、Id が nullable かどうかの差が気になるほどのデータ量なら、そもそもモデルにデータベースのデータをキャッシュしない。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="fdcbc6e8-5e69-4c9a-bd56-53b808eaff4e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">モデルクラスの nullable について再確認し、コードを全体的に見直す</span>
                    <a href="#fdcbc6e8-5e69-4c9a-bd56-53b808eaff4e" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">いずれも汎用性の高いモデルになっている。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="b9c06a6a-1291-4645-bc86-dc5df6737cf6" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ライブラリーの統合による依存関係の問題を解消</span>
                    <a href="#b9c06a6a-1291-4645-bc86-dc5df6737cf6" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">更新履歴のため、GitHub 側のレポジトリーを残し、ローカルのものを消す。それでもビルドに失敗してくれる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">yyGptLib と yyMailLib を使うのは yyTodoMail だけだったので、それがビルドされるようにして最新版のアーカイブをつくった。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="d0cf8ea3-e74e-4d44-b740-30ce52f2e2c9" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">SQLite へのログの出力を可能にする</span>
                    <a href="#d0cf8ea3-e74e-4d44-b740-30ce52f2e2c9" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="eca1cdfd-ecf9-46e3-b2c3-45a2fad057c5" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">yyGpt* クラスの使い方が分かるサンプルコードを追加</span>
                    <a href="#eca1cdfd-ecf9-46e3-b2c3-45a2fad057c5" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">古いレポジトリーをサーバー側に残すので、そこのコードへのリンクを張った。Mail の方とセットで見た。どちらも良好に書けていて、ライブラリー側の仕様も理にかなっている。ほかで使いやすそうで、十分な拡張性も期待できる。</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
