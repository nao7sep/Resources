<!DOCTYPE html>
<html>
    <head>
        <title>ドキュメント</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style>@import url('https://fonts.googleapis.com/css2?family=M+PLUS+1&family=M+PLUS+1+Code&display=swap');body{margin:0;background-color:#111;color:#ddd;font-family:'M PLUS 1',sans-serif;font-size:1rem;line-height:1.5;overflow-wrap:break-word;word-wrap:break-word}a{color:#69c;text-decoration:underline}a:hover,a:active,a:focus{font-weight:bold}div.task,div.note,div.file,div.image{margin:10px;border:1px solid transparent}div.entries>div.note{border:1px solid #333}div.title{background-color:#538;padding:20px 30px;font-size:2rem;font-weight:bold}a.title{color:#ddd;text-decoration:none}a.title:hover,a.title:active,a.title:focus{text-decoration:underline}div.streaming{background-color:#131}div.streaming:hover{background-color:#353}div.done{background-color:#115}div.done:hover{background-color:#337}div.canceled{background-color:#511}div.canceled:hover{background-color:#733}div.task_contents{margin:10px 15px}span.task_contents{font-weight:bold}a.permalink{visibility:hidden}div.task:hover a.permalink{visibility:visible}div.note{background-color:#111}p.note_contents{margin:15px 20px}div.file{border:1px solid #333;background-color:#111;padding:15px 20px}div.image{border:1px solid #333;background-color:#111;padding:10px}img.image{box-sizing:border-box;vertical-align:top;max-width:100%}div.images{margin:10px;border:1px solid #333;background-color:#111;padding:10px;display:flex;justify-content:flex-start;gap:10px;flex-wrap:wrap}div.images>div.image{margin:0;border-style:none;padding:0}div.note_ai_generated{margin:10px;border:1px solid transparent;background-color:#333}div.note_ai_generated>*{margin:15px 20px}div.note_ai_generated h1{font-size:2rem;font-weight:bold}div.note_ai_generated h2{font-size:1.8rem;font-weight:bold}div.note_ai_generated h3{font-size:1.6rem;font-weight:bold}div.note_ai_generated h4{font-size:1.4rem;font-weight:bold}div.note_ai_generated h5{font-size:1.2rem;font-weight:bold}div.note_ai_generated h6{font-size:1rem;font-weight:bold}pre{background-color:#555;padding:15px 20px;white-space:pre-wrap}code{font-family:'M PLUS 1 Code',monospace;font-size:1rem;line-height:1.5}</style>
    </head>
    <body>
        <div class="title">
            <a href="Documents.htm" class="title">ドキュメント</a>
        </div>
        <div class="entries">
            <div id="fb737ea6-bc71-41d2-843d-acf88043f7ab" class="task streaming">
                <div class="task_contents">
                    <span class="task_contents">yy シリーズの命名について書いておく</span>
                    <a href="#fb737ea6-bc71-41d2-843d-acf88043f7ab" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">作らないといけないものがたくさんある。</p>
                            <p class="note_contents">自分は命名のセンスがないので、「yy○○」を基本とする。</p>
                            <p class="note_contents">y はイニシャルで、yy だと「わいわい」だ。「何でも一人で作り一人で使う」がこの10年ほど当たり前になっている自分にとっては、「大勢で作り、大勢に使ってもらう」の意味合いがある。</p>
                            <p class="note_contents">ソリューション名、プロジェクト名、名前空間名を yy から始める。Yy* と大文字から始める必要はない。</p>
                            <p class="note_contents">外部に公開される public のクラスの名前は y から始める。yy だと IntelliSense での識別子の区別が少し遅れる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">今後の開発では、yyLib は確定している。yyHoge も作るなら、yyHogeLib も作る。</p>
                            <p class="note_contents">前者に yShared クラスを作る場合（SOLID に激しく違反するので、そもそも大きな間違いだが）、後者でも yShared を作ると、両方を using した場合にコンパイラーが迷う。</p>
                            <p class="note_contents">これについては、SOLID を守り、なおかつ後者のクラス名には修飾語を入れ、できるだけ識別子の衝突を回避するのが最善だろう。</p>
                            <p class="note_contents">ファイル名がクラス名などになるようにしておけば、ソースコードの構文解析をしなくても、全てのライブラリーに含まれるクラス、構造体、enum などのリストを容易に取得できる。</p>
                            <p class="note_contents">たまにその全体を見て整理するプロセスも可能にする。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="cd6d30e0-86c2-457f-a1ff-6bbaee72dfe6" class="task streaming">
                <div class="task_contents">
                    <span class="task_contents">このタスクリストについて書く</span>
                    <a href="#cd6d30e0-86c2-457f-a1ff-6bbaee72dfe6" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">このタスクリストは、タスク単位で共通ドキュメントをザッと残していくところだ。</p>
                            <p class="note_contents">tk2Text により HTML ファイル化され、暫定的には GitHub の Resources レポジトリーに入れられる。</p>
                            <p class="note_contents">その後、それら HTML ファイルをほかのところにも自動アップロードしてサイトの形をとるか、よりインタラクティブに参照できるように JSON や SQLite にも変換してサイトのデータストアとするかは未定。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">昔に比べて「知らないものをその都度調べてすぐ使う」がプログラミングに激増した。つまり、誰もが知っているプログラミング言語の基本的なところだけを知っておけば、その言語のプログラムならだいたい何でも読み書きできた時代はとっくに終わった。</p>
                            <p class="note_contents">よって、「そのプロジェクトで初めて必要になり学ぶ」の連続になるわけで、それら全ての情報をこのタスクリストに入れていくと、1) 肥大化して参照性が下がるし、2) 複数プロジェクトの同時進行において全く別々の技術の情報が入り交じってカオスになる。</p>
                            <p class="note_contents">といったことから、「今後ほかのプロジェクトでも使いそうなもの」に関する情報であっても、広くどのプロジェクトにも当てはまる内容でないなら、こちらで扱わず、最初にそれが必要になったプロジェクトのタスクリストやソースコードに入れる。</p>
                            <p class="note_contents">タスクリストにおいてはタスクにもメモにも GUID が付与される。それを含むシンプルな URL によりピンポイントで情報を参照できる仕組みも考えているので、「最初にそれが必要になったところ」への情報の集約については、本質的にはさほど重要でない。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="33926da2-2480-41dc-ba64-3bcf3328d1d9" class="task streaming">
                <div class="task_contents">
                    <span class="task_contents">いろいろと書き直すことについてザッと書いておく</span>
                    <a href="#33926da2-2480-41dc-ba64-3bcf3328d1d9" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">.NET とは20年近くの付き合いだ。</p>
                            <p class="note_contents">大昔から「そのときに作っているプログラムのコードのうち、ほかで再利用できそうなものをクラスライブラリーに入れていく」という開発が好きだ。20代の頃には、若さと情熱に任せて5～6万行のクラスライブラリーに何でもかんでも詰め込んだこともある。</p>
                            <p class="note_contents">その後、ひたすら海外を放浪しては、アジアの平均年齢の低さ、億単位の数の若者がいること、英語はやっぱりヨーロッパでは話せて当たり前であること、「英語が流ちょうで、オープンソースコミュニティーで存在感のある日本人プログラマー」が少ないこと、その劣勢が今後は不可逆的に進行しそうであることを痛感しては、プログラミングは「○○＋α」の「α」の方であるべきと、つまりそれとは別により固有性の高いコアコンピタンスが必要と判断し、「プログラミングも多少できる○○」をいろいろとやるうちにプログラミングが本業ではなくなった。</p>
                            <p class="note_contents">ここ10年くらいは業務システムを書いていない。プログラミングは趣味でもあるし単純に便利なので続けているが、仕事に必要な自分用のツールをチョロッと書く程度だ。よって、やたらデスクトップアプリが多く、しかもほとんどがコンソールアプリで、GUI の方も WPF だ。クロスプラットフォームだとか、まずは API から書くとかの時代には、はっきり言って取り残されている。</p>
                            <p class="note_contents">その中で1～2年前に Nekote というクラスライブラリーの開発を始めては、それも「α」だったので「○○」の方の隙間時間にチョロッとやる程度で、特定の業務システムを作りたくての明確なゴールを設定しての開発ではなかったので、何をやっているのか分からなくなってきた。目の前のツールの開発には役立っていたが、そこから業務システムを作れるようなものではなかった。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">といった状況において ChatGPT が出てきて、Copilot が出てきて、ローカル LLM でも遊んでみて、自分としては、もちろんコード生成にも驚いたが、それより翻訳精度の高さに感動した。</p>
                            <p class="note_contents">自社にはスペイン人、ロシア人、日本人がいるのだが、英語があまり通じない。よって、自分がスペイン人と話すには、スペイン語しか話せないロシア人および英語しか話せないロシア人の2名を経ての伝言ゲームになる。特殊な業種・業態だからそれでも今のところ回っているが、この管理体制ではスケールさせにくい。AI 翻訳は、その状況において強烈な光を放っている。</p>
                            <p class="note_contents">先日、日本語の商品説明を「コメディアンっぽいロシア語」および「学者が話すようなロシア語」の2つに AI 翻訳してロシア人に送ったところ、翻訳が正確なだけでなく、確かにそういう言い回しになっているとのことだった。</p>
                            <p class="note_contents">そこまでできるなら、API に湯水の如くお金を使ってでも、社内情報共有の効率化・高精度化のために AI 翻訳を駆使する。</p>
                            <p class="note_contents">ということを考えていては、「情報共有の多言語化が可能なら、そのプラットフォームの活用により、たとえばアジアの10カ国から1人ずつ雇ってのソフト屋さんも作れるに違いない」といったことを思った。</p>
                            <p class="note_contents">今はリモートが当たり前の時代だし、ただ言語ファイルだけ翻訳するのでなく、開発初期からターゲット市場の文化や商習慣も勘案してのローカライズこそが付加価値につながる。</p>
                            <p class="note_contents">そういったことから、開発体制を次のように大きく変更することを決めた。</p>
                            <p class="note_contents">旧: 一人でツール程度を書くため、Nekote に何でも詰め込んでいき、コードを自分で書き、コメントもドキュメントも日本語で書く<br />
                                新: 多国籍チームによる業務システムの開発も想定し、モジュール分割からコーディングまでに AI の支援を受け、コメントもドキュメントもその後の AI 翻訳に適した形で残し、なおかつ AI による調べ物については最初から英語と日本語で結果を保存</p>
                            <p class="note_contents">抜本的な変更になるが、いろいろと調べ、試し、技術的な障壁をすでにクリアできているので、高確率でうまくいく。</p>
                            <p class="note_contents">片手間だったが Nekote にもそれなりの時間を費やしたので丸ごと捨ててしまうのはもったいないが、あまりにもやり方が古かった。実装の一部は流用できるので、同等以上のものを AI の支援により数ヶ月で作れたらと願っている。</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
