<!DOCTYPE html>
<html>
    <head>
        <title>Nekote</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style>@import url('https://fonts.googleapis.com/css2?family=M+PLUS+1&family=M+PLUS+1+Code&display=swap');body{margin:0;background-color:#111;color:#ddd;font-family:'M PLUS 1',sans-serif;font-size:1rem;line-height:1.5;overflow-wrap:break-word;word-wrap:break-word}a{color:#69c;text-decoration:underline}a:hover,a:active,a:focus{font-weight:bold}div.task,div.note,div.file,div.image{margin:10px;border:1px solid transparent}div.entries>div.note{border:1px solid #333}div.title{background-color:#538;padding:20px 30px;font-size:2rem;font-weight:bold}a.title{color:#ddd;text-decoration:none}a.title:hover,a.title:active,a.title:focus{text-decoration:underline}div.streaming{background-color:#131}div.streaming:hover{background-color:#353}div.done{background-color:#115}div.done:hover{background-color:#337}div.canceled{background-color:#511}div.canceled:hover{background-color:#733}div.task_contents{margin:10px 15px}span.task_contents{font-weight:bold}a.permalink{visibility:hidden}div.task:hover a.permalink{visibility:visible}div.note{background-color:#111}p.note_contents{margin:15px 20px}div.file{border:1px solid #333;background-color:#111;padding:15px 20px}div.image{border:1px solid #333;background-color:#111;padding:10px}img.image{box-sizing:border-box;vertical-align:top;max-width:100%}div.images{margin:10px;border:1px solid #333;background-color:#111;padding:10px;display:flex;justify-content:flex-start;gap:10px;flex-wrap:wrap}div.images>div.image{margin:0;border-style:none;padding:0}ul.files{margin:10px;border:1px solid #333;background-color:#111;padding-top:15px;padding-inline:40px 15px;padding-bottom:15px}div.note_ai_generated{margin:10px;border:1px solid transparent;background-color:#333}div.note_ai_generated>*{margin:15px 20px}div.note_ai_generated h1{font-size:2rem;font-weight:bold}div.note_ai_generated h2{font-size:1.8rem;font-weight:bold}div.note_ai_generated h3{font-size:1.6rem;font-weight:bold}div.note_ai_generated h4{font-size:1.4rem;font-weight:bold}div.note_ai_generated h5{font-size:1.2rem;font-weight:bold}div.note_ai_generated h6{font-size:1rem;font-weight:bold}pre{background-color:#555;padding:15px 20px;white-space:pre-wrap}code{font-family:'M PLUS 1 Code',monospace;font-size:1rem;line-height:1.5}</style>
    </head>
    <body>
        <div class="title">
            <a href="Nekote.htm" class="title">Nekote</a>
        </div>
        <div class="entries">
            <div id="56630f81-5c45-4d05-9ad4-293781ad3a07" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">プロジェクトの依存関係を設定</span>
                    <a href="#56630f81-5c45-4d05-9ad4-293781ad3a07" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="f73111dd-ce6e-4107-a121-871dff39b1a3" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">レポジトリーを作成</span>
                    <a href="#f73111dd-ce6e-4107-a121-871dff39b1a3" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="0244b617-4b5d-4be0-a0e0-0ccd82da3618" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">.git ディレクトリーなどを非表示にする</span>
                    <a href="#0244b617-4b5d-4be0-a0e0-0ccd82da3618" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="dd93acb5-7a2e-4b79-a312-d517ce66ef29" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">プロパティーをチェック</span>
                    <a href="#dd93acb5-7a2e-4b79-a312-d517ce66ef29" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="0bf43003-c58c-4da9-be45-ac30de78a86a" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">.gitignore を作る</span>
                    <a href="#0bf43003-c58c-4da9-be45-ac30de78a86a" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="29fc1b50-43f4-42e1-98fe-7ac7de56f106" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ソリューションを作成</span>
                    <a href="#29fc1b50-43f4-42e1-98fe-7ac7de56f106" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="2378e320-4d67-44ee-877b-e5531fabdf70" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">レポジトリーをクローン</span>
                    <a href="#2378e320-4d67-44ee-877b-e5531fabdf70" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="0c3b02b8-84ae-4eb5-ada9-aac09179390e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">クラス継承時に base () も必要か調べる</span>
                    <a href="#0c3b02b8-84ae-4eb5-ada9-aac09179390e" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">次のページの例では base () が書かれていない。これまで「一応」で書いてきたので調べる。</p>
                            <p class="note_contents">How to: Create User-Defined Exceptions | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/standard/exceptions/how-to-create-user-defined-exceptions" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/standard/exceptions/how-to-create-user-defined-exceptions</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">引数のないコンストラクターなら不要らしい。</p>
                            <p class="note_contents">inheritance - In C#, do you need to call the base constructor? - Stack Overflow<br />
                                <a href="https://stackoverflow.com/questions/18097/in-c-do-you-need-to-call-the-base-constructor" target="_blank" class="url">https://stackoverflow.com/questions/18097/in-c-do-you-need-to-call-the-base-constructor</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="0159a6e6-7d46-42ee-a410-f46fbbb5f269" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">例外クラスをいくつか用意</span>
                    <a href="#0159a6e6-7d46-42ee-a410-f46fbbb5f269" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">How to: Create User-Defined Exceptions | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/standard/exceptions/how-to-create-user-defined-exceptions" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/standard/exceptions/how-to-create-user-defined-exceptions</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Exception は、message が string? だったり、SerializationInfo を取るものがあったり。</p>
                            <p class="note_contents">自分は、よりシンプルに。</p>
                            <p class="note_contents">Exception Constructor (System) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.exception.-ctor" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.exception.-ctor</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">nException は、Nekote が投げる全ての例外クラスのベースとなるもの。これそのものを投げるのはやめておく。エラーの区別がつかないため。</p>
                            <p class="note_contents">nArgumentException は、引数に問題がある場合のもの。</p>
                            <p class="note_contents">out of range など、いろいろ用意することも考えたが、.NET のソースを見ていると、けっこう適当な実装になっていて、「このエラーにはちゃんと固有の例外クラスが用意されているのに、こちらでは他の例外クラスが流用されている」のようなことが目立つので、自分も細かくはしない。いろいろなケースがありすぎて、途中で「これ、完璧に分けるのは無理じゃね？」のようになったのだろうと思う。</p>
                            <p class="note_contents">nDebugException は、DEBUG 内で投げるもの。他では投げない。nQualityException としてソフトウェアの品質向上のためというニュアンスにすることも考えたが、DEBUG 内のみで飛ぶ、「一応見ておく」「リリース版では見なくていい」のものであることを明示。</p>
                            <p class="note_contents">nFormatException は、構文解析に失敗した場合など。</p>
                            <p class="note_contents">nOperationException は、Nekote を使う側にミスがある場合。nArgumentException は、引数の問題。</p>
                            <p class="note_contents">nOperationException は、引数には目に見えて問題があるわけでないが、「インスタンスがこの状態のときにそれはやっちゃあいけない」など、「使い方」に問題がある場合。Load して IsLoaded が true になったあとの Load というのが好例。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="582210d7-96ad-480f-bf8a-d3e62a85d824" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">生成された例外クラスのインスタンスが内部的に保持されるようにする</span>
                    <a href="#582210d7-96ad-480f-bf8a-d3e62a85d824" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">SortedList の nExceptionLogger に static readonly の Default を用意し、lock (Lock) で Add できるようにしたが、nException のコンストラクターでそうしても StackTrace に情報が入らなかった。</p>
                            <p class="note_contents">StackTrace は new でなく throw のときに設定されると仮定し、nException.Throw を用意し、いったん投げて catch して再度 throw の途中でインスタンスを Add するようにしたところ、nException.Throw で投げられたということしか分からない StackTrace になった。</p>
                            <p class="note_contents">これらは、ConsoleTester から Nekote のメソッドを呼んでいて、アセンブリーをまたいだからだろう。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Attach StackTrace To Exception Without Throwing in C# / .NET - Stack Overflow<br />
                                <a href="https://stackoverflow.com/questions/37093261/attach-stacktrace-to-exception-without-throwing-in-c-sharp-net" target="_blank" class="url">https://stackoverflow.com/questions/37093261/attach-stacktrace-to-exception-without-throwing-in-c-sharp-net</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">次のコードは、うまくいった。</p>
                            <p class="note_contents">typeof (Exception).GetField (&quot;_stackTraceString&quot;, BindingFlags.Instance | BindingFlags.NonPublic).SetValue (this, Environment.StackTrace)</p>
                            <p class="note_contents">ただ、throw 前に StackTrace を設定し、nExceptionLogger.Default に入れても、throw の時点で StackTrace が変更される。</p>
                            <p class="note_contents">Default に入った例外クラスの参照の内容が、その直後の不定の瞬間に変更されることによる情報の不整合を嫌い、投げる前から StackTrace を投げたあとと同じ値にするか、投げてから Default に入れながらも、ただ throw new したのと同じシンプルな StackTrace にするか、どちらかを望んだが、「Default に入れた直後、ほんの一瞬の間はまだ要素の内容が最終のものでない」というのは仕様として妥協するしかなさそう。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="210f537c-d06d-4281-9876-9c00896d0080" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">アセンブリー情報を参照できるようにする</span>
                    <a href="#210f537c-d06d-4281-9876-9c00896d0080" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">visual studio - Equivalent to AssemblyInfo in dotnet core/csproj - Stack Overflow<br />
                                <a href="https://stackoverflow.com/questions/42138418/equivalent-to-assemblyinfo-in-dotnet-core-csproj" target="_blank" class="url">https://stackoverflow.com/questions/42138418/equivalent-to-assemblyinfo-in-dotnet-core-csproj</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">MSBuild properties for Microsoft.NET.Sdk - .NET | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">c# - How can I retrieve the &#39;AssemblyCompany&#39; setting (in AssemblyInfo.cs)? - Stack Overflow<br />
                                <a href="https://stackoverflow.com/questions/3127288/how-can-i-retrieve-the-assemblycompany-setting-in-assemblyinfo-cs" target="_blank" class="url">https://stackoverflow.com/questions/3127288/how-can-i-retrieve-the-assemblycompany-setting-in-assemblyinfo-cs</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">GetCustomAttributes は、.csproj でその属性を指定しなくても複数指定しても Count () == 1 になる。前者の場合はアセンブリー名、後者の場合は最後に指定されたものに。</p>
                            <p class="note_contents">GetCustomAttribute で読む場合も null のチェックは不要だが、作法として。null の場合、null でなく &quot;&quot; を返す。ほぼ間違いなく null でないものが返るメソッドを Nullable にしないため。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">GetCompanyString などをキャッシュなしの static メソッドとして用意するのは、キャッシュするほど重たい処理と思えないため。ものすごく多くのアセンブリーの情報を LINQ でソートするなども考えにくい。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">NeutralResourcesLanguageAttribute を読むものは、System.Resources.ResourceManager パッケージの導入が必要のようなのでまだ実装しない。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Nekote は個人で開発しているので Authors に自分の名前を入れるのが作法と感じるが、これはパッケージ関連の属性なので今は使わないでおく。</p>
                            <p class="note_contents">また、Repository URL が気になるが、これを設定したから Nekote のバイナリーが手元にある人がレポジトリーに到達できるというものではない。添付のドキュメントにでも書くのが妥当。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">WINWORD.EXE のプロパティーをエクスプローラーで開くと、英語版 Windows では、以下のようになるようだ。</p>
                            <p class="note_contents">File description: Microsoft Word<br />
                                Product name: Microsoft Office</p>
                            <p class="note_contents">.csproj で以下の項目を設定すると、結果は次のようになる。</p>
                            <p class="note_contents">AssemblyName → ファイル名<br />
                                AssemblyTitle → File description</p>
                            <p class="note_contents">MS の考え方は、おそらく以下のようなものだろう。</p>
                            <p class="note_contents">AssemblyName → 内部的な名前<br />
                                AssemblyTitle → 慣用的な「どこの何」あるいはソフトのフレンドリー名<br />
                                Product → そのソフトが含まれる製品やシリーズの、マーケティング的な名前</p>
                            <p class="note_contents">Product を設定しなければ、AssemblyName が流用される。これは &lt;Product&gt;&lt;/Product&gt; と書いても同じ。</p>
                            <p class="note_contents">「Company + Product + 何か」でフルネームを生成する処理は、Product に社名がもう一度入ることがあるので不可能。Product に含まれる Company を探して除去するなどの処理は、イレギュラーへの対応力が低いため適さない。</p>
                            <p class="note_contents">実際の運用としては、Company に社名または便宜的に個人名、Product は上記の意味での値がないなら空、AssemblyName はプロジェクト名と一致なら設定せず、AssemblyTitle も AssemblyName と異なる場合のみ設定でよさそう。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">少し訂正。</p>
                            <p class="note_contents">Product を指定しない場合に AssemblyName が流用されるのはエクスプローラーの挙動。.NET のコードでは空になる。</p>
                            <p class="note_contents">また、AssemblyTitle も、.NET では、設定しなければ AssemblyName が流用されるのでなく空になる。</p>
                            <p class="note_contents">プログラムにタイトルを表示する場合、「構成ファイルで指定されたもの &gt; ローカライズされたタイトル &gt; AssemblyTitle &gt; AssemblyName」という読み方が良さそう。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Version は AssemblyVersionAttribute で読めないと判明。GetName ().Version に変更。これは稀に null を返す。まず大丈夫そうだが、一応 Nullable に。</p>
                            <p class="note_contents">AssemblyName.CoreCLR.cs<br />
                                <a href="https://source.dot.net/#System.Private.CoreLib/src/System/Reflection/AssemblyName.CoreCLR.cs" target="_blank" class="url">https://source.dot.net/#System.Private.CoreLib/src/System/Reflection/AssemblyName.CoreCLR.cs</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">三つのバージョンは、AssemblyVersion, InformationalVersion, FileVersion で指定できた。Version があっても、これらの値が優先される。しかし、これらをなくすと、いずれでも Version の値が流用される。</p>
                            <p class="note_contents">これら三つの関係としては、一つ目のみ残すと三つ目が一つ目を流用するが二つ目はデフォルト値になり、二つ目または三つ目のみ残しても他で流用されない。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">.csproj をできるだけシンプルにしたい。</p>
                            <p class="note_contents">ドキュメントに、三つ全てのバージョンが defaults to the value of $(Version) と書かれているので、今後の変更はないものとみなし、Version のみ指定する。</p>
                            <p class="note_contents">AssemblyName も AssemblyTitle も、指定が必要でないなら指定しない。そのために GetAssemblyTitleOrName を実装する。</p>
                            <p class="note_contents">Company には個人名を指定。</p>
                            <p class="note_contents">他はなくて困らないので今すぐには指定しない。レポジトリーの URL を .csproj に入れるのも、プログラムの内部的な動作に不可欠でない。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Version は Nullable なので GetVersionString もそうしたいが、他との整合性が失われるし、Version が実際に null になることが稀のようなので、これも Nullable にしない。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Version.TryParse は、少なくとも Major と Minor を必要とする。</p>
                            <p class="note_contents">Version.TryParse Method (System) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.version.tryparse" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.version.tryparse</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">GetTitleOrNameString は、どこにもデータがなければ &quot;&quot; を返す。しかし、AssemblyName を指定せずに GetName ().Name を見るとプロジェクト名が返ってくるので、実際に &quot;&quot; が返ることはまずない。そのため、Nullable にする必要はない。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">いや、やはり全体的に Nullable をしっかり使う。null を返してくる可能性の低い、.NET の Nullable のメソッドであっても、可能性がゼロでないなら、Nekote がいたずらに null を潰してはいけない。null が返ってくるかもしれないという情報を呼び出し側に伝えるべき。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">.csproj への記述のテンプレ:</p>
                            <p class="note_contents">&lt;AssemblyName&gt;&lt;/AssemblyName&gt;<br />
                                &lt;AssemblyTitle&gt;&lt;/AssemblyTitle&gt;</p>
                            <p class="note_contents">&lt;Company&gt;Yoshinao Inoguchi&lt;/Company&gt;<br />
                                &lt;Product&gt;&lt;/Product&gt;<br />
                                &lt;Description&gt;&lt;/Description&gt;<br />
                                &lt;Copyright&gt;&lt;/Copyright&gt;</p>
                            <p class="note_contents">&lt;Configuration&gt;&lt;/Configuration&gt;</p>
                            <p class="note_contents">&lt;Version&gt;0.1&lt;/Version&gt;<br />
                                &lt;AssemblyVersion&gt;&lt;/AssemblyVersion&gt;<br />
                                &lt;FileVersion&gt;&lt;/FileVersion&gt;<br />
                                &lt;InformationalVersion&gt;&lt;/InformationalVersion&gt;</p>
                            <p class="note_contents">値が空でキーだけ指定しても何も書かなくても同じようなので、キーは書いておく。</p>
                            <p class="note_contents">内部名、フレンドリー名は名前系。</p>
                            <p class="note_contents">続いて、文字列による属性系。まず社名あるいは個人名、続いて製品名で、さらに詳しい説明を経て、最後に著作権表示。</p>
                            <p class="note_contents">Configuration はたぶん使わないが、これだけ抜くと nAssembly との整合性が失われるので一応。</p>
                            <p class="note_contents">最後にバージョン系。全てに引き継がれるものを置き、続いて個別に。AssemblyVersion は .NET でも GetName ().Version で取得できるなど特別扱いなので先に。残り二つはドキュメントにおける順で。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Version に 0.0 を指定するとパーズに失敗するので注意。まだアーカイブするに値しない実装中のコードに自分は 0.0 をつけることがあったが、0.1 のまま初回のアーカイブを目指すのが妥当。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="cb26c78e-6559-4d8c-9811-848d68731e01" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">アセンブリー情報を設定</span>
                    <a href="#cb26c78e-6559-4d8c-9811-848d68731e01" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="d0c5c7ac-a64b-4889-83e0-6089d20354d9" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nAssembly のスピードを調べる</span>
                    <a href="#d0c5c7ac-a64b-4889-83e0-6089d20354d9" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">次の雑なコードを走らせてみた。</p>
                            <p class="note_contents">Console.WriteLine (&quot;Average: &quot; + Enumerable.Range (1, 10).Select (x =&gt;<br />
                                {<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;Stopwatch xStopwatch = Stopwatch.StartNew ();</p>
                            <p class="note_contents">&nbsp;&nbsp;&nbsp;&nbsp;Enumerable.Repeat (Assembly.GetEntryAssembly (), 1000000).<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OrderBy (y =&gt; nAssembly.GetNameString (y!)).<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThenBy (y =&gt; nAssembly.GetTitleString (y!)).<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThenBy (y =&gt; nAssembly.GetVersion (y!)).<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ToArray ();</p>
                            <p class="note_contents">&nbsp;&nbsp;&nbsp;&nbsp;long xElapsedTime = xStopwatch.ElapsedMilliseconds;<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine (x + &quot;. &quot; + xElapsedTime);<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;return xElapsedTime;<br />
                                }).<br />
                                Average ());</p>
                            <p class="note_contents">結果:</p>
                            <p class="note_contents">1. 4079<br />
                                2. 3902<br />
                                3. 3910<br />
                                4. 3950<br />
                                5. 3908<br />
                                6. 4056<br />
                                7. 4526<br />
                                8. 4561<br />
                                9. 4616<br />
                                10. 4590<br />
                                Average: 4209.8</p>
                            <p class="note_contents">コードにミスがないなら、アセンブリー情報はキャッシュなしで読んでよさそう。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="b93f5c38-2a40-47f1-a083-4bb2a061e8a8" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nConvert.VersionToString で引数をチェック</span>
                    <a href="#b93f5c38-2a40-47f1-a083-4bb2a061e8a8" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="04ca02a3-c7f6-4ae0-bd04-11bfb3689bba" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nDataException を追加</span>
                    <a href="#04ca02a3-c7f6-4ae0-bd04-11bfb3689bba" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Key:Value が行ごとに含まれるものをパーズするとする。</p>
                            <p class="note_contents">: がないならフォーマットの問題なので nFormatException が飛ぶべき。</p>
                            <p class="note_contents">一方、Key が重複してはいけない仕様のところで同じ Key が複数回登場すれば、それはフォーマットというよりデータの問題なので、そのための例外クラスがあるべき。</p>
                            <p class="note_contents">複数回登場すれば最後のものが残るという仕様でエラーそのものをなくす選択肢もあるが、それでは操作や処理の厳密性が必要水準に満たないところもある。</p>
                            <p class="note_contents">enum で switch するときに未定義の値が現れても、nDataException は投げやすい。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="ad18bff2-3af8-4919-9548-b461322febd5" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nNotSupportedException と nNotImplementedException を追加</span>
                    <a href="#ad18bff2-3af8-4919-9548-b461322febd5" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">可能だが、ニーズがないなどで今後もしないことと、同じく可能だが、優先度が低いなどでまだ実装はされておらず、そのうち実装される可能性があることの二つを区別する必要がある。</p>
                            <p class="note_contents">昔は catch を二つ用意するのがめんどくさそうで一つにしていたが、意味的に完全に独立している二つの例外クラスの存在はリスクでもコストでもないし、どうせ catch を二つ用意することはない。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="540957f6-8b25-43f3-af07-8d3ad16ee265" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">DateTime と文字列のラウンドトリップのメソッドを追加</span>
                    <a href="#540957f6-8b25-43f3-af07-8d3ad16ee265" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">&quot;O&quot; で ToString なのは「一周回る」と言いたいようで忘れないが、カルチャーは本当になくてよいのか忘れる。</p>
                            <p class="note_contents">また、Parse に一応 CultureInfo.InvariantCulture を渡すべきか、null でよいかも忘れる。</p>
                            <p class="note_contents">カルチャーは本当になくてよく、Parse には null でよいようなので、メソッド化しておく。</p>
                            <p class="note_contents">How to: Round-trip Date and Time Values | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/how-to-round-trip-date-and-time-values" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/standard/base-types/how-to-round-trip-date-and-time-values</a></p>
                            <p class="note_contents">ついでに CultureInfo.InvariantCulture について調べた。</p>
                            <p class="note_contents">内部的には new CultureInfo (CultureData.Invariant, isReadOnly: true) のキャッシュになっている。null でないし、null が入っている CultureInfo でもない。</p>
                            <p class="note_contents">CultureInfo.cs<br />
                                <a href="https://source.dot.net/#System.Private.CoreLib/CultureInfo.cs" target="_blank" class="url">https://source.dot.net/#System.Private.CoreLib/CultureInfo.cs</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="4da02f45-4e6e-4c20-9e0a-19c6e30641f8" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">Try + Parse + Exact のような識別子について書く</span>
                    <a href="#4da02f45-4e6e-4c20-9e0a-19c6e30641f8" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Nekote には *Safely というメソッドがある。スレッドセーフなのか、空の catch が入っていて何があっても例外が飛んでこないのか、あるいは全く別のことなのか、どう「安全」かはそれぞれ異なるが、たいていコンテキストで分かる。</p>
                            <p class="note_contents">.NET には TryParseExact というメソッドがある。Try のあとに To または And が必要と感じるし、Exact には ly がつくべきでないかとも感じるが、英語ネイティブが「この程度までなら崩しても分かりにくくならず、それでいてコードの短縮になる」と判断してのもの。</p>
                            <p class="note_contents">自分でそういうのを作る場合も、TryParseHogeStringExactly などと無理に英語を頑張るのでなく、TryParseExactHogeString のように .NET の仕様にならう。</p>
                            <p class="note_contents">しかし、*Safely はそのまま。「例外をもらえる」「安全だが（当然のこと）もらえない」の二つの類似メソッドがあるところにさらに三つ目を追加するなどもあり得るので、「そのときに一つが *Safe と形容詞だから三つ目も形容詞にした方が揃うが、三つ目は他の単語も伴うので副詞の方が英語として……」のようなことでゴタゴタしたくない。つなげる場合は、副詞の方がやりやすい。</p>
                            <p class="note_contents">さまざまなコーディングガイドラインで、strcmp 的な短縮表現はコード補完入力の時代に適さないとされる。よほどの理由がなければ、識別子は英語として正しくフルで書けと。TryParseExact のような慣例が存在しないところでは、その原則に従う。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="e324b44b-4975-465d-8533-7f741aebb3c0" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ParseRoundtripDateTimeString の命名について書く</span>
                    <a href="#e324b44b-4975-465d-8533-7f741aebb3c0" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ParseRoundtripDateTimeString<br />
                                ParseDateTimeRoundtripString</p>
                            <p class="note_contents">の二つのうち、前者を採用した。</p>
                            <p class="note_contents">これは、性質に重きを置くか、所属や出身に重きを置くかの問題。</p>
                            <p class="note_contents">「ラウンドトリップ可能な日時の文字列」と日本語にすれば前者の一択と感じられるが、たくさんの型を扱い、それぞれについてたくさんの種類の文字列を扱うなら、後者の方が、IntelliSense から引き出すのが速そう。</p>
                            <p class="note_contents">今は Roundtrip という表現を覚えているから ro くらいまですぐ叩けるが、忘れたら、あるいは他の普段あまり使わないメソッドだと、da を叩いて候補を見たいときもあるだろう。</p>
                            <p class="note_contents">しかし、コードの可読性を考えるにおいても前者の方が、性質から頭に入ってくる分、分かりやすい。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="84056da0-90ed-4f59-9a37-0e44de4c7963" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">new の書き方について書く</span>
                    <a href="#84056da0-90ed-4f59-9a37-0e44de4c7963" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">宣言部分で分かるなら new 直後の型名を省略するように Visual Studio が言ってくるが、コードの自動入力の方が遅れていて、new () と書くにはまず () を書いてから戻って new を書くことになる。</p>
                            <p class="note_contents">宣言と同時に new する行では、new の (...) のあとに意味のあるコードが続くことがない。new 以降が短くなろうと、その後続のコードの可読性が高まるなどはない。</p>
                            <p class="note_contents">一方、右辺でコードを見たいときに情報がなくて左辺を見る手間はある。</p>
                            <p class="note_contents">new の書き方は今まで通りでよい。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="1fe4cc58-881c-4d3d-90f5-1b9dba008de2" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">string.IsNullOrWhiteSpace の使用に関するガイドラインを策定</span>
                    <a href="#1fe4cc58-881c-4d3d-90f5-1b9dba008de2" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">自分は string.IsNullOrEmpty を多用するが、たとえば設定ファイルにおいてキーと値の組み合わせのうちキーが &quot; &quot; だったり、値の先頭または末尾に空白系文字があったりは、ユーザーの単純ミスだろうと、意図的な不正な操作だろうと、対処のコストが低いため対処されるべき。&quot;&quot; だと「存在しない」だとか「未設定」だとかになるのに、&quot; &quot; にするだけで UI に値のないキーを表示したり、ドロップダウンリストに（視覚的には）空の項目を追加したりできるのは、「使う側がちゃんとすればよいこと」というより、「プログラム側が対処するべきこと」である。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">これは Trim の使用についてのガイドラインでもある。シンプルに考えるなら、文字列の先頭または末尾に（新たに）空白系文字が入る可能性のあるところ全てで IsNullOrWhiteSpace と Trim が使われるべき。</p>
                            <p class="note_contents">ただ、インスタンス間のデータのやり取りなどにまでこういった処理を挟むと、さすがにパフォーマンスに響く。UserName プロパティーの set でも行うなどは、やりすぎ。内部で生成した文字列を内部で扱うだけでも IsNullOrWhiteSpace の嵐になる。</p>
                            <p class="note_contents">ユーザーの入力を受け付けたり、設定ファイルを読み込んだり、API でもらったデータを処理したりといった、ユーザーや外部システムなどとのやり取りが関わってくるところのみで基本的には十分。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">単一の文字列として設定ファイルなどから何か読むときには、IsNullOrWhiteSpace により目に見える文字が少なくとも一つあることを確認し、Trim で後続のコードに持ち込む。</p>
                            <p class="note_contents">文字列を段落分けするなら、その処理において行末の空白系文字が削られるのは、そのメソッドに求められていることではない点において問題。オプションでそういう指定を可能にするのはよいが、何も指定がなければ、「目に見える文字が一つもないから空行」なのかどうかの判別以上のことは不要。つまり、TrimEnd より、各行に IsNullOrWhiteSpace のみ適用するのが良い。</p>
                            <p class="note_contents">それは文字列にインデントを加えるメソッドも同じで、目に見えない行が無視されるのはよいが、目に見える文字がある行において行末の空白系文字が勝手に削られるのは問題。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">いや、この問題は意外と難しい。</p>
                            <p class="note_contents">たとえば Key:Value の解析において Key と Value に必ず Trim をかけるのは本当に正しいか。</p>
                            <p class="note_contents">&quot; a &quot; がキーとしても値としても不正でないなら、勝手に Trim をかけることはデータの破壊でしかない。</p>
                            <p class="note_contents">しかし、フォントファミリーの指定を受けるところで &quot; &quot; だったり &quot; a &quot; だったりは、そういうフォント名を見たことがないため、必ず Trim される仕様でよいと思えてくる。</p>
                            <p class="note_contents">Trim の問題は、「この文字列は既に Trim されていて、これ以上の Trim は不要ですよ」のフラグが存在しないこと。そのため、先頭や末尾に空白系文字があるといけない文字列の全てを「まだなら Trim する」のメソッドにとりあえず毎回通すということができない。</p>
                            <p class="note_contents">どこまでは Trim が不可欠で、どこからは不要なのかという基準が曖昧。リスク評価が主観的になりがち。</p>
                            <p class="note_contents">上記のフォントファミリーの例の場合、&quot; &quot; が「フォント名が指定されている」と判断されて new FontFamily になろうと、それで UI のフォントがフォールバックして Yu Gothic UI か何かになることは、システムにとって致命的な問題でない。</p>
                            <p class="note_contents">それは、（通常はあり得ないが）システムのパスワードを（個人用のごくごく簡単なプログラムだからめんどくさいなどで）設定ファイルに平文で入れる場合も同じで、先頭や末尾に空白系文字があろうと、その通りに入力すればシステムは利用できる。</p>
                            <p class="note_contents">Windows のエクスプローラーでファイル名の先頭に空白を入れようとすると、それは勝手に削られる。空白が入っていても困らないし、プログラムでファイルを生成するなら入るのに、エクスプローラーが独自の仕様で勝手に削る。</p>
                            <p class="note_contents">Google で検索語句の先頭や末尾に空白系文字を入れると削られる。</p>
                            <p class="note_contents">Google も変則的で、Chrome の新しいタブからだと先頭や末尾だけでなく文中の連続する一つ以上の空白系文字が単一の半角空白に置き換えられるが、それで検索結果が表示されてからのフォームでは先頭や末尾のものしか削られなくなり、文中のものがそのまま残るようになる。</p>
                            <p class="note_contents">基準が分かりやすく、コーディング時の迷いがなく、それでいてやりすぎにならず、コストが低く、一方で安全性は確保されるというのが重要なこと。</p>
                            <p class="note_contents">深入りすると右往左往して終わらなくなりそうなので、いったんは次のように単純化してみる。</p>
                            <p class="note_contents">* ユーザー入力なら必ず洗う<br />
                                * それ以外は、洗わないことがセキュリティーリスクになる場合のみ洗う</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">文字列を段落に分けるときに &quot; &quot; だけの行が空行扱いされないのは、セキュリティーリスクになる。空白系文字を入れることで、ユーザーには二つに見える段落がシステム内では一つとして処理される。</p>
                            <p class="note_contents">一方、先ほども書いたが、 Key:Value でいずれかの先頭や末尾に空白系文字があろうと、そのパーズの時点ですぐに Trim することはない。</p>
                            <p class="note_contents">という違いから考えると、「その時点で処理やデータ構造などに影響を与えるか」というのが、より明確な基準になる。</p>
                            <p class="note_contents">暫定的には、以下のように考える。</p>
                            <p class="note_contents">* ユーザー入力なら必ず洗う<br />
                                * それ以外は、洗わないことがセキュリティーリスクになる場合のみ洗う<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;* その時点で処理やデータ構造に影響を与えるなど</p>
                            <p class="note_contents">Key:Value で Trim を行わないのは、パーズに影響がなく、得られるデータの先頭や末尾に空白系文字があるかどうかのチェックなどが後続のコードでも可能なため。</p>
                            <p class="note_contents">ユーザー入力で不可欠なのは、受け取って OK してしまうと戻れないため。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="719a9153-ed7d-414e-8712-2d1f38a4ce8f" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">string.Trim などの速度について調べる</span>
                    <a href="#719a9153-ed7d-414e-8712-2d1f38a4ce8f" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">iStringManipTester を追加。</p>
                            <p class="note_contents">クラス名は、次の二つのページによる。</p>
                            <p class="note_contents">String.Manipulation.cs<br />
                                <a href="https://source.dot.net/#System.Private.CoreLib/String.Manipulation.cs" target="_blank" class="url">https://source.dot.net/#System.Private.CoreLib/String.Manipulation.cs</a></p>
                            <p class="note_contents">Manipulation Abbreviation - 3 Forms to Abbreviate Manipulation<br />
                                <a href="https://www.allacronyms.com/manipulation/abbreviated" target="_blank" class="url">https://www.allacronyms.com/manipulation/abbreviated</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">興味本位で Trim を独自実装してみた。string.Trim と速度と結果の両方を比較したところ、前者に大差がなく、後者が一致した。内部的にも似たような実装のようだ。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">また、これも興味本位だが、文字列の先頭や末尾の空白系文字を削り、さらに文中の一つ以上の空白系文字を単一の半角空白に単純化するメソッドを二つ書いた。一つはベタ書き、もう一つは Regex クラスを使うもの。</p>
                            <p class="note_contents">こちらではベタ書きの方が3倍くらい速く、結果は一致した。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="6bfbe39d-2370-45b4-bea6-538f6a458eff" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">}), のところに改行を入れる</span>
                    <a href="#6bfbe39d-2370-45b4-bea6-538f6a458eff" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">... (x =&gt;<br />
                                {<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;Hoge ...<br />
                                }), Moge ...</p>
                            <p class="note_contents">のようなところを</p>
                            <p class="note_contents">... (x =&gt;<br />
                                {<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;Hoge ...<br />
                                }),<br />
                                Moge ...</p>
                            <p class="note_contents">にする。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="409c63a9-e70d-4509-9286-706d5652a8f3" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">major.minor.patch のバージョニングについて書く</span>
                    <a href="#409c63a9-e70d-4509-9286-706d5652a8f3" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">.NET の Version クラスのドキュメントでは、major.minor[.build[.revision]] とされる。</p>
                            <p class="note_contents">Major: Assemblies with the same name but different major versions are not interchangeable. A higher version number might indicate a major rewrite of a product where backward compatibility cannot be assumed.</p>
                            <p class="note_contents">Minor: If the name and major version number on two assemblies are the same, but the minor version number is different, this indicates significant enhancement with the intention of backward compatibility. This higher minor version number might indicate a point release of a product or a fully backward-compatible new version of a product.</p>
                            <p class="note_contents">Build: A difference in build number represents a recompilation of the same source. Different build numbers might be used when the processor, platform, or compiler changes.</p>
                            <p class="note_contents">Revision: Assemblies with the same name, major, and minor version numbers but different revisions are intended to be fully interchangeable. A higher revision number might be used in a build that fixes a security hole in a previously released assembly.</p>
                            <p class="note_contents">Version Class (System) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.version" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.version</a></p>
                            <p class="note_contents">Stack Overflow にもいろいろと書かれている。</p>
                            <p class="note_contents">c# - Best practices for assembly naming and versioning? - Stack Overflow<br />
                                <a href="https://stackoverflow.com/questions/199823/best-practices-for-assembly-naming-and-versioning" target="_blank" class="url">https://stackoverflow.com/questions/199823/best-practices-for-assembly-naming-and-versioning</a></p>
                            <p class="note_contents">.net - Best practices/guidance for maintaining assembly version numbers - Stack Overflow<br />
                                <a href="https://stackoverflow.com/questions/3768261/best-practices-guidance-for-maintaining-assembly-version-numbers" target="_blank" class="url">https://stackoverflow.com/questions/3768261/best-practices-guidance-for-maintaining-assembly-version-numbers</a></p>
                            <p class="note_contents">依存関係ファイルにより指定されるバージョンのアセンブリーが見つからないときに、どういうバージョン番号のアセンブリーなら代替的にロードされるかという問題もあるようで、.NET のバージョニングは、深入りしたらアカンやつの印象が強い。まだ小規模プロジェクトのうちは、そもそも必要性がないが。</p>
                            <p class="note_contents">自分に必要なのは、仕様や操作性が劇的に変わるときの major、機能追加やバグ修正の minor に加えては、ライブラリーにおいてのみ「それを使う側とのリンク時に見つかった問題などをサクッと直したときに上がるもの」としての第三の数字のみ。</p>
                            <p class="note_contents">ライブラリーでないなら、ちょっとしたバグ修正でも minor を上げてよい。それへリンクする他のプログラムがないなら他への影響がないため。</p>
                            <p class="note_contents">しかし、ライブラリーの側では、それを使う側とのリンク時に、いざ走らせてみたら相性の問題があって落ちたり、メンバー変数では動かないからプロパティーに変更しなければならなかったり、メソッドの引数が増えたから以前のコードとの互換性のためにデフォルト引数が必要になったりの、ライブラリーでない側では考えにくい目的、つまり「呼び出し側に合わせる」という目的でのパッチワークが頻発する。</p>
                            <p class="note_contents">そのたびにライブラリーの minor を上げるのでは、機能性とは関係のない、うまくつながるようにしただけの変更などが大きな変更のように見えてしまい、そちらの方が良く、そして安全だからソフト側に組み込まれている Nekote.dll をすぐにでも置き換えなければならないとの誤解につながる可能性がある。</p>
                            <p class="note_contents">そういった問題を避けるには、SemVer と呼ばれるものに従った方が良さそう。</p>
                            <p class="note_contents">Semantic Versioning 2.0.0 | Semantic Versioning<br />
                                <a href="https://semver.org/" target="_blank" class="url">https://semver.org/</a></p>
                            <p class="note_contents">とりあえず、0.0.1 から始める。0.1 は機能的にそれなりに充実したものでないといけないので、0.1.0 からというのは適さない。</p>
                            <p class="note_contents">0.0.1 から、Nekote と、それを使う複数のソフトを同時に開発していき、使う側のソフトをリリースするタイミングで Nekote のコードやコメントをある程度チェックして patch を上げて Nekote もアーカイブ。そうすることで、ソフトと Nekote の両方のバージョン番号が含まれるエラーメッセージが届いたときに問題を特定しやすい。</p>
                            <p class="note_contents">おそらく 0.0.100 くらいになる頃にはソフト側でも中規模のものがいくつかできている。それらが枯れてきた頃に Nekote を 0.1.0 にする。</p>
                            <p class="note_contents">ライブラリーのみ patch がつくのは 0.1.0 以降も同じ。patch が0なら major.minor だけにする考えもあったが、それだと 0.1 と 0.1.1 があるときに 0.1.1 が 0.1 より古い release candidate 的なものであると誤解される可能性がゼロでない。</p>
                            <p class="note_contents">A というソフトに 0.10.0 が、B に 0.10.1 が入っていれば、major.minor が同じなので、基本的には A のものをすぐに B のものに置き換える必要はない。</p>
                            <p class="note_contents">しかし、C に 0.11.0 が入っていれば、minor が古い Nekote には機能や実装の問題がある「可能性」くらいは気にするべき。</p>
                            <p class="note_contents">もっとも、既存のソフトに広く影響する問題が Nekote の側で見つかれば、まず Nekote を更新して minor を上げてから、A, B, C および他の全てを最新の Nekote.dll とリンクし直して新たにリリースすることになるので、Nekote.dll のみ手作業で置き換えることは今後も必要にならないだろう。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="8c761ac9-7d26-459d-81a6-14c0b70455b0" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">文字列に Trim をかける基準を見直す</span>
                    <a href="#8c761ac9-7d26-459d-81a6-14c0b70455b0" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">* ユーザー入力なら必ず洗う<br />
                                * それ以外は、洗わないことがセキュリティーリスクになる場合のみ洗う<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;* その時点で処理やデータ構造に影響を与えるなど</p>
                            <p class="note_contents">としたが、それが含まれるメモにおける直後の「戻れない」こそが重要と感じる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">* インタラクティブな入力 → 洗う<br />
                                * そうでない<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;* 行末の空白系文字 → 洗う<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;* そうでない<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 処理やデータ構造に影響がある → 洗う<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* そうでない<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 一度しかそこを通らない AND 洗うことにメリットがある → 洗う<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* そうでない → 洗わない</p>
                            <p class="note_contents">というので様子を見る。</p>
                            <p class="note_contents">インタラクティブな入力とは、エラーメッセージを出力して再入力してもらえるところ。</p>
                            <p class="note_contents">行末の空白系文字は、自分は、どこだろうと削っている。エディターでそう設定できることが多いし、Markdown でも行末の見えない半角スペースは議論になりがち。インデントは存在が分かるが、行末の空白系文字はそうでない。見えないものは、ない方が管理コストが低い。</p>
                            <p class="note_contents">How to add new line in Markdown presentation? - Stack Overflow<br />
                                <a href="https://stackoverflow.com/questions/33191744/how-to-add-new-line-in-markdown-presentation" target="_blank" class="url">https://stackoverflow.com/questions/33191744/how-to-add-new-line-in-markdown-presentation</a></p>
                            <p class="note_contents">処理やデータ構造に影響があるのは、たとえば2次元配列に文字列を入れていき CSV として出力するにおいて &quot; &quot; だけのセルが入るようなこと。他の全てのセルが &quot;&quot; なのに一つだけ &quot; &quot; があることで実質的にはデータのない行が出力されるなどは、それを受け取る側での影響があり得る。（もっとも、洗うのを決め打ちにするのも良くないので、デフォルトで洗うようにして、オプションで変更できるようにするだろう）。</p>
                            <p class="note_contents">一方、Nekote の仕様による KVS 的ファイルを Nekote でロードするなら、キーや値の先頭や末尾に空白系文字が入ることがラウンドトリップに影響するわけでない。その場合は、ラウンドトリップを経てのデータの同一性こそが重視されるべき。</p>
                            <p class="note_contents">一度しかそこを通らず、なおかつ洗うことにメリットがあるのは、たとえば例外情報。なぜか3文字インデントだが、他が4文字なので揃えてよいし、ToString で得られるものの末尾に改行が入る（少なくとも昔はそうだった記憶がある）のも不要。例外情報が3文字インデントの改行つきでデータベースなどに登録されても実害はないが、条件に該当するので洗う。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="26f21083-8124-458c-839e-130f6f205b4d" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">最初のアーカイブを作り直す</span>
                    <a href="#26f21083-8124-458c-839e-130f6f205b4d" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">自分は、昨日、「0.0 はどこかに通らなかった記憶があるから最初から 0.1 にしておくが、厳密には 0.1 にまだ至っていないものなので、アーカイブのファイル名にバージョン番号を入れないことでそのことを示唆しよう」と考えたようだ。</p>
                            <p class="note_contents">しかし、それでは古いバージョンの Nekote とリンクされたソフトで問題が発生したときに、エラーメッセージで Nekote のバージョンが分からないことで問題の特定により時間がかかる。Nekote.dll のタイムスタンプなどを見ながら、「おそらくこの頃のコードをコンパイルしたものだろう」と考えることになる。</p>
                            <p class="note_contents">まだ 0.1 に至っていないものでも、ある程度チェックし、「今のところ大丈夫」と思って他のソフトに組み込んでそちらでアーカイブするなら、Nekote.dll にも固有のバージョン番号があるべき。</p>
                            <p class="note_contents">.NET の Version クラスでは、major.minor[.build[.revision]] とされる。</p>
                            <p class="note_contents">Version Class (System) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.version" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.version</a></p>
                            <p class="note_contents">しかし、SemVer と呼ばれるものに従った方が良さそう。</p>
                            <p class="note_contents">Semantic Versioning 2.0.0 | Semantic Versioning<br />
                                <a href="https://semver.org/" target="_blank" class="url">https://semver.org/</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="f100a1be-b108-40d0-bb29-a448624529f1" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">T 型の Data プロパティーを持つクラスの設計について書く</span>
                    <a href="#f100a1be-b108-40d0-bb29-a448624529f1" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">nStopwatch &lt;T&gt; の実装において、最初、T Data { get; set; } のみ書けば、コンストラクター終了時に値が入っている必要があると叱られた。</p>
                            <p class="note_contents">nStopwatch &lt;T&gt; where T: struct なら T Data { get; set; } = default で通るが、クラスでもいいようにするなら where 句をなくし、T? Data { get; set; } = default が良さそう。</p>
                            <p class="note_contents">この設計では、T が int などの小さなもので、また、必ず設定されるときに、Data が null でないか毎回見ながらの処理になる無駄がある。しかし、たいていは string またはクラス。string なら IsNullOrEmpty で安全に処理できる。</p>
                            <p class="note_contents">Data の代わりに Tag も考えたが、クラスの設計において「残りのいろいろなデータをここに」のプロパティーを自分は Data とすることが多いので整合させた。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="0fdf5d5e-937f-4689-85e0-543ca3023828" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ジェネリックの全ての型に名前を与える</span>
                    <a href="#0fdf5d5e-937f-4689-85e0-543ca3023828" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">T のみや、T1, T2 ... と連番にするのは、Tuple 的な、中身が全く分からないところに限る。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="7e707fa9-de46-42ee-980c-b120a6b3dcf0" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">Task.Dispose について調べる</span>
                    <a href="#7e707fa9-de46-42ee-980c-b120a6b3dcf0" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">10年前の記事で Dispose が不要である理由が具体的に説明されているので不要とみなす。</p>
                            <p class="note_contents">Do I need to dispose of Tasks? - .NET Parallel Programming<br />
                                <a href="https://devblogs.microsoft.com/pfxteam/do-i-need-to-dispose-of-tasks/" target="_blank" class="url">https://devblogs.microsoft.com/pfxteam/do-i-need-to-dispose-of-tasks/</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="6635139e-749a-4c3b-ad72-b7b0feb9b7f3" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">Guid.NewGuid について調べる</span>
                    <a href="#6635139e-749a-4c3b-ad72-b7b0feb9b7f3" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">0が戻らないことを確認。</p>
                            <p class="note_contents">乱数の品質についても。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">The returned Guid is guaranteed to not equal Guid.Empty と書かれている。</p>
                            <p class="note_contents">Guid.NewGuid Method (System) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.guid.newguid" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.guid.newguid</a></p>
                            <p class="note_contents">品質については、また別の機会に。あまり散らばらないとか、簡単に衝突するとかでは、そもそも使い物にならない。昔からあるものなので、すでに洗練されているとみなしてよい。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="bf258a83-a3cc-49d5-b369-e64499b80700" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nStopwatch クラスを追加</span>
                    <a href="#bf258a83-a3cc-49d5-b369-e64499b80700" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">timeLog の派生開発に必要。.NET のものは過去データを溜めないし、前回データを戻すこともできない。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">CurrentEntryData に null を設定するために、where T: class をつけた。クラスも構造体も入るようにしたかったが、int で試したところ new だけした nStopwatch &lt;int&gt; の CurrentEntryData からは0が得られた。それはつまり、値がないのか初期値なのか明確には分からないということ。</p>
                            <p class="note_contents">また、Data にシンプルな型の値が入ると、派生開発時にややこしくなる。二つ目、三つ目の値が必要になってクラスを差し込むこともあるだろう。</p>
                            <p class="note_contents">Data には何らかの複合性を与えるというのを共通仕様とする。単一データを想定するところには Tag を使い、これらを区別する。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">コンストラクターを用意しない。めんどくさい。過去データ、自動中断の設定など、複数あり、場合の数にするとうるさくなる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">「Data は、参照で扱われる、クラスのインスタンス」「Tag は、丸ごとコピーされる、構造体のインスタンス」という仕様をコードで示していくことも考え、</p>
                            <p class="note_contents">where DataType: class<br />
                                where TagType: struct</p>
                            <p class="note_contents">という実装にした。</p>
                            <p class="note_contents">ValueType を継承する Int32 が struct なのは謎だが、おそらく「そういう扱いになるようにコンパイラーが作られている」というだけのこと。ValueType は特殊なクラスと位置づけられていて、たとえば where に使うとコンパイルできない。</p>
                            <p class="note_contents">ValueType Class (System) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.valuetype" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.valuetype</a></p>
                            <p class="note_contents">Int32 Struct (System) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.int32" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.int32</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">普段は readonly や get; private set; を多用するが、汎用性を与えるため、今回はメンバー変数やプロパティーへのアクセスを広く認めている。ライブラリーなら、そのくらいでよいと思う。既存の他のクラスも軽く見た。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Data と Tag について、</p>
                            <p class="note_contents">* 本当に必要か<br />
                                * これらの名前でよいか</p>
                            <p class="note_contents">の2点を再考したが、ある程度適当に決めていかないと進まないので暫定的にこれでいく。</p>
                            <p class="note_contents">必要か不要かでは必要。クラスの方は必須。もう一つについても、値を一つだけ添えたいときに変数が一つだけのクラスを新たに用意するなどは冗長。</p>
                            <p class="note_contents">object にする選択肢もあるが、キャストしてみるまでうまくいくか分からない形での変数保持を避けたい。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">lock の多用を避けなければならない。</p>
                            <p class="note_contents">たとえば、メンバー変数への一度きりのアクセスによる IsRunning には、内部的には不要。変数の内容を読み込んでいる途中で他のスレッドがその変数のメモリー上でのバイト列をビリビリと引き裂いて上書きするようなことはさすがに考えにくい。</p>
                            <p class="note_contents">となると、考えるべきは、「まだだから新たに始める」の「まだだ」と「始める」の間に他でも「まだだ」が入って「始める」が二度行われるなどの、複数ステップがひとまとまりの処理として実行されることの保証がないことによる問題の回避。</p>
                            <p class="note_contents">そして、そうやって「ひとまとまりの処理」を各部で守るにおいて、そういったところでフラグとして用いられる変数などへの書き込みアクセスにおいても lock を行う。これは、分断しないための、つまり加害者にならないための lock。</p>
                            <p class="note_contents">* 割られると困る、被害者の防御としての lock<br />
                                * 割ってしまうといけない、加害者にならないための lock</p>
                            <p class="note_contents">の二つを念頭に。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="9346d353-5939-4cad-9bab-fa75e7f16c84" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nStopwatch.Reset を追加</span>
                    <a href="#9346d353-5939-4cad-9bab-fa75e7f16c84" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">nStopwatch のインスタンスがどういった状態であっても、new したばかりの状態にしたい。Task も止めたい。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="990354bc-4e5d-487f-be59-7fbdca709e22" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">.NET アプリ内のスレッドについて調べる</span>
                    <a href="#990354bc-4e5d-487f-be59-7fbdca709e22" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">とりあえず、以下のページに目を通した。</p>
                            <p class="note_contents">Threads and threading | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/standard/threading/threads-and-threading" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/standard/threading/threads-and-threading</a></p>
                            <p class="note_contents">Exceptions in Managed Threads | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/standard/threading/exceptions-in-managed-threads" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/standard/threading/exceptions-in-managed-threads</a></p>
                            <p class="note_contents">Synchronizing Data for Multithreading | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/standard/threading/synchronizing-data-for-multithreading" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/standard/threading/synchronizing-data-for-multithreading</a></p>
                            <p class="note_contents">Foreground and Background Threads | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/standard/threading/foreground-and-background-threads" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/standard/threading/foreground-and-background-threads</a></p>
                            <p class="note_contents">Managed and Unmanaged Threading in Windows | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-and-unmanaged-threading-in-windows" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-and-unmanaged-threading-in-windows</a></p>
                            <p class="note_contents">Thread Local Storage: Thread-Relative Static Fields and Data Slots | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots</a></p>
                            <p class="note_contents">Managed Threading Best Practices | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices</a></p>
                            <p class="note_contents">Reliability Best Practices - .NET Framework | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/framework/performance/reliability-best-practices" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/framework/performance/reliability-best-practices</a></p>
                            <p class="note_contents">Interlocked Class (System.Threading) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.interlocked" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.threading.interlocked</a></p>
                            <p class="note_contents">Thread.IsThreadPoolThread Property (System.Threading) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.thread.isthreadpoolthread" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.threading.thread.isthreadpoolthread</a></p>
                            <p class="note_contents">Lazy Initialization - .NET Framework | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/framework/performance/lazy-initialization" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/framework/performance/lazy-initialization</a></p>
                            <p class="note_contents">BackgroundWorker Class (System.ComponentModel) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.backgroundworker" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.backgroundworker</a></p>
                            <p class="note_contents">AppDomain Class (System) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.appdomain" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.appdomain</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">以下のページも読んだ。</p>
                            <p class="note_contents">The managed thread pool | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/standard/threading/the-managed-thread-pool" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/standard/threading/the-managed-thread-pool</a></p>
                            <p class="note_contents">ThreadPool Class (System.Threading) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool</a></p>
                            <p class="note_contents">ThreadPool.GetMaxThreads(Int32, Int32) Method (System.Threading) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool.getmaxthreads" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool.getmaxthreads</a></p>
                            <p class="note_contents">ThreadPool.ThreadCount Property (System.Threading) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool.threadcount" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool.threadcount</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="28e4b280-42ed-4a15-aca0-0340fa5fd45a" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">Testers/iStopwatchTester.TestThreadsCompletion を追加</span>
                    <a href="#28e4b280-42ed-4a15-aca0-0340fa5fd45a" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">テストコードを追加していく。</p>
                            <p class="note_contents">以前なら、めんどくさくて iTesters.TestStopwatch を全部入りの実装にしていたと思う。ダミーデータの入ったインスタンスを前半で用意して後半で使い回すのは、テストコードを書くにおいては悪くない。実行が一度で済むのも便利。負荷テストだと数時間かかることもある。たぶん成功するテストの場合、単一の Test* を呼んでちょっと散歩に行くなどがよくあった。</p>
                            <p class="note_contents">しかし、当たり前だが、必要な部分のみ実行できず、/* と */ であれこれコメントアウトしたり、それでは一部が動かなくなって変数の new をそこだけコピペしたりといった作業がよく必要になった。</p>
                            <p class="note_contents">今後は手を抜かず、クラスライブラリーと同様の考え方でメソッドなどを細かく分割する。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">このテストが必要なのは、スレッド数をリアルタイムで取得する方法を自分は知らないと気づいたため。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">半分をタイマーで、残り半分を Reset で止めてみる？</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Task によるスレッドはスレッドプールに入る。</p>
                            <p class="note_contents">実装中の TestThreadsCompletion において nStopwatch のインスタンスを100個作り、Task.WaitAll が終了するまで別スレッドで ThreadPool.ThreadCount の値を連続的に表示したところ、4から始まり、すぐに11になり、それからは少しずつ増えていき、プログラム終了直前の時点では29だった。</p>
                            <p class="note_contents">というのは Debug モードのときで、Release モードでは、2から始まり、すぐに8になり、最後は26だった。</p>
                            <p class="note_contents">ThreadPool.ThreadCount Property (System.Threading) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool.threadcount" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool.threadcount</a></p>
                            <p class="note_contents">いずれのモードでも、ThreadPool.GetMaxThreads の戻り値は次のようになった。</p>
                            <p class="note_contents">workerThreads: 32767<br />
                                completionPortThreads: 1000</p>
                            <p class="note_contents">ThreadPool.GetMaxThreads(Int32, Int32) Method (System.Threading) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool.getmaxthreads" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool.getmaxthreads</a></p>
                            <p class="note_contents">スレッドプールは、必要に応じて拡張され、すぐには収縮しない実装なのだろう。</p>
                            <p class="note_contents">大きな数字から減っていくものとしては ThreadPool.PendingWorkItemCount がある。</p>
                            <p class="note_contents">これは、Debug モードでは144から始まり、終わりの方で0になった。まだ nStopwatch のタスクは生きていたので、pending から「実行中」のところに入ってカウントされなくなったのだろう。</p>
                            <p class="note_contents">Release モードでは143から始まり、終わり方は同様だった。</p>
                            <p class="note_contents">ThreadPool.PendingWorkItemCount Property (System.Threading) | Microsoft Docs<br />
                                <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool.pendingworkitemcount" target="_blank" class="url">https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool.pendingworkitemcount</a></p>
                            <p class="note_contents">143～144という値は、100の nStopwatch のうち50を別タスクで Reset する実装による。自動中断も Reset も1000ミリ秒が経ってからになる実装なので、6～7の work items がすぐに「実行中」のところに入ったと考えられる。キューにたくさん入るが、同時実行されるのはその程度か。</p>
                            <p class="note_contents">使用中のパソコンでは Environment.ProcessorCount が8を返したので、6～7は妥当な値。</p>
                            <p class="note_contents">実行中の managed threads の数を正確かつ効率的に数える方法がないようで、ネットで探しても情報がない。Visual Studio のデバッガーに表示が可能なのだから自分で調べる方法もあるに違いないと推測する人がいる程度。</p>
                            <p class="note_contents">Type.GetMethod などで internal メソッドを呼んでゴリゴリやれば何とかなるかもしれないが、nStopwatch に ThreadCount を用意する方がシンプル。</p>
                            <p class="note_contents">ThreadPoolWorkQueue.cs<br />
                                <a href="https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Threading/ThreadPoolWorkQueue.cs" target="_blank" class="url">https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Threading/ThreadPoolWorkQueue.cs</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">nStopwatch.ThreadCount を追加した。</p>
                            <p class="note_contents">外から AutoPausingTask を止めるなども想定して public にした。ほぼデバッグにしか使わないものなのでリスクは軽微。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">実装し、Debug モードで実行したところ、スレッド数は14まで上がり、一瞬0になり、直後18になり、そこから0まで下がった。複数回の実行において、結果はだいたい同じだった。</p>
                            <p class="note_contents">次の2行の間に Console.WriteLine を挟んだところ、やはり一瞬0になるのはそこだった。</p>
                            <p class="note_contents">&nbsp;&nbsp;&nbsp;&nbsp;Task.WaitAll (xData.Select (x =&gt; x.AutoPausingTask!).ToArray ());<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;Task.WaitAll (xData.Where (x =&gt; x.ResettingTask != null).Select (x =&gt; x.ResettingTask!).ToArray ());</p>
                            <p class="note_contents">いわゆる deferred query execution をなくすために xData の初期化の直後に xData.Count () を入れたところ、今度は、同時実行できるスレッド数の制限によりスレッドプールの空き待ちが発生したようで、Select が重たくなり、Count () から先になかなか進めなくなった。</p>
                            <p class="note_contents">仕組みとしては簡単だが、想定していなかった挙動なので興味深い。スレッド数が0になることの確認はできているので、あえて現行の実装をそのまま残し、コメントを追記し、今後の参考になるようにする。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="c3982ea6-95da-449b-81e3-eba56a80e1a4" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://dzone.com/articles/stateful-or-stateless-classes" target="_blank" class="url">https://dzone.com/articles/stateful-or-stateless-classes</a> を読む</span>
                    <a href="#c3982ea6-95da-449b-81e3-eba56a80e1a4" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="3e2299b7-84f5-46a0-9ce6-53510642ca48" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://stackoverflow.com/questions/1866794/naming-classes-how-to-avoid-calling-everything-a-whatevermanager" target="_blank" class="url">https://stackoverflow.com/questions/1866794/naming-classes-how-to-avoid-calling-everything-a-whatevermanager</a> を読む</span>
                    <a href="#3e2299b7-84f5-46a0-9ce6-53510642ca48" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="69dcd095-d7ab-45f8-aea6-3132fb6837d4" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://en.wikipedia.org/wiki/Single-responsibility_principle" target="_blank" class="url">https://en.wikipedia.org/wiki/Single-responsibility_principle</a> を読む</span>
                    <a href="#69dcd095-d7ab-45f8-aea6-3132fb6837d4" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="8698e1b1-ca8f-4be8-a7cc-8efb7a894c9c" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">deferred query execution についてさらに調べる</span>
                    <a href="#8698e1b1-ca8f-4be8-a7cc-8efb7a894c9c" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">LINQ deferred execution explained | by Stefan Schranz | ITNEXT<br />
                                <a href="https://itnext.io/linq-deferred-execution-explained-2844838f83ef" target="_blank" class="url">https://itnext.io/linq-deferred-execution-explained-2844838f83ef</a></p>
                            <p class="note_contents">What are the benefits of a Deferred Execution in LINQ? - Stack Overflow<br />
                                <a href="https://stackoverflow.com/questions/7324033/what-are-the-benefits-of-a-deferred-execution-in-linq" target="_blank" class="url">https://stackoverflow.com/questions/7324033/what-are-the-benefits-of-a-deferred-execution-in-linq</a></p>
                            <p class="note_contents">ザッと読んだ。基本的なところは理解できている。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="a24edc1e-957a-49e5-983e-174fda0e2b11" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://medium.com/@brooknovak/benefits-of-writing-stateless-code-with-7-essential-tips-on-how-to-write-stateless-c-ee4a26e9f356" target="_blank" class="url">https://medium.com/@brooknovak/benefits-of-writing-stateless-code-with-7-essential-tips-on-how-to-write-stateless-c-ee4a26e9f356</a> を読む</span>
                    <a href="#a24edc1e-957a-49e5-983e-174fda0e2b11" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="95b5947f-22d6-47d3-8829-6bbf844df297" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://en.wikipedia.org/wiki/SOLID" target="_blank" class="url">https://en.wikipedia.org/wiki/SOLID</a> 以下のページを読む</span>
                    <a href="#95b5947f-22d6-47d3-8829-6bbf844df297" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ガッツリ読むと大変そうだが、ザッと目を通す程度には。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="a94803e6-90f7-4350-80ba-a1dd3d66b394" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">nStopwatch.AutoPauses の変更の流れを考える</span>
                    <a href="#a94803e6-90f7-4350-80ba-a1dd3d66b394" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">自動中断のリアルタイムのオン・オフのサンプルコードを考えておく。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">AutoPauses をプロパティー化し、リアルタイムでの切り換えを試みる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">大きな変更が必要になる。元々の想定では、nStopwatch は、インスタンスの生成直後に AutoPauses が設定され、一度も変更されないクラスだった。しかし、タイマーとして実際に使うにおいては、AutoPauses の動的な変更が不可欠。</p>
                            <p class="note_contents">AutoPauses が false にされたとき、実装としては、NextAutoPausingUtc を null にしてループから抜けさせるのがシンプル。しかし、false にされた次の瞬間に true にされると、「もうすぐ終わるはずのループ」が終わるより先に新しいものが作られ、NextAutoPausingUtc が true に戻り、二つとも回るだろう。</p>
                            <p class="note_contents">それを回避するには、ループを抜けるためのフラグを NextAutoPausingUtc 以外に用意し、それは Task のインスタンスごとに固有のものとする選択肢がある。Task のインスタンスへの参照とその KILL フラグを辞書または Tuple の配列で管理することになる。</p>
                            <p class="note_contents">しかし、それでは複雑すぎる。アホな仕様にして CPU に頼るのが良い時代。</p>
                            <p class="note_contents">そのため、nStopwatch を、インスタンス生成と同時に Task が作られる仕様に変更する。これは Reset でも止まらず、Dispose によってのみ止まるように。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">「AutoPauses を変更したければ、このようにしてください」の情報を整理するつもりだったが、設計を大きく変更することになったので、このタスクは却下。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="85513edb-b1a2-4ef2-8d18-5c724d56c682" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">全プロジェクトの *Safely を *_lock に変更</span>
                    <a href="#85513edb-b1a2-4ef2-8d18-5c724d56c682" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">safe には、1) 必要に応じて lock される、2) 空の catch でエラーが捕捉される、3) タイムアウトするので無限ループにならない、などの場合がある。全てを *Safely とすると、内部的にどうなっているかがコードを見ない限り分からない。</p>
                            <p class="note_contents">_lock, _catch, _timeout あたりをメソッド名にいくつでもつなげる仕様の方が良い。</p>
                            <p class="note_contents">*Safely は、プロパティーの命名において困る。UserName を UserNameSafely, UserNameSafe, SafeUserName のようにするのは、いずれも問題がある。UserName_lock により、「これは lock が必要なことがあるものだから、自動的にそうされますよ」が分かるのが、見た目は美しくないが、機能的には最善。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="22f45541-8553-4607-8549-2d6cb541d420" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">iStopwatchTester を消す</span>
                    <a href="#22f45541-8553-4607-8549-2d6cb541d420" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">LINQ の挙動が面白くてコードとコメントを残したが、nStopwatch を全面的に見直した今、存在価値が乏しい。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="92f3b18a-07d2-4b7c-b6e5-7b8812e1f069" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nStopwatch などの実装を見直す</span>
                    <a href="#92f3b18a-07d2-4b7c-b6e5-7b8812e1f069" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">古いメモの繰り返しになるが、Start/Resume のたびに Task を作る実装では、Pause/Stop の次の瞬間に Start/Resume が行われた場合に一つ前の Task が止まらない可能性がある。</p>
                            <p class="note_contents">最後にコミットしたコードは、以下の通りである。</p>
                            <p class="note_contents">AutoPausingTask = Task.Run (() =&gt;<br />
                                {<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;try<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;{<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Interlocked.Increment (ref ThreadCount);</p>
                            <p class="note_contents">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (true)<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// lock 内の lock だが、別スレッドなので関係なし</p>
                            <p class="note_contents">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lock (Locker)<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (IsRunning == false || NextAutoPausingUtc == null)<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</p>
                            <p class="note_contents">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (DateTime.UtcNow &gt;= NextAutoPausingUtc)<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iPauseOrStop (true);<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>
                            <p class="note_contents">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.Sleep (AutoPausingThreadSleepTimeout);<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;}</p>
                            <p class="note_contents">&nbsp;&nbsp;&nbsp;&nbsp;finally<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;{<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Interlocked.Decrement (ref ThreadCount);<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;}<br />
                                });</p>
                            <p class="note_contents">このループが過ごす時間のほとんどは Thread.Sleep なので、この間に IsRunning と NextAutoPausingUtc の両方が true と null 以外に戻れば、もう AutoPausingTask に参照が関連付けられていない方の古い Task のインスタンスの while ループが break されない。</p>
                            <p class="note_contents">いろいろな実装を試みて右往左往したが、最終的には、「コンストラクターで Task を作り、Dispose でそれを止める」という、とにかくシンプルな仕様になった。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="791a7e63-1ed8-4a6f-af59-7fa9e6b415e5" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">0.0.2 としてアーカイブ</span>
                    <a href="#791a7e63-1ed8-4a6f-af59-7fa9e6b415e5" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">0.0.1 からの差分を再チェック。nStopwatch が意外と難しく、ややグダグダになった。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="71c32067-d65f-427e-85da-75e452901e2f" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">断続的な処理の経過時間を扱えるようにする</span>
                    <a href="#71c32067-d65f-427e-85da-75e452901e2f" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">スレッド処理をどう行うか。</p>
                            <p class="note_contents">別スレッドで勝手に計測するインスタンスを作り、○分以内に繰り返しノックすれば計測が止まらないようにする？</p>
                            <p class="note_contents">KeyDown などを拾ってノックするだけでよいので使いやすいが、安定性はどうか。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">nStopwatch を書いた。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="f160496f-2e4e-4ad9-b3cb-151980307155" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nConvert のメソッドをそれぞれの型のためのクラスに移動</span>
                    <a href="#f160496f-2e4e-4ad9-b3cb-151980307155" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="7c9dc2c6-5c41-43b4-90af-6f0458362ec5" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">空のディレクトリーやファイルを消せるようにする</span>
                    <a href="#7c9dc2c6-5c41-43b4-90af-6f0458362ec5" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">BOM だけのファイルを消さない。文字列としては空だが、エンコーディングの情報が存在すると解釈できる。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="74999363-16fb-4010-a719-17bb6995f66c" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">nChar に ASCII の記号などの主要な文字を入れる</span>
                    <a href="#74999363-16fb-4010-a719-17bb6995f66c" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">なくてよい。空白のみ \x20 と書けば十分。定数にしてしまうと文字列中に使いにくい。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ASCII の文字の正式名。</p>
                            <p class="note_contents">The Unicode Standard, Version 15.0<br />
                                <a href="https://unicode.org/charts/PDF/U0000.pdf" target="_blank" class="url">https://unicode.org/charts/PDF/U0000.pdf</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="d39e23c0-08cc-4be6-9cb9-3c683ea88686" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">CRC32 を扱えるようにする</span>
                    <a href="#d39e23c0-08cc-4be6-9cb9-3c683ea88686" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">できれば外部 DLL なしで。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">多数のファイルと、別の多数のファイルを比較し、一つ目の集合のファイルのうち二つ目の集合に含まれないものを特定するような処理においては、まずハッシュコードを比較することになる。</p>
                            <p class="note_contents">CRC32 ではコリジョンがどのくらい起こる？</p>
                            <p class="note_contents">長さの一致する二つのファイルのハッシュコードがたまたま一致することが天文学的な低確率になり、それでいてハッシュコード同士の比較のコストが十分に小さいアルゴリズムがあるだろうから、そちらが使いやすければ CRC32 は不要。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">NuGet で System.IO.Hashing.dll を追加することにより、System.IO.Hashing.Crc32.Hash などを使える。ラップする必要がない。</p>
                            <p class="note_contents">Crc32.Hash Method (System.IO.Hashing) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.io.hashing.crc32.hash" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.io.hashing.crc32.hash</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="1169f784-f754-4b69-85c6-5f493fcf8d14" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">.NET の GetHashCode について調べる</span>
                    <a href="#1169f784-f754-4b69-85c6-5f493fcf8d14" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">おぼろげだが、以前は文字列をハッシュコードにする .NET の実装が良くなく、Java のアルゴリズムを移植しては、その後、.NET の方が良くなったか、Java のものも問題を言われるようになって改善されたかがあり、それからは .NET の実装に頼るようになったような記憶がある。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">他者も書いているが、.NET の根幹を成す実装なので大丈夫だろう。ここをほじくることに生産性はない。</p>
                            <p class="note_contents">c# - Hash quality and stability of String.GetHashCode() in .NET? - Stack Overflow<br />
                                <a href="https://stackoverflow.com/questions/2099998/hash-quality-and-stability-of-string-gethashcode-in-net" target="_blank" class="url">https://stackoverflow.com/questions/2099998/hash-quality-and-stability-of-string-gethashcode-in-net</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="d878019c-bce1-47cc-8ab9-2d7d47d186e4" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">TryDeleteDirectory などについて考える</span>
                    <a href="#d878019c-bce1-47cc-8ab9-2d7d47d186e4" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">うろ覚えだが、.NET の実装では、何かが初めから存在しなくて消せなくてもエラーにならないメソッドと、そういう状況だとエラーになるものの両方があったと思う。どちらでもエラーにならず、bool で結果が返ってくるものがあると便利だろう。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">シンプルに、元々なくても問題にならない Delete を作った。また、そのことを &lt;summary&gt; に書いた。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="0b73924f-9302-4310-ae0a-8e7a04e797cb" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">内容が変わる場合のみファイルに書き込むメソッドを追加</span>
                    <a href="#0b73924f-9302-4310-ae0a-8e7a04e797cb" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">内容がなくなるならファイルを消すとか、消した場合、上位ディレクトリーを見ていき、空でないものが見つかるまで空のものを消すとかもオプションで可能に。上位ディレクトリーがないなら作成してから書き込むのも便利。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">File クラスには、*Async メソッドがある。その一例を挙げる。</p>
                            <p class="note_contents">File.WriteAllTextAsync Method (System.IO) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.io.file.writealltextasync" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.io.file.writealltextasync</a></p>
                            <p class="note_contents">ストレージがものすごく遅く、RAM がものすごく大きいパソコンがあるとする。そういうパソコンでの巨大なバッファーの書き込みでソフトがフリーズしないためには、*Async を活用することになる。</p>
                            <p class="note_contents">しかし、内容が変わる場合のみの処理の難しさは、変わっていないか照合する処理もまた、上記のパソコンでは時間が掛かるということ。その過程においてもソフトがフリーズしてはならない。</p>
                            <p class="note_contents">非同期処理について、もう少しちゃんと学ぶ必要がありそう。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">次のページを読んだ。</p>
                            <p class="note_contents">Asynchronous programming in C# | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">以下のページにもザッと目を通した。同じようなことを何度も説明しているが、よく分からない。自分で作ってみないといけない。</p>
                            <p class="note_contents">Asynchronous programming - C# | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/csharp/async" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/csharp/async</a></p>
                            <p class="note_contents">The Task Asynchronous Programming (TAP) model with async and await (C#)&quot; | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model</a></p>
                            <p class="note_contents">Async return types (C#) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/async-return-types" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/async-return-types</a></p>
                            <p class="note_contents">Cancel a list of tasks (C#) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks</a></p>
                            <p class="note_contents">Cancel async tasks after a period of time (C#)&quot; | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time</a></p>
                            <p class="note_contents">Process asynchronous tasks as they complete | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete</a></p>
                            <p class="note_contents">Asynchronous file access (C#) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/using-async-for-file-access" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/using-async-for-file-access</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">とても分かりやすかった。</p>
                            <p class="note_contents">C# async await explained - NDepend<br />
                                <a href="https://blog.ndepend.com/c-async-await-explained/" target="_blank" class="url">https://blog.ndepend.com/c-async-await-explained/</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">復習のため、ザッと目を通した。</p>
                            <p class="note_contents">Async And Await In C#<br />
                                <a href="https://www.c-sharpcorner.com/article/async-and-await-in-c-sharp/" target="_blank" class="url">https://www.c-sharpcorner.com/article/async-and-await-in-c-sharp/</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">nFile.AppendAllBytesAsync の実装が意外と難しい。非同期処理については、そちらに引き継ぐ。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">内容が変わる場合のみの書き込みについては、気になる点があるため実装を見送る。</p>
                            <p class="note_contents">それがそのプログラムのみからアクセスされるファイルなら、最初のロードのときのデータを残しておくか、その内容が展開されてのインスタンスの内容が変更されたかどうかをフラグで判別するべき。書き込む直前にもう一度読み出すのは無駄な処理。</p>
                            <p class="note_contents">それがそのプログラム以外からもアクセスされるファイルなら、「変わっていればこちらのデータで上書き」というのは危険。衝突しにくいファイル名で個別に書き出すとか、既存のファイルの名前を変更してからにするとかの安全策が不可欠。</p>
                            <p class="note_contents">いずれのケースにおいても、より良い設計が必要。</p>
                            <p class="note_contents">同じ内容での書き込みの回避は、SSD を傷めたくなく、また、タイムスタンプを変更したくないため。その実現には、たいてい、変更されたかどうかのフラグが最善。二度読みが前提のメソッドは不要。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="997da2a4-7355-4ade-96fa-46bed0620542" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nFile.AppendAllBytesAsync を実装</span>
                    <a href="#997da2a4-7355-4ade-96fa-46bed0620542" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">いろいろと調べながらの実装になると覚悟したが、FileStream の使用によりサクッと実装できてしまった。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="8ee52ada-1073-4fd9-9c63-6163869fa3eb" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">テキストファイルの UTF エンコーディングを判別できるようにする</span>
                    <a href="#8ee52ada-1073-4fd9-9c63-6163869fa3eb" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="2e4b12a9-e5df-48ac-bcc5-028ce32b43a9" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ディレクトリーの移動やコピーを実装</span>
                    <a href="#2e4b12a9-e5df-48ac-bcc5-028ce32b43a9" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="7b059693-6b28-4f02-8da5-388e22c954d8" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nPath クラスを追加</span>
                    <a href="#7b059693-6b28-4f02-8da5-388e22c954d8" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Path.Combine では、二つ目以降の引数が絶対パスだとそれが新しいベースパスになる。ユーザーからの入力をそのままつなげることがそもそもあり得ないが、そういう実装だと、この仕様はセキュリティーリスクになる。</p>
                            <p class="note_contents">よりシンプルに「つなげる」ということだけを行う Path.Join が推奨される。</p>
                            <p class="note_contents">Path.Combine Method (System.IO) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.io.path.combine" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.io.path.combine</a></p>
                            <p class="note_contents">Path.Join Method (System.IO) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.io.path.join" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.io.path.join</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">パスの処理では、たとえば、</p>
                            <p class="note_contents">C:\Hoge\Poge\1<br />
                                C:\Hoge\Moge\..\Poge</p>
                            <p class="note_contents">において、一つ目が二つ目のサブディレクトリーかどうかや、二つ目から見ての一つ目の相対パスを確実に得るのが意外と難しい。</p>
                            <p class="note_contents">いずれ、そういう処理を作り込むことになるため、nPath を作り、まずは Join からきちんとまとめる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">nPath.Join を書いた。残りは必要になってから。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="4b43d2e3-6541-4163-90c0-bd5d7a8a2e6a" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">文字単位のエスケープ・アンエスケープのクラスを試作</span>
                    <a href="#4b43d2e3-6541-4163-90c0-bd5d7a8a2e6a" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">\r を \\r にしたり、&lt; を &amp;lt; にしたりを単一のクラスに任せると、どのくらいパフォーマンスが落ちる？</p>
                            <p class="note_contents">Func まみれになる恐れがある。</p>
                            <p class="note_contents">C 言語のような処理のみに限定するなら使えるか。</p>
                            <p class="note_contents">JSON が 0x20 未満もエスケープすると読んだ記憶があるので確認。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">気が進まない。仕様が決まっていての変換なので、それぞれに合わせて最適化するべき。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="ab19150f-4e91-46c6-83b2-66c999d02d8a" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents"><a href="https://github.com/microsoft/STL/tree/main/stl/src" target="_blank" class="url">https://github.com/microsoft/STL/tree/main/stl/src</a> をチェック</span>
                    <a href="#ab19150f-4e91-46c6-83b2-66c999d02d8a" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">少し見たが、設計も実装も古すぎる。Nekote に実装するべき機能を探すには向かない。よりモダンな言語を参考に。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="86cb74ef-196b-42fc-9804-a6182cba569b" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents"><a href="https://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/hierarchy.html" target="_blank" class="url">https://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/hierarchy.html</a> をチェック</span>
                    <a href="#86cb74ef-196b-42fc-9804-a6182cba569b" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">何となく次のページを開いたが、特に参考になる情報はなかった。全体的に設計も実装も古い。</p>
                            <p class="note_contents">libstdc++: std::vector&lt; _Tp, _Alloc &gt; Class Template Reference<br />
                                <a href="https://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a08551.html" target="_blank" class="url">https://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a08551.html</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="60bad407-06be-40ec-a324-07a7465d244d" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nLibrary.ThreadCount をライブラリーのユーザーが変更できないようにする</span>
                    <a href="#60bad407-06be-40ec-a324-07a7465d244d" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="10fcbaff-e0b3-4f8f-a85d-2c3ddd1916c3" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">TimeSpan の平均を計算する方法を調べる</span>
                    <a href="#10fcbaff-e0b3-4f8f-a85d-2c3ddd1916c3" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="260279ff-2cfd-4c43-9b4f-b209dd4c85dd" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">処理中であることをコンソールに表示するメソッドを追加</span>
                    <a href="#260279ff-2cfd-4c43-9b4f-b209dd4c85dd" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">| / - \ をくるくると回したい。他の記号で工夫している人もいるだろうから探す。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">いろいろな UI やページで砂時計が回ったり、円状のものが回ったり。回るというのが最も直感的なので、最初の案で。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="b3dc5c16-d8c9-475f-83f2-50d15268322f" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">拡張メソッドの名前が衝突した場合の挙動をチェック</span>
                    <a href="#b3dc5c16-d8c9-475f-83f2-50d15268322f" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Nekote の二つのクラスに Trim (this string ...) を追加し、&quot;&quot;.Trim を呼んだところ、.NET のものが呼ばれた。追加したものを二つとも Trim1 に変更し、&quot;&quot;.Trim1 を呼ぼうとすれば、どちらか分からないとのエラーになった。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="217c16cc-9804-43f2-84c3-f5b3caf88f62" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">string 型の引数の名前も value とすることについて書く</span>
                    <a href="#217c16cc-9804-43f2-84c3-f5b3caf88f62" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">string は、int などと異なり ValueType を継承しない。</p>
                            <p class="note_contents">String Class (System) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.string" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.string</a></p>
                            <p class="note_contents">Int32 Struct (System) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.int32" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.int32</a></p>
                            <p class="note_contents">となると value より text などの方が引数名として適する気もするが、.NET でも string クラスのメソッドなどにおいて value が多用されているため、それにならう。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="5b4fb146-dd79-4b49-9c74-9e7ef1cfb070" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ジェネリックの where を付けるべきところを探す</span>
                    <a href="#5b4fb146-dd79-4b49-9c74-9e7ef1cfb070" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">struct は、System.ValueType を指定できない代わりのもの。</p>
                            <p class="note_contents">where (generic type constraint) - C# Reference | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/where-generic-type-constraint" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/where-generic-type-constraint</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">nArray のメソッドに where ValueType: struct を入れる。string など、ValueType を継承しないものを配列に詰め込んで比較やシャッフルなどの処理を行う可能性は低い。そういうことには LINQ が適する。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="d665a46c-d85e-45d1-abf0-00542c1ea7ba" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://learn.microsoft.com/en-us/dotnet/api/system.collections.istructuralequatable" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.collections.istructuralequatable</a> をチェック</span>
                    <a href="#d665a46c-d85e-45d1-abf0-00542c1ea7ba" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="fe65104f-f22d-4491-95bc-2abe38be0648" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">配列の照合のスピードを比較</span>
                    <a href="#fe65104f-f22d-4491-95bc-2abe38be0648" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Enumerable.SequenceEqual がどのくらい遅いか。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">このあたりもチェックする。</p>
                            <p class="note_contents">MemoryExtensions.SequenceEqual Method (System) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.sequenceequal" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.sequenceequal</a></p>
                            <p class="note_contents">MemoryExtensions.SequenceCompareTo Method (System) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.sequencecompareto" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.sequencecompareto</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Memory &lt;T&gt; 構造体（クラスでない）も速いそうなので試す。</p>
                            <p class="note_contents">Memory&lt;T&gt; Struct (System) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.memory-1" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.memory-1</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">次のページにベンチマークの結果がある。</p>
                            <p class="note_contents">Compare Arrays in C# - Code Maze<br />
                                <a href="https://code-maze.com/csharp-compare-arrays/" target="_blank" class="url">https://code-maze.com/csharp-compare-arrays/</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">EqualityComparer &lt;T&gt;.Default の速度を調べる。== と Equals が内部的に同じかどうかも。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">index + temp と、index ++ との比較も。*.Length を他のところに取るかどうかも。細かい工夫それぞれに本当に意味があるかどうか。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">MemoryExtensions.SequenceEqual が圧倒的に速いと分かったので、細かい調査を省略した。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="dd7da7fb-8717-471c-8f38-24f0228ed9ca" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nTimeSpan.Average を追加</span>
                    <a href="#dd7da7fb-8717-471c-8f38-24f0228ed9ca" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="5e85bf9a-7d5a-4f28-90e9-6efacc125c45" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ジェネリッククラスのフィールドの Nullable について調べる</span>
                    <a href="#5e85bf9a-7d5a-4f28-90e9-6efacc125c45" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">class Hoge &lt;Type&gt;<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;public Type Moge;</p>
                            <p class="note_contents">を用意する。</p>
                            <p class="note_contents">そのままでは「null 非許容の フィールド &#39;Moge&#39; には、コンストラクターの終了時に null 以外の値が入っていなければなりません。フィールド を Null 許容として宣言することをご検討ください」と言われる。</p>
                            <p class="note_contents">従わず、public Type Moge = default とすると、「Null 参照代入の可能性があります」と言われる。</p>
                            <p class="note_contents">他に選択肢がなくて public Type? Moge とすると、何も言われなくなる。</p>
                            <p class="note_contents">この状態で Console.WriteLine (new Hoge &lt;string&gt; ().Moge == null) → True というのはイメージ通り。</p>
                            <p class="note_contents">しかし、string を int にすると、「型 &#39;int&#39; の値が型 &#39;int?&#39; の &#39;null&#39; に等しくなることはないので、式の結果は常に &#39;false&#39; になります」と言われる。</p>
                            <p class="note_contents">new Hoge &lt;int&gt; () により public Type? Moge は public int? Moge となり、これはつまり public Nullable &lt;int&gt; Moge なのだろうから、null との比較は可能なはず。</p>
                            <p class="note_contents">しかし、得られたメッセージだけに基づいて考えるなら、new Hoge &lt;int&gt; () だと public int Moge になるようだ。実際、Console.WriteLine (new Hoge &lt;int&gt; ().Moge == 0) → True になる。</p>
                            <p class="note_contents">暗黙的な型変換または演算子のオーバーロードの可能性を考え、Console.WriteLine (new Hoge &lt;int&gt; ().Moge.GetType ().Name) を実行したところ、Int32 と表示された。</p>
                            <p class="note_contents">理由が不詳だが、「Type? でフィールドを宣言しても Nullable にならない」「Nullable にしたければ int? などを指定」というのは間違いない。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">この仕様は、理にかなっているとも思える。</p>
                            <p class="note_contents">以前は、? は、int などに付けるものだった。そのうち string? などが出てきた。</p>
                            <p class="note_contents">int などに付ける ? は、Nullable 構造体の糖衣構文と認識している。</p>
                            <p class="note_contents">一方、string などに付ける ? は、元々の型を変更することなく、コンパイラーがより多くのミスを見付けられるようにする目印に過ぎないものと認識している。こちらの ? は、本質的には何も変えない。</p>
                            <p class="note_contents">もし Type? により Moge が、</p>
                            <p class="note_contents">struct → Nullable &lt;...&gt;<br />
                                class → コンパイラーが考慮するだけで何も変わらない</p>
                            <p class="note_contents">という扱いなら、値型により「値が常に存在するフィールド」を用意できない。</p>
                            <p class="note_contents">しかし、Type で宣言させると、コンストラクターの終了時に値が入っていないフィールドになり、それはそれでコンパイラーとしては警告しなければならない。</p>
                            <p class="note_contents">どちらもイマイチだから、便宜的に、</p>
                            <p class="note_contents">int → 0で初期化される値型のフィールド<br />
                                int? → null で初期化される Nullable &lt;int&gt;<br />
                                string → null で初期化される参照</p>
                            <p class="note_contents">という仕様にしたのかもしれない。</p>
                            <p class="note_contents">Type? に &lt;int?&gt; だと public int?? Moge と、つまり、public Nullable &lt;Nullable &lt;int&gt;&gt; Moge のようなことになるのでないかと気になったが、実際やってみてそうならないので、「Type? で宣言して default を設定」でしばらく様子見。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">次のページも参考になる。</p>
                            <p class="note_contents">C# 10.0 improves handling of nullable references in generic types - no more AllowNull | endjin - Azure Data Analytics Consultancy UK<br />
                                <a href="https://endjin.com/blog/2022/02/csharp-10-generics-nullable-references-improvements-allownull" target="_blank" class="url">https://endjin.com/blog/2022/02/csharp-10-generics-nullable-references-improvements-allownull</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Type? Moge のコードに、</p>
                            <p class="note_contents">public void Poge (Type? value = default)<br />
                                {<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;Moge = value;<br />
                                }</p>
                            <p class="note_contents">を追加し、new Hoge &lt;int&gt;.Poge (null) としたところ、やはり「ジェネリックだと値型 + ? は便宜的に値型になる」という法則があるようで、コンパイルできなかった。引数が int? value でなく int value となっているようだった。</p>
                            <p class="note_contents">引数をなくして Poge を呼んだところ、default により value == 0 となり、Moge には0が入った。</p>
                            <p class="note_contents">&lt;int?&gt; で new すれば、Poge に null を渡せたし、引数なしで呼んでも Moge が null になった。</p>
                            <p class="note_contents">イレギュラーだが、一貫している仕様なので、慣れてしまうのが早い。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="43c928b0-dd25-411c-97a0-475dd6277075" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nFile.AppendAllBytesAsync において using 内で FileStream.WriteAsync を呼んでよいか調べる</span>
                    <a href="#43c928b0-dd25-411c-97a0-475dd6277075" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">試したところ落ちたので、テストコードを iAsyncAwaitTester.TestEverything にまとめ、nFile.AppendAllBytesAsync を更新した。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="c6641bfb-e733-4260-8ff3-b182ed62953b" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nStopwatch* の Data と Tag を一つに統合</span>
                    <a href="#c6641bfb-e733-4260-8ff3-b182ed62953b" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">.NET の挙動の再確認のために iGenericTester.TestNullability を追加した。その上で Data と Tag を一つに統合した。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="ad097c9f-bf6b-4727-a422-b336be954864" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">Random 関連のスピードを比較</span>
                    <a href="#ad097c9f-bf6b-4727-a422-b336be954864" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">new した Random をそのまま使うのと、lock を挟んで使うのと、Random.Shared を使うのと、RandomNumberGenerator を使うのと、ゆるく関連している Guid.NewGuid を使うのとを比較。Random 以外にも lock をかませてみる。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="4fbc4635-3c69-4428-9aea-8a07c3d0ded1" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">メソッド名などを見直す</span>
                    <a href="#4fbc4635-3c69-4428-9aea-8a07c3d0ded1" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">CompareSpeedsOfComparingArrays は、CompareComparisonSpeeds の方がシンプル。比較以外を行うものや、配列以外が対象のものをいずれ追加することも想定しての命名だったが、テストコードはライブラリーを使う側に影響を与えないため、困ってから改名すればよい。iArrayTester なのだから、対象が配列なのは分かる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">StartWritingToFile などに i を付け忘れているので修正。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">_lock が野暮ったいので廃止。なくし、&lt;summary&gt; を付ける。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="9f89f4a1-d72d-477b-8092-03ed2a57d736" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">DateTimeOffset と long の関係について調べる</span>
                    <a href="#9f89f4a1-d72d-477b-8092-03ed2a57d736" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">DateTimeOffset は、UTC の値と、そこからの時差の値を持つ。DateTime は、特定の点からの時差のみを持ち、それが UTC だというフラグが立っていれば UTC として、そうでなければローカルの日時として扱われる。DateTime における UTC とローカルの日時との間の変換は、時差データを実行環境に依存するようで、不確実。タイムゾーンによらず、確実に UTC に戻したいものには DateTimeOffset が適する。</p>
                            <p class="note_contents">DateTimeOffset Struct (System) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset</a></p>
                            <p class="note_contents">DateTime.ToUniversalTime Method (System) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.datetime.touniversaltime" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.datetime.touniversaltime</a></p>
                            <p class="note_contents">DateTime.ToLocalTime Method (System) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tolocaltime" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tolocaltime</a></p>
                            <p class="note_contents">long との関係については、DateTimeOffset, DateTime の両方において、UtcTicks とのラウンドトリップが可能。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="aaba64fb-42c4-4d73-8bdd-306aa391ddac" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">Tuple が変更不可能になっている理由を調べる</span>
                    <a href="#aaba64fb-42c4-4d73-8bdd-306aa391ddac" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">たとえば配列の AsSpan を呼ぶと変更可能な Span が得られ、文字列だと ReadOnlySpan が得られる。string は添え字などによる文字の変更が認められないクラスなので理にかなう。</p>
                            <p class="note_contents">しかし、Select (x =&gt; (Hoge: ..., Moge: ...)) のようなことをしただけで Hoge も Moge も変更不可能なのは、そうでないといけない理由が分からない。ドキュメントに答えがないか調べる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">以下のページをザッと読んだ。変更不可能でないといけない理由は分からないままだが、今回はこのくらいで。</p>
                            <p class="note_contents">.net - Why Tuple&#39;s items are ReadOnly? - Stack Overflow<br />
                                <a href="https://stackoverflow.com/questions/3131400/why-tuples-items-are-readonly" target="_blank" class="url">https://stackoverflow.com/questions/3131400/why-tuples-items-are-readonly</a></p>
                            <p class="note_contents">Tuple types - C# reference | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-tuples" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-tuples</a></p>
                            <p class="note_contents">ValueTuple Struct (System) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.valuetuple" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.valuetuple</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="1bd16b40-c93d-47d4-bbdd-0f0a2af310db" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">C# の多次元配列について調べる</span>
                    <a href="#1bd16b40-c93d-47d4-bbdd-0f0a2af310db" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ほとんど使ったことがない。毎回、List に List を入れるなどの実装を行っていた。</p>
                            <p class="note_contents">[,] 系の場合、最初に全体の大きさの把握が必要。[][] 系のジャグ配列の場合、各部の初期化がめんどくさい。ツリー構造になっていなくて、特定の次元の取得がやりにくい印象がある。記憶違いの可能性もあるため、使い込んでいるコードを探す。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">二つ以上のインデックスを指定でき、それらの積に基づく容量が確保される点を除き、ただの配列のようだ。たとえば [2, 3] で new した場合、内部的には [2 * 3] で生成され、[x * 3 + y] で読み書きされていると考えてよいかもしれない。</p>
                            <p class="note_contents">まずは3次元でイメージし、立方体のうち「面」を取るには、GetDimension のようなもの、またはそれを内部的に呼ぶ this を使うのだと思ったが、そういったものが見当たらなかった。イテレーターや Span を取っても効率に限界がありそう。</p>
                            <p class="note_contents">自分が使ってみたときには、Enumerable.Range による集計に妥協することになった。他者はどうやっているか調べたところ、他者も Range を提案していた。</p>
                            <p class="note_contents">多次元配列は、次元数と要素数が事前に分かっていて、入れ子のループでの読み書きが実装として最適なところでは使えるが、それ以外では避けるべきだろう。</p>
                            <p class="note_contents">How to extract one array from a multidimensional array in C# - Stack Overflow<br />
                                <a href="https://stackoverflow.com/questions/58595180/how-to-extract-one-array-from-a-multidimensional-array-in-c-sharp" target="_blank" class="url">https://stackoverflow.com/questions/58595180/how-to-extract-one-array-from-a-multidimensional-array-in-c-sharp</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="cf74588d-f9e5-446c-b715-349e0f8246f7" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nArray.Compare を追加</span>
                    <a href="#cf74588d-f9e5-446c-b715-349e0f8246f7" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="73d2841a-d173-448d-9735-605f250da7c2" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">要素のシャッフルなど、Enumerable にできないようである処理を実装</span>
                    <a href="#73d2841a-d173-448d-9735-605f250da7c2" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">アルゴリズムとデータ構造に関する本をザッと見るか。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="6c04be62-1de7-4365-94cf-4115270484a9" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">バイト列の基本的な処理のためのクラスを追加</span>
                    <a href="#6c04be62-1de7-4365-94cf-4115270484a9" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">探したりコピーしたり。</p>
                            <p class="note_contents">ベタ書きするのは最速でない。うろ覚えだが、探す場合、内部で OS の機能が使われるか何かで Array.IndexOf が速かった記憶が。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Equals がある。Compare も追加する。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Fill は .NET のもので足りる。さらに Repeat がほしい。LINQ でやれるが、もっとシンプルなメソッドを。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Sort, Reverse があるのに Shuffle がないので実装する。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">検索系では、Contains, ContainsAny, IndexOf, IndexOfAny, LastIndexOf, LastIndexOfAny あたりを。単一の要素を探すのか、配列を探すのか、複数の要素のうち any を探すのか、複数の配列で同じことをするのかも。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">メソッドを作るほどでないが、Swap も一応。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Rotate も一応。アルゴリズムの本で読んだ記憶がある。要素のスライドについて教えやすいからか。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Insert, Remove も必要。どちらも配列の「有効部分」の長さが変わる点においてイレギュラー。</p>
                            <p class="note_contents">Insert により範囲外へのアクセスになる問題には対処しない。</p>
                            <p class="note_contents">List では Insert は要素一つの挿入で、Remove は要素への参照を指定してのそれ自体の削除。複数の要素を追加するには IEnumerable &lt;T&gt; を取る InsertRange を、指定した範囲の削除には RemoveRange を呼ぶことになる。</p>
                            <p class="note_contents">名前が冗長なので nArray では Insert/Remove にするが、他との衝突などを再考してから。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Replace, ReplaceAny も作る。少し大変な作業になるかもしれない。</p>
                            <p class="note_contents">いずれにも IndexOf などと同様にさまざまな引数を与えられるようにする。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Copy, CopyBackward も追加。後者は Insert に必要。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">List では GetRange により一部のみを参照の浅いコピーとしてもらえる。しかし、最近の .NET の作法では AsSpan に範囲を指定して Span/ReadOnlySpan を取得しての処理が一般的のようなので、いったん実装を見送る。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Repeat は Enumerable にもある。こちらは単一の要素のリピートのみ。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">いろいろと実装する予定だったが、MemoryExtensions のもので代用が利くものを省いた。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="38b23fd6-68c1-4c11-b107-9b39211f7d12" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">集計に適したクラスを追加</span>
                    <a href="#38b23fd6-68c1-4c11-b107-9b39211f7d12" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">基本的には、ラベル、T 型の複数の値、それらの合計や平均、といったものが必要。</p>
                            <p class="note_contents">多次元配列またはジャグ配列でやろうとしたが、添え字を意識する必要のないものがほしい。そうでないと、「これとこれの間でこれもチェックしたい」のようなときに後続のコードの多くの場所において添え字を更新することになる。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ラベルは多次元の構造と別個のものなので、このクラスで扱わない。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="5bef2989-5d6a-4cf6-b4dc-4d862f7859d7" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">自動的に大きくなるジャグ配列のクラスを追加</span>
                    <a href="#5bef2989-5d6a-4cf6-b4dc-4d862f7859d7" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">xResults [1, 2, 3] = 4 のようなことを準備なしでやりたい。これは、xResults.GetChild (1).GetChild (2).GetChild (3).SetValue (4) と同じこと。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">よりシンプルな実装で nMultiArray を作った。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="2efb40a2-d634-4bc0-9867-26bbb42bb4ee" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">シャッフルの速度を比較</span>
                    <a href="#2efb40a2-d634-4bc0-9867-26bbb42bb4ee" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Select で Guid.NewGuid の列を追加し、そちらでソートする方法をたまに目にする。どのくらい遅いのか。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">nArray.Shuffle との比較を、nMultiArray を用いて行うメソッドを追加した。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="824e06fb-f2f2-4c53-b12d-41ab41b46132" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">文字列を行や段落に分けられるようにする</span>
                    <a href="#824e06fb-f2f2-4c53-b12d-41ab41b46132" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="edede340-a713-405c-85b0-36ae68d87a35" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">yield return の内部的な仕組みを学ぶ</span>
                    <a href="#edede340-a713-405c-85b0-36ae68d87a35" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">内部的な仕組みまでは調べなかったが、一応、次のページを読んだ。</p>
                            <p class="note_contents">yield statement - provide the next element in an iterator | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/yield" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/yield</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="1ccd3a09-96c6-4895-8062-e72b84261518" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">例外情報の3文字インデントを4文字に変更できるようにする</span>
                    <a href="#1ccd3a09-96c6-4895-8062-e72b84261518" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">インデントの1単位の幅は人により異なる。2文字の人も多いし、自分も以前は2文字だった。3文字の人も、いないわけではないようだ。</p>
                            <p class="note_contents">allow user to define tab sizes: 2, 3, 4, ... spaces &#183; Discussion #3404 &#183; community/community<br />
                                <a href="https://github.com/community/community/discussions/3404" target="_blank" class="url">https://github.com/community/community/discussions/3404</a></p>
                            <p class="note_contents">3文字を4文字にすれば、4文字を1単位とみなす決め打ちの仕様において「1段分のインデント」を認識し、たとえば HTML の出力時には &amp;nbsp; を並べるのでなく margin-left を使うなどが可能。元々そういう目的で4文字への変更を考えた。</p>
                            <p class="note_contents">インデント幅の個人差により、「戻す」というのはやはり現実的でないと感じる。</p>
                            <p class="note_contents">それでも3文字から4文字への変更を実装する。インデントを扱う機能のテストになるし、そういう機能があれば、やらない理由もない処理だから。例外は頻繁に飛ぶわけでなく、そのインデントを調整することはナノ秒単位の誤差。</p>
                            <p class="note_contents">Nekote では、コンソールアプリにおいて次のような表示も考えている。</p>
                            <p class="note_contents">エラーが発生しました:<br />
                                □□□□ここから Exception 系クラスの ToString の結果<br />
                                □□□□□□□□2行目以降が続く</p>
                            <p class="note_contents">このときに2段のインデントのところが少し足りず7文字なのを意図的に放置する理由がない。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">StackTrace.ToString には sb.Append (&quot;□□□&quot;).Append (word_At).Append (&#39;□&#39;) という行が含まれている（「□」は半角空白）。ザッと探した限り、例外情報の出力におけるインデントはこれくらい。</p>
                            <p class="note_contents">StackTrace.cs<br />
                                <a href="https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Diagnostics/StackTrace.cs" target="_blank" class="url">https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Diagnostics/StackTrace.cs</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">例外を投げてキャッチし、それを innerException に指定してさらに投げたものをキャッチしたところ、次のような例外情報になった。</p>
                            <p class="note_contents">System.Exception: Hoge<br />
                                &nbsp;---&gt; System.Exception: Exception of type &#39;System.Exception&#39; was thrown.<br />
                                &nbsp;&nbsp;&nbsp;at ConsoleTester.Program.Main(String[] args) in *\Nekote\ConsoleTester\Program.cs:line 16<br />
                                &nbsp;&nbsp;&nbsp;--- End of inner exception stack trace ---<br />
                                &nbsp;&nbsp;&nbsp;at ConsoleTester.Program.Main(String[] args) in *\Nekote\ConsoleTester\Program.cs:line 21</p>
                            <p class="note_contents">innerException の分でさらにインデントされるわけでもないようなので、「3文字のインデントがあれば4文字にする」との決め打ちの処理で大丈夫。</p>
                            <p class="note_contents">さらに Data プロパティーに情報を入れてみたが、そちらは出力されなかった。他者が Data プロパティーの内容も含めて完全な文字列にする ToString を書いていたので、.NET の実装では無視されるのだろう。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">インデントを処理する機能を追加するのはほぼ確定だが、例外情報においては、&quot;□□□at□&quot; を探す処理が特異なので単独での実装を行った。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="5fa452e0-c6d7-4c13-8604-df2269e3b9a6" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ConsoleTester の Main メソッドに try/catch を入れる</span>
                    <a href="#5fa452e0-c6d7-4c13-8604-df2269e3b9a6" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">例外情報にインデントをつける処理などの実装を急ぐ。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="35c55e37-31fd-4529-9b98-2f849a256f25" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">全ての catch で例外情報を記録</span>
                    <a href="#35c55e37-31fd-4529-9b98-2f849a256f25" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="024a8e80-b14d-48f2-a75f-698c5b456e98" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">文字列の最適化のメソッドを追加</span>
                    <a href="#024a8e80-b14d-48f2-a75f-698c5b456e98" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="914391a4-c3e2-4d02-9c56-7f61abbd0498" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">文字列にインデントを追加するメソッドを追加</span>
                    <a href="#914391a4-c3e2-4d02-9c56-7f61abbd0498" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="5a78c530-5999-427a-9e21-269bb699672e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">Char.ToUpperInvariant などに Ordinal のものがない理由を書く</span>
                    <a href="#5a78c530-5999-427a-9e21-269bb699672e" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">再確認してから。合字に関することだったと思う。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">文字列処理には、Ordinal 系、InvariantCulture 系、CurrentCulture 系の三つがある。それぞれ、「バイト単位」「合字などを認識するが、カルチャーに影響されないもの」「カルチャーに影響されるもの」と認識。</p>
                            <p class="note_contents">たとえば、ヨーロッパでは、アルファベットの a の上に小さな丸を付けた文字が使われる。この文字には1文字の &#229; が用意されているが、a + 特殊な丸（エディターでの挙動が変なので貼り付けない）でも同じ文字を表現できるようだ。コードでは、前者は &quot;\u00e5&quot; に、後者は &quot;\u0061\u030a&quot; になる。これらの文字列を string.Compare で比較する場合、Ordinal 系では不一致になり、InvariantCulture 系では一致する。</p>
                            <p class="note_contents">というところに、Ordinal 系の ToUpper* などがない理由が集約されている。</p>
                            <p class="note_contents">もしかすると、a + 特殊な丸を1文字ずつ大文字にして A + 特殊な丸にするのは、そういう文字もあって問題でないかもしれない。しかし、もし、この特殊な丸は小文字にしか付かないものだとすれば、2文字で1文字と扱われる文字のうち a の部分のみ Ordinal 系のメソッドにより大文字にされて、存在しない文字の組み合わせになるのは、情報の破損である。</p>
                            <p class="note_contents">一方、InvariantCulture 系なら、「この a は次が特殊な丸だから大文字にしてはならない」という判断になり、2文字で &#229; が表現される状態が保たれるかもしれない。（調べたところ &#197; があるようで、a + 特殊な丸においては Ordinal 系で a 単体を A にしても大丈夫そうだが、ここでは、それが不可能と仮定して Ordinal 系のリスクを理解）。</p>
                            <p class="note_contents">上記については、次のページに情報がある。</p>
                            <p class="note_contents">Best Practices for Comparing Strings in .NET | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="9e0b65e7-6fd3-4922-bab9-793eb7b1bc42" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">StringComparer のプロパティーの使い分けについて書く</span>
                    <a href="#9e0b65e7-6fd3-4922-bab9-793eb7b1bc42" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">文字列処理には、Ordinal 系、InvariantCulture 系、CurrentCulture 系の三つがある。</p>
                            <p class="note_contents">いろいろなページに目を通したが、どこで何を使うべきかについては人によって考えが異なる。</p>
                            <p class="note_contents">といったなか、Microsoft によるページが総まとめとしてよくまとまっていた。</p>
                            <p class="note_contents">Best Practices for Comparing Strings in .NET | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings</a></p>
                            <p class="note_contents">改めて文字列処理を考えると、照合と比較はずいぶんと異なる。照合は、同一性の確認による是非の判断が多く、「一致する」との判断には責任やリスクが伴いがち。比較は、ソートに代表される、ユーザーの利便性を高める処理においてよく行われることで、一致するかどうかに責任やリスクが伴わないことが多く、多少の不正確が許容される。</p>
                            <p class="note_contents">漢字には音読みと訓読みがある。たとえば人名をふりがなデータなしで Unicode の文字コード順で並び替えると、絶望的に不正確。a, i, u, e, o は、文字コードの順序が日本語の文字としてのそれとは異なる。そのため、ローマ字をソートには使えない。人名の正確なソートには、やはりふりがなが不可避。</p>
                            <p class="note_contents">そのふりがなも、ひらがなとカタカナが混在する場合には注意が必要。</p>
                            <p class="note_contents">Console.Write (string.Join (&quot;, &quot;, new string [] { &quot;ああ&quot;, &quot;アホ&quot;, &quot;いい&quot; }.OrderBy (x =&gt; x)))</p>
                            <p class="note_contents">を実行すると「ああ, アホ, いい」が表示されるが、</p>
                            <p class="note_contents">Console.Write (string.Join (&quot;, &quot;, new string [] { &quot;ああ&quot;, &quot;アホ&quot;, &quot;いい&quot; }.OrderBy (x =&gt; x, StringComparer.Ordinal)))</p>
                            <p class="note_contents">だと「ああ, いい, アホ」になる。</p>
                            <p class="note_contents">string.Compare のページには、The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters とある。これは、コードにおいては、StringComparison comparisonType が指定されない場合に StringComparison.CurrentCulture が自動的に設定される実装による。</p>
                            <p class="note_contents">String.Compare Method (System) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.string.compare" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.string.compare</a></p>
                            <p class="note_contents">String.Comparison.cs<br />
                                <a href="https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/String.Comparison.cs" target="_blank" class="url">https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/String.Comparison.cs</a></p>
                            <p class="note_contents">これは string.CompareTo でも同様で、同じく内部的に StringComparison.CurrentCulture が設定されている。</p>
                            <p class="note_contents">といった、CurrentCulture での比較が .NET の黎明期からのデフォルトの挙動になっていたことと整合させたのか、OrderBy も、OrderedEnumerable.GetEnumerableSorter に次のコードがある。</p>
                            <p class="note_contents">if (typeof (TKey) == typeof (string) &amp;&amp; comparer == Comparer &lt;string&gt;.Default)<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;comparer = (IComparer &lt;TKey&gt;) StringComparer.CurrentCulture;</p>
                            <p class="note_contents">OrderBy.cs<br />
                                <a href="https://source.dot.net/#System.Linq/System/Linq/OrderBy.cs" target="_blank" class="url">https://source.dot.net/#System.Linq/System/Linq/OrderBy.cs</a></p>
                            <p class="note_contents">OrderedEnumerable.cs<br />
                                <a href="https://source.dot.net/#System.Linq/System/Linq/OrderedEnumerable.cs" target="_blank" class="url">https://source.dot.net/#System.Linq/System/Linq/OrderedEnumerable.cs</a></p>
                            <p class="note_contents">そのため、デフォルトの挙動で、ひらがなとカタカナの混在はうまく処理される。</p>
                            <p class="note_contents">蛇足だが、ここには次のページの内容も関わっているのだろう。</p>
                            <p class="note_contents">日本語文字列照合順番 - Wikipedia<br />
                                <a href="https://ja.wikipedia.org/wiki/%E6%97%A5%E6%9C%AC%E8%AA%9E%E6%96%87%E5%AD%97%E5%88%97%E7%85%A7%E5%90%88%E9%A0%86%E7%95%AA" target="_blank" class="url">https://ja.wikipedia.org/wiki/%E6%97%A5%E6%9C%AC%E8%AA%9E%E6%96%87%E5%AD%97%E5%88%97%E7%85%A7%E5%90%88%E9%A0%86%E7%95%AA</a></p>
                            <p class="note_contents">スレッドを日本語のカルチャーにして CurrentCulture 系を使うか、文字列処理のメソッドに直接、日本語のカルチャーを指定するかにより、このルールも（？）適用される可能性がある。実際どうなのかは調べれば分かるだろうが、適用されるかどうかにより StringComparer のプロパティーの使い分けなどが影響を受けるわけでないため、現時点では深入りを避ける。</p>
                            <p class="note_contents">上記のコードに StringComparer.InvariantCulture を指定すると、意外と「ああ, アホ, いい」が表示される。ということは、InvariantCulture は、Char.ToUpperInvariant についてのタスクのメモに書いた &#229; などの合字のみ扱うのでなく、「他のカルチャーに影響せず、どのカルチャーが指定されているときでも行われてよい配慮」を常に行うことも考えられる。</p>
                            <p class="note_contents">といったこともまた結論には影響しない。そのうち忘れるので備忘録として書いておいた。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">使い分けについては、次のように考えている。</p>
                            <p class="note_contents">* Ordinal 系 → 特段の理由がなければ、これを使う（デフォルト扱い）<br />
                                * InvariantCulture 系 → 文字の変換、置換、ソート結果が一定してほしいところなどに<br />
                                * CurrentCulture 系 → コードの透明性・確実性に影響するため使わない<br />
                                * 具体的なカルチャー → ユーザーに表示するデータのソートなどに</p>
                            <p class="note_contents">照合においては Ordinal 系が安全。&#229; を1文字で書いても2文字にしても同じ文字列と認識されるようなことは、さまざまな攻撃に利用できてしまう。</p>
                            <p class="note_contents">比較においても、特段の理由がなければ Ordinal 系を使う。しかし、ソートが関わってくるなら、たいてい Ordinal 系より適するものがある。</p>
                            <p class="note_contents">InvariantCulture 系は、&#229; の例もあって、文字の変換においてはデフォルト。そのため、char.ToUpperInvariant などを常用する。</p>
                            <p class="note_contents">置換は、挙動としては変換と通じるものがある。たとえば、&#229; を含む単語を &#197; を含む大文字に置換したいとき、1文字の &#229; と、a + 特殊な丸の2文字による &#229; の両方が &#197; を含む大文字の単語に置き換えられることが、その置換を行う側の意図だろう。検索文字列とバイト単位で一致する &#229; しか置換されないのでは不足があるため、ここでも InvariantCulture 系が適する。</p>
                            <p class="note_contents">ソート結果が一致しなければならないところにも InvariantCulture 系は適する。</p>
                            <p class="note_contents">たとえばファイルパスのリストを毎回ソートしてファイルに保存する場合、そのアプリを起動するユーザーのパソコンのロケール設定によりファイルの内容が異なるべきでない。大昔、Dropbox で共有していたそういうファイルを自分のパソコンではバックアップのため Subversion レポジトリーにコミットしていた。自分以外が別のパソコンで同じアプリを開くたびに Dropbox により自分の手元のファイルの内容の順序が変わり、SVN でのコミット時に余計な差分が出ていた。</p>
                            <p class="note_contents">CurrentCulture 系は、スレッドの CurrentCulture プロパティーの値に依存するため避ける。そちらがいつの間にか改ざんされていれば、照合や比較の挙動の変化がセキュリティーリスクになる可能性がある。</p>
                            <p class="note_contents">特定のユーザーに表示するデータのソートなど、他のユーザーへの影響を考えにくく、その人で完結することには、その人の具体的なカルチャーの使用が適する。ソートの順序に基づき入力項目の表現を調整するなどはないわけで、より良い表示にするベストエフォート系の仕様にデメリットはない。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">近々、nStringDictionary を作る。そのキーには、Ordinal を使う可能性が高い。</p>
                            <p class="note_contents">Ordinal 系なのは、想定外の一致によるセキュリティーリスクなどを懸念してのこと。</p>
                            <p class="note_contents">case-sensitive にするのは、JSON がそうなっているようなのと、その方が処理が速いため。</p>
                            <p class="note_contents">Preface<br />
                                <a href="https://docs.oracle.com/en/database/oracle/oracle-database/21/adjsn/preface.html" target="_blank" class="url">https://docs.oracle.com/en/database/oracle/oracle-database/21/adjsn/preface.html</a></p>
                            <p class="note_contents">NoSQL データベースである Cassandra では、データは byte [] で保存され、case-insensitive な照合は不可能とのこと。case-insensitive な処理が必要なら、初めから小文字で保存するべきとの意見がある。これも速度を考えてのことだろう。</p>
                            <p class="note_contents">How to read cassandra data with out case sensitive - Stack Overflow<br />
                                <a href="https://stackoverflow.com/questions/3649979/how-to-read-cassandra-data-with-out-case-sensitive" target="_blank" class="url">https://stackoverflow.com/questions/3649979/how-to-read-cassandra-data-with-out-case-sensitive</a></p>
                            <p class="note_contents">蛇足だが、次のページには、Use the String.ToUpperInvariant method instead of the String.ToLowerInvariant method when you normalize strings for comparison とある。</p>
                            <p class="note_contents">他のところには、Comparisons made using StringComparison.OrdinalIgnoreCase are behaviorally the composition of two calls: calling ToUpperInvariant on both string arguments, and doing a comparison using StringComparison.Ordinal というのもある。</p>
                            <p class="note_contents">Best Practices for Comparing Strings in .NET | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings</a></p>
                            <p class="note_contents">自分も、英文の大半は小文字なので、わずかな大文字を小文字にするノーマライズを考えがちだが、大文字にしろと Microsoft の文書に複数回、明記されているため、.NET のコードでは大文字にしようと思う。（大文字のみのデータがどこかに流れ込んだ場合にそれが比較のために生成されたものと視覚的に分かりやすいメリットもあるか）。</p>
                            <p class="note_contents">nStringDictionary が扱うファイルフォーマット（の一つ？）は、INI ファイルに似ている。INI ファイルは、case-insensitive のようだ。</p>
                            <p class="note_contents">INI file - Wikipedia<br />
                                <a href="https://en.wikipedia.org/wiki/INI_file#Case_sensitivity" target="_blank" class="url">https://en.wikipedia.org/wiki/INI_file#Case_sensitivity</a></p>
                            <p class="note_contents">ユーザーが手作業で抜き差しするキーなら case-insensitive の方が二つの理由で良さそうとも思う。一つは、大文字・小文字の違いにより設定が反映されないのを防げること。もう一つは、大文字・小文字だけ異なる二つ以上のキーを自分が誤って定義してしまう可能性がゼロになること。</p>
                            <p class="note_contents">しかし、いずれも、構文解析のパフォーマンスを恒常的に落とすほどのリスクでない。</p>
                            <p class="note_contents">たとえばパスワードでは大文字・小文字が区別されることが多い。そのことにユーザーが慣れているため、「キーは大文字・小文字が区別されますよ」と目立つところに書いておけば、ほとんどの人は注意してくれる。</p>
                            <p class="note_contents">大文字・小文字のみ異なる二つの以上のキーについては、そういうものが見付かり次第、デバッグモードなら警告されるようにするのが一つの選択肢。キーについては、その他にもいろいろなことをチェックしようと考えている。</p>
                            <p class="note_contents">HTML など、構文解析のコストがその後のレンダリングのコストに比べて微々たるものであるところでは、要素名やプロパティー名の表記の自由度は、その技術を利用するにおけるハードルを少し下げる。</p>
                            <p class="note_contents">しかし、nStringDictionary が扱うデータやその出力先のファイルについては、簡易的な CRUD などにも使われる可能性を想定するなら、とにかく少しでもパフォーマンスの高い実装になっているべき。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="616b38e5-14f6-4f86-b75a-c26e061b39b6" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">NameValueCollection のラッパークラスを用意</span>
                    <a href="#616b38e5-14f6-4f86-b75a-c26e061b39b6" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="42b6f02f-f1af-48d1-bac4-7301cbad77a5" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">Mac でコンパイルしてみる</span>
                    <a href="#42b6f02f-f1af-48d1-bac4-7301cbad77a5" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="a9a3e928-b456-40d2-a8ac-c77f2c28efba" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">Google による diff のアルゴリズムの現状を調べる</span>
                    <a href="#a9a3e928-b456-40d2-a8ac-c77f2c28efba" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">枯れているようだったので、早速、組み込んだ。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="dbad0316-03fd-4060-91b8-17cf6d1b2d64" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">HTML の文字の encode/decode の処理をまとめる</span>
                    <a href="#dbad0316-03fd-4060-91b8-17cf6d1b2d64" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ウェブでは escape chars として HTML の出力時に変換されるべき文字が挙げられているケースも多い。escape なのか encode なのか .NET でもブレていて、HTML 用の WebUtility.HtmlEncode と XML 用の SecurityElement.Escape が存在する。特にこだわりはないので、.NET にならい、nHtml では Encode/Decode とする。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="b72b0c0c-0216-445d-96bc-b01b46998a0d" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">diff-match-patch のコードが null 関連の警告だらけであることに対処</span>
                    <a href="#b72b0c0c-0216-445d-96bc-b01b46998a0d" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="59b2e31c-ec46-4832-9354-b33cee5b97bb" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://en.wikipedia.org/wiki/Byte_order_mark" target="_blank" class="url">https://en.wikipedia.org/wiki/Byte_order_mark</a> を読む</span>
                    <a href="#59b2e31c-ec46-4832-9354-b33cee5b97bb" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">nBom クラスの実装時には、全ては読まなかった。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">CR/LF や ASCII の1バイトを探し、その前後に規則的に現れる NULL 文字により Unicode のビット数やエンディアンを判別することが推奨されている。</p>
                            <p class="note_contents">しかし、ページには this can result in both false positives and false negatives とある。自分もそのことへの懸念がある。Nekote では今後も BOM をできるだけ入れる。</p>
                            <p class="note_contents">入れないソフトが多数あるが、入れるソフトも同じくらい見る。ハードタブとソフトタブの論争のようなもので、賛否両論があることでソフトは両方に対応する。BOM が入っていると困るソフトを、今、パッと思い出せない。入れてもさほど困らない。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="ebc70314-2ca1-4baf-8c11-9d052653c9d8" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://stackoverflow.com/questions/24192035/can-visual-studio-handles-u20000-unicode-as-char-how" target="_blank" class="url">https://stackoverflow.com/questions/24192035/can-visual-studio-handles-u20000-unicode-as-char-how</a> を読む</span>
                    <a href="#ebc70314-2ca1-4baf-8c11-9d052653c9d8" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="6795636c-ebe9-43e4-b366-c1d82b3e1334" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">.NET の機能でひらがなを判別する方法を探す</span>
                    <a href="#6795636c-ebe9-43e4-b366-c1d82b3e1334" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Char.GetUnicodeCategory で得られる UnicodeCategory という enum では、現時点で Other Letter に127,004文字、Other Symbol に6,431文字が関連付けられている。CJK をガバッと放り込んだ感が強い。</p>
                            <p class="note_contents">Char.GetUnicodeCategory Method (System) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.char.getunicodecategory" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.char.getunicodecategory</a></p>
                            <p class="note_contents">UnicodeCategory Enum (System.Globalization) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.globalization.unicodecategory" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.globalization.unicodecategory</a></p>
                            <p class="note_contents">Unicode Character Categories<br />
                                <a href="https://www.compart.com/en/unicode/category" target="_blank" class="url">https://www.compart.com/en/unicode/category</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">.NET 4 の頃にはなかった UnicodeRanges に Hiragana プロパティーがある。</p>
                            <p class="note_contents">UnicodeRanges Class (System.Text.Unicode) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.text.unicode.unicoderanges" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.text.unicode.unicoderanges</a></p>
                            <p class="note_contents">UnicodeRanges.Hiragana Property (System.Text.Unicode) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.text.unicode.unicoderanges.hiragana" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.text.unicode.unicoderanges.hiragana</a></p>
                            <p class="note_contents">少し探した限り、分かるのは範囲だけで、それぞれの文字が定義されているかどうかは分からないようだ。</p>
                            <p class="note_contents">JIS 系のエンコーディングに変換して戻すラウンドトリップでも試せばだいたい分かるだろうが、コストが大きい。</p>
                            <p class="note_contents">範囲を見るのが限界で、それで未定義の文字が使われて表示が乱れるなどは、その文字が制御文字でない限り問題でないと割り切るのが現実的。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="28bcff74-cbef-4dc4-8dfa-599e2c7fe19c" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://learn.microsoft.com/en-us/dotnet/api/system.char.convertfromutf32" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.char.convertfromutf32</a> をチェック</span>
                    <a href="#28bcff74-cbef-4dc4-8dfa-599e2c7fe19c" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">サロゲートペアについて学ぶ。</p>
                            <p class="note_contents">16ビットの文字列から32ビットの文字（つまり、BMP に入らないもの）を複数含む文字列を検索する方法は？</p>
                            <p class="note_contents">「もっと読む」の実装のために文字列を分割するにおいて、サロゲートペアの途中で割ってしまわないためのチェックは？</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">サロゲートペアは、前が high surrogate、後ろが low surrogate とされ、いずれも固有の範囲の値。そのため、ピンポイントで、それが前なのか後ろなのか分かる。つまり、前後のコンテキストの解析が不要。</p>
                            <p class="note_contents">検索は、2文字分の文字列にしたものをそのまま探すだけ。</p>
                            <p class="note_contents">分割は、サロゲートペアの範囲の文字なら「○文字以下」に収めるため一つ前の文字までにするだけ。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="6d706cfd-d0b2-40e4-affe-858e445267a1" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo</a> を読む</span>
                    <a href="#6d706cfd-d0b2-40e4-affe-858e445267a1" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="57bc97d2-b690-4d80-aa7f-aea8573eebb8" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">漢字を読みの順に並び替える方法を探す</span>
                    <a href="#57bc97d2-b690-4d80-aa7f-aea8573eebb8" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">このページが詳しい。</p>
                            <p class="note_contents">文字列と比較オプション・カルチャの並べ替え規則 - smdn.jp<br />
                                <a href="https://smdn.jp/programming/netfx/string/2_2_compareoptions/" target="_blank" class="url">https://smdn.jp/programming/netfx/string/2_2_compareoptions/</a></p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">IEnumerable &lt;char&gt; を StringComparer や CultureInfo.CompareInfo 関連のもので並び替える方法を探したが、char をいったん string にすることのない方法が見付からなかった。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="11ab7787-d53e-4b7f-b5be-45bb3cf1d752" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">常用漢字などの配列の要素を ja-JP で並び替える</span>
                    <a href="#11ab7787-d53e-4b7f-b5be-45bb3cf1d752" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="0fdfc859-9084-49fa-8355-6b87973748d0" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">まだ習っていない漢字を diff-match-patch 的に出力できるようにする</span>
                    <a href="#0fdfc859-9084-49fa-8355-6b87973748d0" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">コーディングの練習にちょうど良いかと思ったが、照合の処理が単純なループなので、Is* のみ用意すれば足りる。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="fae7d96c-aded-4c7a-8b4d-b073891b5d65" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">カルチャーの HTML ページの生成時の行中の空白系文字をチェック</span>
                    <a href="#fae7d96c-aded-4c7a-8b4d-b073891b5d65" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">いろいろと問題があったため、スクショを追加し、詳細をメモに書いた。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="704c0053-1189-4cdd-a69a-22a92a154be1" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">DateTime と文字列のラウンドトリップのメソッドを揃える</span>
                    <a href="#704c0053-1189-4cdd-a69a-22a92a154be1" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="4b8abb06-a791-4cd7-8228-879fbda3cf8c" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nTimeSpan クラスのメソッドを揃える</span>
                    <a href="#4b8abb06-a791-4cd7-8228-879fbda3cf8c" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="d2b0066f-ffb9-44c9-a39f-c00464ac38c6" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">タイムゾーン名のリストを取得できるか調べる</span>
                    <a href="#d2b0066f-ffb9-44c9-a39f-c00464ac38c6" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="32998666-9d8a-4e6c-a62f-492df552d15a" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">三つのパソコンでエンコーディングの表を出力</span>
                    <a href="#32998666-9d8a-4e6c-a62f-492df552d15a" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="231138a9-0ec5-49e0-9b2b-52e0889690ee" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://smdn.jp/programming/dotnet-samplecodes/" target="_blank" class="url">https://smdn.jp/programming/dotnet-samplecodes/</a> に目を通す</span>
                    <a href="#231138a9-0ec5-49e0-9b2b-52e0889690ee" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">知らないことを探す。少しでも Nekote のコードをシンプルに。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="a1283b92-d043-44cc-86c8-95c32921b951" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">long と YouTube 的なキーの相互変換を実装</span>
                    <a href="#a1283b92-d043-44cc-86c8-95c32921b951" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Base64 と酷似。英数字, -, _ の64文字が使われる。それが11文字。1文字で6ビット分のデータなので、11文字あれば66ビット。そのうち2ビット分を捨てれば、long とラウンドトリップ。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">基本的には、整数を id、文字列を key とする。これは文字列なので key が適する。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="d2424b70-f2f6-4a61-bbfe-813045e6370c" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">Enum と文字列の相互変換など、パッと書けない処理をメソッド化</span>
                    <a href="#d2424b70-f2f6-4a61-bbfe-813045e6370c" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Format, Parse, ToObject, ToString があって紛らわしい。毎回ちょっと確認している気がする。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ドキュメントを読みあさり、簡単なサンプルコードを書いた。また、nEnum.Validate* を追加した。これで十分。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="d0253c5a-f481-4593-b4d5-f01160d5acf2" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">iEnumTester.TestEverything を Mac で実行</span>
                    <a href="#d0253c5a-f481-4593-b4d5-f01160d5acf2" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">問題なし。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="bf4679cb-a1f0-46e0-8250-6c1d4df997c4" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">文字列を数値的に比較できるようにする</span>
                    <a href="#bf4679cb-a1f0-46e0-8250-6c1d4df997c4" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="d9360e09-f221-4b03-b92f-27ad796145e1" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">文字列の数値的な比較の新旧の実装について書く</span>
                    <a href="#d9360e09-f221-4b03-b92f-27ad796145e1" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">最初の実装では、iFindNumericPart のあと、「数字が見付かったなら、その直前まで。なかったなら、文字列の末尾まで」という部分文字列を双方から取得し、それらを比較していた。</p>
                            <p class="note_contents">たとえば、</p>
                            <p class="note_contents">hoge1<br />
                                ho</p>
                            <p class="note_contents">なら、hoge と ho を比較した。</p>
                            <p class="note_contents">現行の実装では、両方に数字が見付かり、さらにそれらの出現位置が一致するのでないと、数値モードでの比較にならない。どちらか、または両方に数字がなければ、絶対に数値モードでの比較にならないため、その時点で双方の残り全てが Substring されて、Compare の結果がすぐに return される。両方に数字があろうと、出現位置が異なれば、数字でないものが数字と一致することは絶対になく、出現位置の違いのところで絶対に文字列の大小が定義されるため、こちらでも return Compare になる。</p>
                            <p class="note_contents">古い実装は、それと「ほぼ」同じ結果を短いコードで得られた。</p>
                            <p class="note_contents">唯一の問題は、ASCII における半角数字より前の文字の順序が反対になることだった。</p>
                            <p class="note_contents">それで困るものの最たる例が . だ。</p>
                            <p class="note_contents">file.txt<br />
                                file2.txt</p>
                            <p class="note_contents">を通常の文字列として比較すると、. &lt; 2 なので、file.txt が先にくる。</p>
                            <p class="note_contents">しかし、古い実装だと、file.txt と file の比較になり、短い file の方が小さいとされて、file2.txt &lt; file.txt という結果になる。</p>
                            <p class="note_contents">ASCII の文字の順序が決まった頃にここまで考慮されていたかどうかは分からないが、. は、「それより小さいものは制御文字と一部の記号のみ」というくらい小さい。全ての英数字より小さい。だからこそ拡張子に使いやすい。</p>
                            <p class="note_contents">それは / も同じで、</p>
                            <p class="note_contents">/hoge/moge<br />
                                /hoge1/moge</p>
                            <p class="note_contents">というのも、この通りの大小関係になる。（古い実装では、これも反転する）。</p>
                            <p class="note_contents">ここで興味深いのは \ で、これは、「数字 &lt; 大文字 &lt; \ &lt; 小文字」という中途半端な大小関係にある。そのため、大文字・小文字を比較するのでは、</p>
                            <p class="note_contents">*\HOGE\moge<br />
                                *\hog\moge<br />
                                *\hoge\moge</p>
                            <p class="note_contents">というのが、この通りの大小関係になる。</p>
                            <p class="note_contents">Console.WriteLine (string.Join (&quot;, &quot;, new [] { @&quot;*\hoge\moge&quot;, @&quot;*\hog\moge&quot;, @&quot;*\HOGE\moge&quot; }.OrderBy (x =&gt; x, StringComparer.OrdinalIgnoreCase))) を実行すると、出力は *\hoge\moge, *\HOGE\moge, *\hog\moge になる。</p>
                            <p class="note_contents">これは、次のページの Use the String.ToUpperInvariant method instead of the String.ToLowerInvariant method when you normalize strings for comparison というのと整合する。</p>
                            <p class="note_contents">Best Practices for Comparing Strings in .NET | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings</a></p>
                            <p class="note_contents">初回の実装の問題により、拡張子は . でないとうまくいかないこと、/ と \ の違い、Windows のパスをそのまま並び替えるのでは、より短い hog が hoge よりあとに来てしまうことなどが分かった。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="f751a20f-d5a1-45de-828c-5ee79b0e4e35" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">KVP の集まりを扱えるようにする</span>
                    <a href="#f751a20f-d5a1-45de-828c-5ee79b0e4e35" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">nStringDictionary を追加した。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="50ec473d-8149-4cb2-b600-af1e9d4254b8" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">INI-like なファイルの拡張子を考える</span>
                    <a href="#50ec473d-8149-4cb2-b600-af1e9d4254b8" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Nekote INI で .nini でよい。若干アホっぽいが、そのうち慣れる。よく使われる拡張子ではないようだ。ini が入っているので、だいたいどういうファイルなのかは開かなくても分かる。</p>
                            <p class="note_contents">.nin なども考えたが、*.config などが問題でない時代に4文字から3文字にすることで、1) 既存の拡張子との衝突の可能性が高まる、2) 内容が分からなくなる、の二つのデメリットがある。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="4b074a88-6854-4a78-bb48-4ae44b43c12b" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">INI 的な KVP のファイルフォーマットを探す</span>
                    <a href="#4b074a88-6854-4a78-bb48-4ae44b43c12b" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">JSON, INI の他には ValTree というものがあった。</p>
                            <p class="note_contents">JSON - Wikipedia<br />
                                <a href="https://en.wikipedia.org/wiki/JSON" target="_blank" class="url">https://en.wikipedia.org/wiki/JSON</a></p>
                            <p class="note_contents">INI file - Wikipedia<br />
                                <a href="https://en.wikipedia.org/wiki/INI_file" target="_blank" class="url">https://en.wikipedia.org/wiki/INI_file</a></p>
                            <p class="note_contents">NatWeiss/ValTree: A minimal text file format for storing key value pairs in a hierarchy and a C++ class to read, write and use the data.<br />
                                <a href="https://github.com/NatWeiss/ValTree" target="_blank" class="url">https://github.com/NatWeiss/ValTree</a></p>
                            <p class="note_contents">改行文字がエスケープされず、差分を取りやすいフォーマットが別に欲しい。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">INI 的なものとしては、INI-like と雑に呼称する仕様がまとまり、実装も終わった。改行がエスケープされず、差分を取りやすいものについては、別のタスクで扱う。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="652bc6c9-6a77-423b-b0d9-48d3b5486ffc" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents"><a href="https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.cryptostream" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.cryptostream</a> をチェック</span>
                    <a href="#652bc6c9-6a77-423b-b0d9-48d3b5486ffc" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">しばらくは必要でなさそう。必要になれば、どこかのサンプルコードでまた遭遇する。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="34357beb-0a77-4ea5-8215-aa4d7586df7e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nStopwatch のテストコードを書く</span>
                    <a href="#34357beb-0a77-4ea5-8215-aa4d7586df7e" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">nStopwatch.CurrentEntryElapsedTime と nStopwatchEntry.ElapsedTime を統合できないのは、つまり、nStopwatch.CurrentEntry.ElapsedTime とできないのは、名前が似ていても中身が大きく異なるため。</p>
                            <p class="note_contents">nStopwatch を見るたびに、まとめるべきフィールドが散らばっているかのように感じるが、具体的にどこか直そうとすると、現行のコードに特に問題がないことに気付かされる。</p>
                            <p class="note_contents">では、なぜ何となくモヤモヤしているのかと言えば、テストコードがないからか。</p>
                            <p class="note_contents">timeLog に必要だったクラスを、timeLog 以外でも使えそうだと思っては、何となく Nekote に入れた。実際、他のアプリでも絶対に役に立つクラス。</p>
                            <p class="note_contents">しかし、「timeLog が動いた」ということ以上のテストがまだなので、そこだけちゃんとしておく。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">テストコードを書いた。ついでに nStopwatch のコードとコメントを全体的にチェックした。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="e26a63c7-9aaa-4cbf-bbd0-791728e334a0" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">CRUD の処理のインターフェースを試作</span>
                    <a href="#e26a63c7-9aaa-4cbf-bbd0-791728e334a0" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">保存先がデータベースでもファイルシステムでもいけるように。ファイルシステムの場合、主キーに Ticks や GUID を使えるように。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ほとんどのソフトに必要なので Func まみれにして拡張性を？</p>
                            <p class="note_contents">有効かどうか、いつから有効か、いつまで有効か、表示順序（ソートに使われる整数）、ロックされているかどうか、アーカイブされているかどうか、といった列をごくわずかなコードで追加したい。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">コリジョンの回避、エントリーのロックやアーカイブ、ソートキーといったアイデアが多数あるが、そういったものはデータベースの仕事。まずは、主に単一プロセスのマルチスレッドによるアクセスを想定した簡単なものを実装した。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="cfe64868-d6a3-4917-8084-92ce6ea905d2" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">コリジョンに強い CRUD の仕組みを考える</span>
                    <a href="#cfe64868-d6a3-4917-8084-92ce6ea905d2" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">レポジトリーで共有されている写真について複数ユーザーがタグやコメントを付けていくようなことをテキストファイルで。</p>
                            <p class="note_contents">「いつ、誰が、何を、どのように」の集まりのファイルが GUID 付きの Ticks など、そう簡単にはぶつからないファイル名で単一ディレクトリーに保存されていき、自動的に統合・キャッシュされる。</p>
                            <p class="note_contents">簡易的に A.txt, B.txt とすると、それらを統合してのキャッシュとして X.bin が作られ、中に A.txt と B.txt の名前やサイズが入る。そのディレクトリーに C.txt が加わるとき、それが B.txt よりあとのものなら X.bin + C.txt で処理されたり、Y.bin に A, B, C の情報が入ったりするが、C が B より古いなら X が A, C, B で作り直されるなど。</p>
                            <p class="note_contents">要は、ジャーナリング＋CRUD をやりたい。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Dropbox など、単一プロセスの保証のあるところで入念なデバッグを行えば可能だが、他のアプリからもデータファイルにアクセスされる可能性のある INI-like なファイルがゴソッと入ったディレクトリーでやれることでない。素直にデータベースを使う。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="d8bafc57-81a4-45f1-8e6a-3c6679a71f49" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">コンソールなどへの出力をログレベルと連動させる</span>
                    <a href="#d8bafc57-81a4-45f1-8e6a-3c6679a71f49" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">行単位での出力を見直す。たとえば</p>
                            <p class="note_contents">エラーが発生しました:<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;一つ目のエラーの概要<br />
                                &nbsp;&nbsp;&nbsp;&nbsp;二つ目のエラーの概要</p>
                            <p class="note_contents">という表示は、3回の Console.WriteLine で出力されるべきでない。</p>
                            <p class="note_contents">ただ、全てのメッセージに、日時、ログレベル、種類、データ構造などを与えるのは冗長か。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">いろいろと揃ってから、Console を検索。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">やめておく。その徹底により得たい利益がない。システムの保守などに必要なログ収集は、コンソールへの出力とは個別にきちんと行われる必要がある。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="50040e2d-18c1-4666-aff9-9a8f9d6a7ae8" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">常識的かつ拡張可能なログレベルの仕組みを考える</span>
                    <a href="#50040e2d-18c1-4666-aff9-9a8f9d6a7ae8" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">以前、いくつかの全く異なるシステムでログレベルは似ていることがあった。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ASP.NET Core Razor Pages に JavaScript のフロントエンドのフレームワークを合わせる開発が C# ではメインになる。None が0でないのが不満だが、ASP.NET Core の LogLevel をそのまま使う。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="62c2289f-3a0e-4f81-825c-30feb88a318c" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">かつての DataPage のようなものに必要な機能を揃える</span>
                    <a href="#62c2289f-3a0e-4f81-825c-30feb88a318c" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">古い考え方を捨てる。Razor Pages にフィルターをゴテゴテと付ける実装になりそう。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="1b0afd1e-b216-413b-8f43-3c397f9a9999" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents"><a href="https://www.benricho.org/moji_conv/13.html" target="_blank" class="url">https://www.benricho.org/moji_conv/13.html</a> をチェック</span>
                    <a href="#1b0afd1e-b216-413b-8f43-3c397f9a9999" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">新旧字体の変換のページ。Nekote に組み込んだ漢字リストと照らし合わせる。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="1b9130da-4b1e-425c-828b-06b9554a621e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">Nekote/Shared 内の構造をシンプルにする</span>
                    <a href="#1b9130da-4b1e-425c-828b-06b9554a621e" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">Imported を Shared から出し、残りはフラットでよいか。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="ed50c75b-06a0-41c4-8845-84fa5ba8f855" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">TestKanjiLists とその前後を消す</span>
                    <a href="#ed50c75b-06a0-41c4-8845-84fa5ba8f855" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="b7efe506-08a5-4b98-9f84-0bdb821f49f8" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">iTester を iTesterShared にする</span>
                    <a href="#b7efe506-08a5-4b98-9f84-0bdb821f49f8" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="5f3a85d4-657c-43b5-9ccb-5bba921a83db" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">実装に関する不要な警告を非表示にする</span>
                    <a href="#5f3a85d4-657c-43b5-9ccb-5bba921a83db" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">[assembly: SuppressMessage (&quot;Style&quot;, &quot;IDE1006&quot;)]</p>
                            <p class="note_contents">のような書き方で動く。つまり、それ以降の変数を省略できる。必須の変数はこの二つだけのようなので、これで様子見。</p>
                            <p class="note_contents">SuppressMessageAttribute Class (System.Diagnostics.CodeAnalysis) | Microsoft Learn<br />
                                <a href="https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.suppressmessageattribute" target="_blank" class="url">https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.suppressmessageattribute</a></p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="2770dbe3-95ee-4b58-9900-4f73ee03eb2e" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">常用漢字関連の機能を全て消す</span>
                    <a href="#2770dbe3-95ee-4b58-9900-4f73ee03eb2e" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">思いつきで入れた。使うかと思ったが使い道が今のところない。行政がデータを CSV で出しているなどでなく、他者が変換したものをさらに自分が変換してのデータなのも気になる。Nekote に入れておくほどの正確性を保証できない。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="1856d72e-b863-4d1f-bc2f-181dc15d0fce" class="task canceled">
                <div class="task_contents">&cross;
                    <span class="task_contents">バージョン番号を二つの数字にすることを検討</span>
                    <a href="#1856d72e-b863-4d1f-bc2f-181dc15d0fce" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">昨年8月のメモに「0.1 は機能的にそれなりに充実したものでないといけないので、0.1.0 からというのは適さない」とある。</p>
                            <p class="note_contents">約1年前に、機能が揃っていない段階での、ほかのプログラムへの同梱や開発上のマイルストーン的なアーカイブを 0.1 未満にすると判断したようだ。</p>
                            <p class="note_contents">どのプログラムにおいても自分は「一応使える」を 0.1 にするため、この判断は悪くない。よって、今後も三つの数字とする。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="b7dccb27-2e6f-4fc9-a694-c3fa28525de5" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">スレッド数をちゃんと更新できていなかったことについて調べる</span>
                    <a href="#b7dccb27-2e6f-4fc9-a694-c3fa28525de5" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">「こう書けば動く」というのを見付けて先へ進んだが、ずっとチクチクと気になっている。元の書き方で動かなかった理由を説明できないため。バグだと思えない。自分が何か理解していない可能性が高い。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">まだ理由をはっきりとは説明できないが、どういう条件が揃ったときに起こり、どう対処するべきかは明確。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="abc27ef0-6650-4cdb-91d1-16b3f439d3a4" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nExceptionLogger の仕様を見直す</span>
                    <a href="#abc27ef0-6650-4cdb-91d1-16b3f439d3a4" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">初期のクラスで、設計が甘い。</p>
                            <p class="note_contents">nException に Log が入っているのが謎。これは入れ物クラス。</p>
                            <p class="note_contents">Random.Shared 的に考えるなら、nExceptionLogger を lock なしで使えるように作り、その Default により nExceptionLogger.Default.Add くらいが現実的。</p>
                            <p class="note_contents">SortedList なのも謎。*Entry クラスを用意し、そちらに「ファイルに出力されたか」「ネット経由でアップロードされたか」といったフラグを入れ、すぐにアップロードできなければ次回起動時のアップロードも可能に。そのくらい統合的に作るべき。そういう設計にする場合、SortedList の Key はいったい何なのか。</p>
                            <p class="note_contents">ファイルに出力するクラス、ネット経由でアップロードするクラスも必要。*Logger という命名も見直す。どこまでやるのか分かりにくい。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">保存方法として、Ini-like と SQLite の二つから一つを選べるようにする？</p>
                            <p class="note_contents">さらに JSON も考えられるが、手書きするにはめんどくさく、爆速でもないので、いったん見送る。</p>
                        </div>
                    </div>
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">まずは構成を見直した。</p>
                            <p class="note_contents">自動 lock が可能な nException.Log は catch ブロックの実装に便利。それが内部的には nExceptionLogger.Default.Log を呼ぶようにした。</p>
                            <p class="note_contents">そのうち後者がファイルにもログを出力する実装は今度。アプリが出力するログも扱え、INI-like なファイルだけでなく SQLite などへも出力できるデータプロバイダーをかませたいので、ILogger などの学習が終わってからが適する。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="855f3ba9-727a-41df-9919-000eb7eb3597" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">0.0.3 としてアーカイブ</span>
                    <a href="#855f3ba9-727a-41df-9919-000eb7eb3597" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">timeLog の更新と同時に。マイルストーン的なアーカイブを作っていい程度の差分があるが、たまたま timeLog のアーカイブが近いので合わせる。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="175db996-b17f-432a-a69b-9b73c9247aca" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">現行の仕様が今後の長期の開発にたえうるか調べる</span>
                    <a href="#175db996-b17f-432a-a69b-9b73c9247aca" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">ザッと見た。大丈夫そう。</p>
                            <p class="note_contents">8～9月のイベントの連続および9月13～14日の東京出張が終わり、やっと落ち着いたので、今後は開発を本格化する。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="22684bf1-9a67-479a-9721-bbd77f66c1dd" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">スレッド数の更新がうまくいかなかったことについて AI に聞く</span>
                    <a href="#22684bf1-9a67-479a-9721-bbd77f66c1dd" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">一瞬で解決してしまった……。</p>
                            <div class="note_ai_generated">
<p>When dealing with generic classes and static variables in C#, the static variable is not shared between instances of different type parameters. Each closed constructed type will have its own version of the static variable.</p>
<p>Now, coming to your question, if you are using <code>Interlocked.Increment</code> in a generic class and it works only when you prefix it with the class name, it likely means that you are referencing the correct, specific version of the static variable associated with that constructed type.</p>
<p>Here’s a small example to demonstrate:</p>
<pre><code class="language-csharp">public class MyClass&lt;T&gt;
{
    private static int _counter;

    public void CreateThread()
    {
        // If Interlocked.Increment(ref _counter); does not work
        // then, fully qualifying the variable with class name might work
        Interlocked.Increment(ref MyClass&lt;T&gt;._counter);
    }
}
</code></pre>
<p>In this case, if you have <code>MyClass&lt;int&gt;</code> and <code>MyClass&lt;string&gt;</code>, they will have separate <code>_counter</code> variables, each associated with the respective closed constructed type.</p>
<p>Using the class name, especially with the generic parameter, ensures that you are accessing the correct <code>_counter</code> variable associated with that specific type parameter. If there is some form of shadowing or if the context within which you are accessing the variable makes it ambiguous or unclear which <code>_counter</code> you are referring to, fully qualifying it with the class name resolves that ambiguity.</p>
<p>This concept is especially important when dealing with thread safety and concurrent operations, as <code>Interlocked.Increment</code> is designed to modify the variable in a thread-safe way, and referencing the correct variable is crucial.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="349b9cb1-e2be-4dba-b52c-348b557c017f" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ほかにジェネリッククラスに静的変数を入れているところを探す</span>
                    <a href="#349b9cb1-e2be-4dba-b52c-348b557c017f" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="430537e5-df6a-41ff-8a40-67d31b53d646" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">nStopwatch.mThreadCount の問題を直す</span>
                    <a href="#430537e5-df6a-41ff-8a40-67d31b53d646" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="4579f669-4beb-4ead-888a-b69a3e921ddd" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">自動 lock を行うクラスの名前に Concurrent を入れる</span>
                    <a href="#4579f669-4beb-4ead-888a-b69a3e921ddd" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="f4d03969-c1a4-42af-b77f-5b0d482b44ac" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">ConsoleTester を NekoteConsole に改名</span>
                    <a href="#f4d03969-c1a4-42af-b77f-5b0d482b44ac" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">各所でウェブアプリと API を作り分ける構成を考えるにおいて、プロジェクト名の決め方が変わってきた。</p>
                        </div>
                    </div>
                </div>
            </div>
            <div id="34c92b93-0777-46bb-bcca-b22beb737ba7" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">v0.0.4 としてアーカイブ</span>
                    <a href="#34c92b93-0777-46bb-bcca-b22beb737ba7" class="permalink">&infin;</a>
                </div>
            </div>
            <div id="799dfedb-0509-411c-abea-be7a631d12de" class="task done">
                <div class="task_contents">&check;
                    <span class="task_contents">開発を打ち切る</span>
                    <a href="#799dfedb-0509-411c-abea-be7a631d12de" class="permalink">&infin;</a>
                </div>
                <div class="notes">
                    <div class="note">
                        <div class="note_contents">
                            <p class="note_contents">人生と技術の両方における過渡期と感じる。</p>
                            <p class="note_contents">やはりプログラミングでも何かやりたくて Nekote の開発を始め、まずは身の回りのツールからと思って多少のコードを書いた。それはうまくいき、いくつかのツールが今も便利だ。</p>
                            <p class="note_contents">しかし、永遠に一人で開発して自分が死んだら開発も利用も終わるのが当たり前という前提の開発だった。それでよかったが、これからはそうでない。</p>
                            <p class="note_contents">ビジネスや人脈づくりのほうに最近は軸足があり、プログラミングに割ける時間が落ちている。その隙間を縫ってやれるだけのことをやってきたつもりだが、大きなものを目指すにはまとまった時間が足りず、小さなものは揃っていて、はっきりとしたゴールの欠如が Nekote の開発速度をも落とし、いろいろとグダグダだった。</p>
                            <p class="note_contents">そう思っていたら、一緒に事業をやろう、一緒に会社をやろうといった声が方々から届き、またプログラミングに戻り、試しに ChatGPT と Copilot を試し、ウェブ API も作ってみたところ、衝撃を受けた。この10年くらいで、何もかもが変わっている。</p>
                            <p class="note_contents">AI に仕様やコードのリファクタリングをしてもらい、小さな単位で API を作り、それら API をできるだけ組み合わせてのアプリやサービスの構成というのを、できるだけ属人化させずにやる。それでおそらく最速の開発ができるし、人を雇ってスケールさせることもできる。</p>
                            <p class="note_contents">ダラダラと断続的にだが Nekote にはそれなりの時間を費やしたので打ち切りは惜しいが、時代が変わった。</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
